
/home/josejuan/git_repos/fpau_tests/pqc_sw/kyber/ref/test_kyber512:     file format elf32-littleriscv


Disassembly of section .text.init:

00000000 <_start>:
.section .text.init

.globl _start
_start:
  la gp, _gp
   0:	0000f197          	auipc	gp,0xf
   4:	ff818193          	addi	gp,gp,-8 # eff8 <_gp>
  la sp, _end_of_memory
   8:	00020117          	auipc	sp,0x20
   c:	ff810113          	addi	sp,sp,-8 # 20000 <_end_of_memory>
  jal main
  10:	2cc070ef          	jal	ra,72dc <main>
1:
  j 1b
  14:	0000006f          	j	14 <_start+0x14>

Disassembly of section .text:

00000018 <orca_register_timer_handler>:

#endif //#if ORCA_INTERRUPT_HANDLERS


orca_exception_handler orca_register_timer_handler(orca_exception_handler the_handler,void** the_context){
	orca_exception_handler old=timer_handler;
      18:	0000e797          	auipc	a5,0xe
      1c:	7f078793          	addi	a5,a5,2032 # e808 <timer_handler>
      20:	0007a683          	lw	a3,0(a5)
	void* old_context=timer_context;
      24:	0000e717          	auipc	a4,0xe
      28:	7e070713          	addi	a4,a4,2016 # e804 <timer_context>
	timer_handler = the_handler;
      2c:	00a7a023          	sw	a0,0(a5)
	void* old_context=timer_context;
      30:	00072783          	lw	a5,0(a4)
	if(the_context){
      34:	00058863          	beqz	a1,44 <orca_register_timer_handler+0x2c>
		timer_context = *the_context;
      38:	0005a603          	lw	a2,0(a1)
		*the_context = old_context;
      3c:	00f5a023          	sw	a5,0(a1)
		timer_context = *the_context;
      40:	00c72023          	sw	a2,0(a4)
	}
	return old;
}
      44:	00068513          	mv	a0,a3
      48:	00008067          	ret

0000004c <orca_register_ecall_handler>:
orca_exception_handler orca_register_ecall_handler(orca_exception_handler the_handler,void** the_context){
	orca_exception_handler old=ecall_handler;
      4c:	0000e797          	auipc	a5,0xe
      50:	7b478793          	addi	a5,a5,1972 # e800 <ecall_handler>
      54:	0007a683          	lw	a3,0(a5)
	void* old_context=ecall_context;
      58:	0000e717          	auipc	a4,0xe
      5c:	7a470713          	addi	a4,a4,1956 # e7fc <ecall_context>
	ecall_handler = the_handler;
      60:	00a7a023          	sw	a0,0(a5)
	void* old_context=ecall_context;
      64:	00072783          	lw	a5,0(a4)
	if(the_context){
      68:	00058863          	beqz	a1,78 <orca_register_ecall_handler+0x2c>
		ecall_context = *the_context;
      6c:	0005a603          	lw	a2,0(a1)
		*the_context = old_context;
      70:	00f5a023          	sw	a5,0(a1)
		ecall_context = *the_context;
      74:	00c72023          	sw	a2,0(a4)
	}
	return old;
}
      78:	00068513          	mv	a0,a3
      7c:	00008067          	ret

00000080 <register_orca_illegal_instruction_handler>:

//Register an illegal instruction
int register_orca_illegal_instruction_handler(orca_illegal_instruction_handler the_handler, void *the_context){
	int return_code = 0;
	if(illegal_instruction_handler){
      80:	0000e797          	auipc	a5,0xe
      84:	79078793          	addi	a5,a5,1936 # e810 <illegal_instruction_handler>
      88:	0007a703          	lw	a4,0(a5)
		return_code |= ORCA_EXCEPTION_ALREADY_REGISTERED;
	}
	illegal_instruction_handler = the_handler;
      8c:	00a7a023          	sw	a0,0(a5)
	illegal_instruction_context = the_context;
      90:	0000e797          	auipc	a5,0xe
      94:	77c78793          	addi	a5,a5,1916 # e80c <illegal_instruction_context>
      98:	00b7a023          	sw	a1,0(a5)
	return return_code;
}
      9c:	00e03533          	snez	a0,a4
      a0:	00008067          	ret

000000a4 <orca_register_interrupt_handler>:

	return return_code;
#else //#if ORCA_INTERRUPT_HANDLERS
		return ORCA_UNSUPPORTED_EXCEPTION_REGISTRATION;
#endif //#else //#if ORCA_INTERRUPT_HANDLERS
}
      a4:	00200513          	li	a0,2
      a8:	00008067          	ret

000000ac <handle_exception>:

//Handle an exception.  Illegal instructions and interrupts can be
//passed to handlers set using the
//register_orca_illegal_instruction_handler() and
//register_orca_interrupt_handler() calls respectively.
int handle_exception(size_t cause, size_t epc, size_t regs[32]){
      ac:	ff010113          	addi	sp,sp,-16
      b0:	00812423          	sw	s0,8(sp)
      b4:	00112623          	sw	ra,12(sp)
	switch(cause){
      b8:	00b00713          	li	a4,11
int handle_exception(size_t cause, size_t epc, size_t regs[32]){
      bc:	00058413          	mv	s0,a1
	switch(cause){
      c0:	0ee50263          	beq	a0,a4,1a4 <handle_exception+0xf8>
      c4:	00050793          	mv	a5,a0
      c8:	06a76c63          	bltu	a4,a0,140 <handle_exception+0x94>
      cc:	00400713          	li	a4,4
      d0:	00060693          	mv	a3,a2
      d4:	10e50463          	beq	a0,a4,1dc <handle_exception+0x130>
      d8:	00600713          	li	a4,6
      dc:	08e51663          	bne	a0,a4,168 <handle_exception+0xbc>
		if(timer_handler){
			timer_handler(timer_context);
			break;
		}else{ while(1); }
	case CAUSE_MISALIGNED_STORE:
		handle_misaligned_store(*((size_t*)epc), regs);
      e0:	0005a783          	lw	a5,0(a1)
	csrr(mtval,address);
      e4:	34302673          	csrr	a2,mtval
	size_t regval =reg[(instr>>15) & 0x1F] ;
      e8:	00d7d713          	srli	a4,a5,0xd
      ec:	07c77713          	andi	a4,a4,124
      f0:	00e68733          	add	a4,a3,a4
      f4:	00072703          	lw	a4,0(a4)
	switch((instr >>12) &3){
      f8:	00c7d793          	srli	a5,a5,0xc
      fc:	0037f793          	andi	a5,a5,3
		address[1] = ((regval>>8)&0xFF);
     100:	00875693          	srli	a3,a4,0x8
	switch((instr >>12) &3){
     104:	00100513          	li	a0,1
		address[0] = regval&0xFF;
     108:	0ff77593          	zext.b	a1,a4
		address[1] = ((regval>>8)&0xFF);
     10c:	0ff6f693          	zext.b	a3,a3
	switch((instr >>12) &3){
     110:	00a78a63          	beq	a5,a0,124 <handle_exception+0x78>
		address[2] = ((regval>>16)&0xFF);
     114:	01075793          	srli	a5,a4,0x10
		address[3] = ((regval>>24)&0xFF);
     118:	01875713          	srli	a4,a4,0x18
		address[2] = ((regval>>16)&0xFF);
     11c:	00f60123          	sb	a5,2(a2)
		address[3] = ((regval>>24)&0xFF);
     120:	00e601a3          	sb	a4,3(a2)
		break;
     124:	00d600a3          	sb	a3,1(a2)
     128:	00b60023          	sb	a1,0(a2)
	default:
		while(1);

	}
	return epc;
}
     12c:	00c12083          	lw	ra,12(sp)
		epc+=4;
     130:	00440513          	addi	a0,s0,4
}
     134:	00812403          	lw	s0,8(sp)
     138:	01010113          	addi	sp,sp,16
     13c:	00008067          	ret
	switch(cause){
     140:	80000737          	lui	a4,0x80000
     144:	00770693          	addi	a3,a4,7 # 80000007 <_end_of_memory+0x7ffe0007>
     148:	0ed50c63          	beq	a0,a3,240 <handle_exception+0x194>
     14c:	00b70713          	addi	a4,a4,11
	return epc;
     150:	00058513          	mv	a0,a1
	switch(cause){
     154:	14e79663          	bne	a5,a4,2a0 <handle_exception+0x1f4>
}
     158:	00c12083          	lw	ra,12(sp)
     15c:	00812403          	lw	s0,8(sp)
     160:	01010113          	addi	sp,sp,16
     164:	00008067          	ret
	switch(cause){
     168:	00200713          	li	a4,2
     16c:	02e51a63          	bne	a0,a4,1a0 <handle_exception+0xf4>
		if(illegal_instruction_handler){
     170:	0000e797          	auipc	a5,0xe
     174:	6a078793          	addi	a5,a5,1696 # e810 <illegal_instruction_handler>
     178:	0007a783          	lw	a5,0(a5)
     17c:	02078063          	beqz	a5,19c <handle_exception+0xf0>
}
     180:	00812403          	lw	s0,8(sp)
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     184:	0000e717          	auipc	a4,0xe
     188:	68870713          	addi	a4,a4,1672 # e80c <illegal_instruction_context>
}
     18c:	00c12083          	lw	ra,12(sp)
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     190:	00072683          	lw	a3,0(a4)
}
     194:	01010113          	addi	sp,sp,16
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     198:	00078067          	jr	a5
		}else{while(1);}
     19c:	0000006f          	j	19c <handle_exception+0xf0>
		while(1);
     1a0:	0000006f          	j	1a0 <handle_exception+0xf4>
		if(ecall_handler){
     1a4:	0000e797          	auipc	a5,0xe
     1a8:	65c78793          	addi	a5,a5,1628 # e800 <ecall_handler>
     1ac:	0007a783          	lw	a5,0(a5)
     1b0:	02078463          	beqz	a5,1d8 <handle_exception+0x12c>
			ecall_handler(ecall_context);
     1b4:	0000e717          	auipc	a4,0xe
     1b8:	64870713          	addi	a4,a4,1608 # e7fc <ecall_context>
     1bc:	00072503          	lw	a0,0(a4)
     1c0:	000780e7          	jalr	a5
}
     1c4:	00c12083          	lw	ra,12(sp)
			epc+=4;
     1c8:	00440513          	addi	a0,s0,4
}
     1cc:	00812403          	lw	s0,8(sp)
     1d0:	01010113          	addi	sp,sp,16
     1d4:	00008067          	ret
		}else{ while(1); }
     1d8:	0000006f          	j	1d8 <handle_exception+0x12c>
		handle_misaligned_load(*((size_t*)epc), regs);
     1dc:	0005a783          	lw	a5,0(a1)
	csrr(mtval,address);
     1e0:	34302673          	csrr	a2,mtval
	switch((instr >>12) &3){
     1e4:	00c7d713          	srli	a4,a5,0xc
     1e8:	00377713          	andi	a4,a4,3
     1ec:	00100593          	li	a1,1
     1f0:	08b70463          	beq	a4,a1,278 <handle_exception+0x1cc>
		intval=(address[3]<<24) | (address[2] << 16) | (address[1] <<8) | address[0];
     1f4:	00164503          	lbu	a0,1(a2)
     1f8:	00064803          	lbu	a6,0(a2)
     1fc:	00264583          	lbu	a1,2(a2)
     200:	00364703          	lbu	a4,3(a2)
     204:	00851513          	slli	a0,a0,0x8
     208:	01056533          	or	a0,a0,a6
     20c:	01059613          	slli	a2,a1,0x10
     210:	00a66633          	or	a2,a2,a0
     214:	01871713          	slli	a4,a4,0x18
     218:	00c76733          	or	a4,a4,a2
	reg[(instr>>7) & 0x1F] = intval;
     21c:	0057d793          	srli	a5,a5,0x5
}
     220:	00c12083          	lw	ra,12(sp)
		epc+=4;
     224:	00440513          	addi	a0,s0,4
	reg[(instr>>7) & 0x1F] = intval;
     228:	07c7f793          	andi	a5,a5,124
}
     22c:	00812403          	lw	s0,8(sp)
	reg[(instr>>7) & 0x1F] = intval;
     230:	00f686b3          	add	a3,a3,a5
     234:	00e6a023          	sw	a4,0(a3)
}
     238:	01010113          	addi	sp,sp,16
     23c:	00008067          	ret
		if(timer_handler){
     240:	0000e797          	auipc	a5,0xe
     244:	5c878793          	addi	a5,a5,1480 # e808 <timer_handler>
     248:	0007a783          	lw	a5,0(a5)
     24c:	02078463          	beqz	a5,274 <handle_exception+0x1c8>
			timer_handler(timer_context);
     250:	0000e717          	auipc	a4,0xe
     254:	5b470713          	addi	a4,a4,1460 # e804 <timer_context>
     258:	00072503          	lw	a0,0(a4)
     25c:	000780e7          	jalr	a5
}
     260:	00c12083          	lw	ra,12(sp)
	return epc;
     264:	00040513          	mv	a0,s0
}
     268:	00812403          	lw	s0,8(sp)
     26c:	01010113          	addi	sp,sp,16
     270:	00008067          	ret
		}else{ while(1); }
     274:	0000006f          	j	274 <handle_exception+0x1c8>
		intval=(address[1]<<8) | address[0];
     278:	00164703          	lbu	a4,1(a2)
     27c:	00064583          	lbu	a1,0(a2)
		if(!(instr & (1<<14))){//signed
     280:	00004637          	lui	a2,0x4
     284:	00871713          	slli	a4,a4,0x8
     288:	00c7f633          	and	a2,a5,a2
     28c:	00b76733          	or	a4,a4,a1
     290:	f80616e3          	bnez	a2,21c <handle_exception+0x170>
	reg[(instr>>7) & 0x1F] = intval;
     294:	01071713          	slli	a4,a4,0x10
     298:	41075713          	srai	a4,a4,0x10
     29c:	f81ff06f          	j	21c <handle_exception+0x170>
     2a0:	f01ff06f          	j	1a0 <handle_exception+0xf4>

000002a4 <pqcrystals_kyber512_ref_keypair>:
*
* Returns 0 (success)
**************************************************/
int crypto_kem_keypair(uint8_t *pk,
                       uint8_t *sk)
{
     2a4:	ff010113          	addi	sp,sp,-16
     2a8:	00812423          	sw	s0,8(sp)
     2ac:	00912223          	sw	s1,4(sp)
     2b0:	00050413          	mv	s0,a0
     2b4:	00058493          	mv	s1,a1
     2b8:	00112623          	sw	ra,12(sp)
  size_t i;
  indcpa_keypair(pk, sk);
     2bc:	4f8000ef          	jal	ra,7b4 <pqcrystals_kyber512_ref_indcpa_keypair>
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
     2c0:	30048793          	addi	a5,s1,768
     2c4:	0087e733          	or	a4,a5,s0
     2c8:	00377713          	andi	a4,a4,3
     2cc:	06071263          	bnez	a4,330 <pqcrystals_kyber512_ref_keypair+0x8c>
     2d0:	00140713          	addi	a4,s0,1
     2d4:	40e78733          	sub	a4,a5,a4
     2d8:	00373713          	sltiu	a4,a4,3
     2dc:	04071a63          	bnez	a4,330 <pqcrystals_kyber512_ref_keypair+0x8c>
     2e0:	00040713          	mv	a4,s0
     2e4:	32040613          	addi	a2,s0,800
    sk[i+KYBER_INDCPA_SECRETKEYBYTES] = pk[i];
     2e8:	00072683          	lw	a3,0(a4)
     2ec:	00470713          	addi	a4,a4,4
     2f0:	00478793          	addi	a5,a5,4
     2f4:	fed7ae23          	sw	a3,-4(a5)
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
     2f8:	fec718e3          	bne	a4,a2,2e8 <pqcrystals_kyber512_ref_keypair+0x44>
  hash_h(sk+KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
     2fc:	00040593          	mv	a1,s0
     300:	62048513          	addi	a0,s1,1568
     304:	32000613          	li	a2,800
     308:	120050ef          	jal	ra,5428 <pqcrystals_kyber_fips202_ref_sha3_256>
  /* Value z for pseudo-random output on reject */
  randombytes(sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES);
     30c:	64048513          	addi	a0,s1,1600
     310:	02000593          	li	a1,32
     314:	7b4050ef          	jal	ra,5ac8 <randombytes>
  return 0;
}
     318:	00c12083          	lw	ra,12(sp)
     31c:	00812403          	lw	s0,8(sp)
     320:	00412483          	lw	s1,4(sp)
     324:	00000513          	li	a0,0
     328:	01010113          	addi	sp,sp,16
     32c:	00008067          	ret
     330:	00040713          	mv	a4,s0
     334:	32040613          	addi	a2,s0,800
    sk[i+KYBER_INDCPA_SECRETKEYBYTES] = pk[i];
     338:	00074683          	lbu	a3,0(a4)
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
     33c:	00170713          	addi	a4,a4,1
     340:	00178793          	addi	a5,a5,1
    sk[i+KYBER_INDCPA_SECRETKEYBYTES] = pk[i];
     344:	fed78fa3          	sb	a3,-1(a5)
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
     348:	fec718e3          	bne	a4,a2,338 <pqcrystals_kyber512_ref_keypair+0x94>
     34c:	fb1ff06f          	j	2fc <pqcrystals_kyber512_ref_keypair+0x58>

00000350 <pqcrystals_kyber512_ref_enc>:
* Returns 0 (success)
**************************************************/
int crypto_kem_enc(uint8_t *ct,
                   uint8_t *ss,
                   const uint8_t *pk)
{
     350:	f7010113          	addi	sp,sp,-144
     354:	08812423          	sw	s0,136(sp)
     358:	09212023          	sw	s2,128(sp)
     35c:	00050413          	mv	s0,a0
     360:	00058913          	mv	s2,a1
  uint8_t buf[2*KYBER_SYMBYTES] = {0};
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];

  randombytes(buf, KYBER_SYMBYTES);
     364:	00010513          	mv	a0,sp
     368:	02000593          	li	a1,32
{
     36c:	08112623          	sw	ra,140(sp)
     370:	08912223          	sw	s1,132(sp)
  uint8_t buf[2*KYBER_SYMBYTES] = {0};
     374:	00012023          	sw	zero,0(sp)
{
     378:	00060493          	mv	s1,a2
  uint8_t buf[2*KYBER_SYMBYTES] = {0};
     37c:	00012223          	sw	zero,4(sp)
     380:	00012423          	sw	zero,8(sp)
     384:	00012623          	sw	zero,12(sp)
     388:	00012823          	sw	zero,16(sp)
     38c:	00012a23          	sw	zero,20(sp)
     390:	00012c23          	sw	zero,24(sp)
     394:	00012e23          	sw	zero,28(sp)
     398:	02012023          	sw	zero,32(sp)
     39c:	02012223          	sw	zero,36(sp)
     3a0:	02012423          	sw	zero,40(sp)
     3a4:	02012623          	sw	zero,44(sp)
     3a8:	02012823          	sw	zero,48(sp)
     3ac:	02012a23          	sw	zero,52(sp)
     3b0:	02012c23          	sw	zero,56(sp)
     3b4:	02012e23          	sw	zero,60(sp)
  randombytes(buf, KYBER_SYMBYTES);
     3b8:	710050ef          	jal	ra,5ac8 <randombytes>
  /* Don't release system RNG output */
  hash_h(buf, buf, KYBER_SYMBYTES);
     3bc:	00010593          	mv	a1,sp
     3c0:	00010513          	mv	a0,sp
     3c4:	02000613          	li	a2,32
     3c8:	060050ef          	jal	ra,5428 <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Multitarget countermeasure for coins + contributory KEM */
  hash_h(buf+KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
     3cc:	00048593          	mv	a1,s1
     3d0:	02010513          	addi	a0,sp,32
     3d4:	32000613          	li	a2,800
     3d8:	050050ef          	jal	ra,5428 <pqcrystals_kyber_fips202_ref_sha3_256>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
     3dc:	00010593          	mv	a1,sp
     3e0:	04010513          	addi	a0,sp,64
     3e4:	04000613          	li	a2,64
     3e8:	1cc050ef          	jal	ra,55b4 <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(ct, buf, pk, kr+KYBER_SYMBYTES);
     3ec:	06010693          	addi	a3,sp,96
     3f0:	00048613          	mv	a2,s1
     3f4:	00010593          	mv	a1,sp
     3f8:	00040513          	mv	a0,s0
     3fc:	57c000ef          	jal	ra,978 <pqcrystals_kyber512_ref_indcpa_enc>

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
     400:	00040593          	mv	a1,s0
     404:	06010513          	addi	a0,sp,96
     408:	30000613          	li	a2,768
     40c:	01c050ef          	jal	ra,5428 <pqcrystals_kyber_fips202_ref_sha3_256>
  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
     410:	00090513          	mv	a0,s2
     414:	04010613          	addi	a2,sp,64
     418:	04000693          	li	a3,64
     41c:	02000593          	li	a1,32
     420:	63d040ef          	jal	ra,525c <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
}
     424:	08c12083          	lw	ra,140(sp)
     428:	08812403          	lw	s0,136(sp)
     42c:	08412483          	lw	s1,132(sp)
     430:	08012903          	lw	s2,128(sp)
     434:	00000513          	li	a0,0
     438:	09010113          	addi	sp,sp,144
     43c:	00008067          	ret

00000440 <pqcrystals_kyber512_ref_dec>:
* On failure, ss will contain a pseudo-random value.
**************************************************/
int crypto_kem_dec(uint8_t *ss,
                   const uint8_t *ct,
                   const uint8_t *sk)
{
     440:	c7010113          	addi	sp,sp,-912
     444:	39212023          	sw	s2,896(sp)
     448:	00050913          	mv	s2,a0
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];
  uint8_t cmp[KYBER_CIPHERTEXTBYTES];
  const uint8_t *pk = sk+KYBER_INDCPA_SECRETKEYBYTES;

  indcpa_dec(buf, ct, sk);
     44c:	00010513          	mv	a0,sp
{
     450:	38112623          	sw	ra,908(sp)
     454:	38812423          	sw	s0,904(sp)
     458:	38912223          	sw	s1,900(sp)
     45c:	00060413          	mv	s0,a2
     460:	00058493          	mv	s1,a1
  indcpa_dec(buf, ct, sk);
     464:	770000ef          	jal	ra,bd4 <pqcrystals_kyber512_ref_indcpa_dec>

  /* Multitarget countermeasure for coins + contributory KEM */
  for(i=0;i<KYBER_SYMBYTES;i++)
    buf[KYBER_SYMBYTES+i] = sk[KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES+i];
     468:	62040593          	addi	a1,s0,1568
     46c:	02000613          	li	a2,32
     470:	02010513          	addi	a0,sp,32
     474:	749060ef          	jal	ra,73bc <memcpy>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
     478:	00010593          	mv	a1,sp
     47c:	04010513          	addi	a0,sp,64
     480:	04000613          	li	a2,64
     484:	130050ef          	jal	ra,55b4 <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(cmp, buf, pk, kr+KYBER_SYMBYTES);
     488:	06010693          	addi	a3,sp,96
     48c:	30040613          	addi	a2,s0,768
     490:	00010593          	mv	a1,sp
     494:	08010513          	addi	a0,sp,128
     498:	4e0000ef          	jal	ra,978 <pqcrystals_kyber512_ref_indcpa_enc>

  fail = verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
     49c:	08010593          	addi	a1,sp,128
     4a0:	30000613          	li	a2,768
     4a4:	00048513          	mv	a0,s1
     4a8:	005010ef          	jal	ra,1cac <pqcrystals_kyber512_ref_verify>
     4ac:	00050693          	mv	a3,a0

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
     4b0:	00048593          	mv	a1,s1
     4b4:	06010513          	addi	a0,sp,96
     4b8:	30000613          	li	a2,768
  fail = verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
     4bc:	00068493          	mv	s1,a3
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
     4c0:	769040ef          	jal	ra,5428 <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Overwrite pre-k with z on re-encryption failure */
  cmov(kr, sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES, fail);
     4c4:	0ff4f693          	zext.b	a3,s1
     4c8:	64040593          	addi	a1,s0,1600
     4cc:	04010513          	addi	a0,sp,64
     4d0:	02000613          	li	a2,32
     4d4:	0e1010ef          	jal	ra,1db4 <pqcrystals_kyber512_ref_cmov>

  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
     4d8:	00090513          	mv	a0,s2
     4dc:	04010613          	addi	a2,sp,64
     4e0:	04000693          	li	a3,64
     4e4:	02000593          	li	a1,32
     4e8:	575040ef          	jal	ra,525c <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
}
     4ec:	38c12083          	lw	ra,908(sp)
     4f0:	38812403          	lw	s0,904(sp)
     4f4:	38412483          	lw	s1,900(sp)
     4f8:	38012903          	lw	s2,896(sp)
     4fc:	00000513          	li	a0,0
     500:	39010113          	addi	sp,sp,912
     504:	00008067          	ret

00000508 <pqcrystals_kyber512_ref_gen_matrix>:
*              - int transposed: boolean deciding whether A or A^T is generated
**************************************************/
#define GEN_MATRIX_NBLOCKS ((12*KYBER_N/8*(1 << 12)/KYBER_Q + XOF_BLOCKBYTES)/XOF_BLOCKBYTES)
// Not static for benchmarking
void gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed)
{
     508:	cd010113          	addi	sp,sp,-816
     50c:	32812423          	sw	s0,808(sp)
     510:	31312e23          	sw	s3,796(sp)
     514:	31512a23          	sw	s5,788(sp)
     518:	0f410413          	addi	s0,sp,244
  unsigned int ctr, i, j, k;
  unsigned int buflen, off;
  uint8_t buf[GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES+2];
  xof_state state;

  for(i=0;i<KYBER_K;i++) {
     51c:	00000a93          	li	s5,0
      if(transposed)
        xof_absorb(&state, seed, i, j);
      else
        xof_absorb(&state, seed, j, i);

      xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
     520:	00300993          	li	s3,3
    if(val0 < KYBER_Q)
     524:	000017b7          	lui	a5,0x1
{
     528:	31412c23          	sw	s4,792(sp)
     52c:	31612823          	sw	s6,784(sp)
     530:	31a12023          	sw	s10,768(sp)
     534:	2fb12e23          	sw	s11,764(sp)
     538:	000a8b13          	mv	s6,s5
     53c:	32112623          	sw	ra,812(sp)
     540:	32912223          	sw	s1,804(sp)
     544:	33212023          	sw	s2,800(sp)
     548:	31712623          	sw	s7,780(sp)
     54c:	31812423          	sw	s8,776(sp)
     550:	31912223          	sw	s9,772(sp)
     554:	00a12e23          	sw	a0,28(sp)
     558:	00c12a23          	sw	a2,20(sp)
     55c:	2ec10a13          	addi	s4,sp,748
    if(val0 < KYBER_Q)
     560:	d0078d13          	addi	s10,a5,-768 # d00 <pqcrystals_kyber512_ref_polyvec_compress+0x48>
  while(ctr < len && pos + 3 <= buflen) {
     564:	40898db3          	sub	s11,s3,s0
     568:	00058a93          	mv	s5,a1
    for(j=0;j<KYBER_K;j++) {
     56c:	01c12783          	lw	a5,28(sp)
     570:	00ab1b93          	slli	s7,s6,0xa
     574:	0ffb7713          	zext.b	a4,s6
     578:	017787b3          	add	a5,a5,s7
     57c:	00f12623          	sw	a5,12(sp)
     580:	00000793          	li	a5,0
     584:	00078c93          	mv	s9,a5
      if(transposed)
     588:	01412783          	lw	a5,20(sp)
     58c:	00e12823          	sw	a4,16(sp)
     590:	01612423          	sw	s6,8(sp)
     594:	00001737          	lui	a4,0x1
     598:	fff70913          	addi	s2,a4,-1 # fff <pqcrystals_kyber512_ref_polyvec_add+0x27>
    if(ctr < len && val1 < KYBER_Q)
     59c:	10000493          	li	s1,256
     5a0:	0ffcf613          	zext.b	a2,s9
      if(transposed)
     5a4:	08078463          	beqz	a5,62c <pqcrystals_kyber512_ref_gen_matrix+0x124>
        xof_absorb(&state, seed, i, j);
     5a8:	00060693          	mv	a3,a2
     5ac:	01012603          	lw	a2,16(sp)
     5b0:	000a8593          	mv	a1,s5
     5b4:	02010513          	addi	a0,sp,32
     5b8:	44c050ef          	jal	ra,5a04 <pqcrystals_kyber512_ref_kyber_shake128_absorb>
      xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
     5bc:	02010613          	addi	a2,sp,32
     5c0:	00300593          	li	a1,3
     5c4:	00040513          	mv	a0,s0
     5c8:	714040ef          	jal	ra,4cdc <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
      buflen = GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES;
      ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
     5cc:	00c12783          	lw	a5,12(sp)
     5d0:	009c9e93          	slli	t4,s9,0x9
     5d4:	00040613          	mv	a2,s0
     5d8:	00fe8b33          	add	s6,t4,a5
  ctr = pos = 0;
     5dc:	00000b93          	li	s7,0
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
     5e0:	00164683          	lbu	a3,1(a2) # 4001 <KeccakF1600_StatePermute+0x1e11>
     5e4:	00064583          	lbu	a1,0(a2)
      r[ctr++] = val0;
     5e8:	001b9713          	slli	a4,s7,0x1
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
     5ec:	00869793          	slli	a5,a3,0x8
     5f0:	00b7e7b3          	or	a5,a5,a1
     5f4:	0127f7b3          	and	a5,a5,s2
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
     5f8:	00264583          	lbu	a1,2(a2)
     5fc:	0046d693          	srli	a3,a3,0x4
      r[ctr++] = val0;
     600:	00eb0733          	add	a4,s6,a4
     604:	001b8513          	addi	a0,s7,1
  while(ctr < len && pos + 3 <= buflen) {
     608:	00360613          	addi	a2,a2,3
    if(val0 < KYBER_Q)
     60c:	02fd4c63          	blt	s10,a5,644 <pqcrystals_kyber512_ref_gen_matrix+0x13c>
      r[ctr++] = val0;
     610:	00f71023          	sh	a5,0(a4)
    if(ctr < len && val1 < KYBER_Q)
     614:	02951663          	bne	a0,s1,640 <pqcrystals_kyber512_ref_gen_matrix+0x138>
    for(j=0;j<KYBER_K;j++) {
     618:	120c9063          	bnez	s9,738 <pqcrystals_kyber512_ref_gen_matrix+0x230>
      if(transposed)
     61c:	01412783          	lw	a5,20(sp)
    for(j=0;j<KYBER_K;j++) {
     620:	00100c93          	li	s9,1
      if(transposed)
     624:	0ffcf613          	zext.b	a2,s9
     628:	f80790e3          	bnez	a5,5a8 <pqcrystals_kyber512_ref_gen_matrix+0xa0>
        xof_absorb(&state, seed, j, i);
     62c:	01012683          	lw	a3,16(sp)
     630:	000a8593          	mv	a1,s5
     634:	02010513          	addi	a0,sp,32
     638:	3cc050ef          	jal	ra,5a04 <pqcrystals_kyber512_ref_kyber_shake128_absorb>
     63c:	f81ff06f          	j	5bc <pqcrystals_kyber512_ref_gen_matrix+0xb4>
     640:	00050b93          	mv	s7,a0
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
     644:	00459593          	slli	a1,a1,0x4
      r[ctr++] = val1;
     648:	001b9793          	slli	a5,s7,0x1
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
     64c:	00d5e5b3          	or	a1,a1,a3
      r[ctr++] = val1;
     650:	00fb07b3          	add	a5,s6,a5
     654:	001b8713          	addi	a4,s7,1
    if(ctr < len && val1 < KYBER_Q)
     658:	00bd4863          	blt	s10,a1,668 <pqcrystals_kyber512_ref_gen_matrix+0x160>
      r[ctr++] = val1;
     65c:	00b79023          	sh	a1,0(a5)
  while(ctr < len && pos + 3 <= buflen) {
     660:	fa970ce3          	beq	a4,s1,618 <pqcrystals_kyber512_ref_gen_matrix+0x110>
      r[ctr++] = val1;
     664:	00070b93          	mv	s7,a4
  while(ctr < len && pos + 3 <= buflen) {
     668:	f6ca1ce3          	bne	s4,a2,5e0 <pqcrystals_kyber512_ref_gen_matrix+0xd8>
     66c:	000017b7          	lui	a5,0x1
     670:	1f800e13          	li	t3,504
     674:	fff78c13          	addi	s8,a5,-1 # fff <pqcrystals_kyber512_ref_polyvec_add+0x27>
     678:	01512c23          	sw	s5,24(sp)

      while(ctr < KYBER_N) {
        off = buflen % 3;
     67c:	033e7ab3          	remu	s5,t3,s3
        for(k = 0; k < off; k++)
     680:	020a8663          	beqz	s5,6ac <pqcrystals_kyber512_ref_gen_matrix+0x1a4>
          buf[k] = buf[buflen - off + k];
     684:	415e0e33          	sub	t3,t3,s5
     688:	2d0e0793          	addi	a5,t3,720
     68c:	02010713          	addi	a4,sp,32
     690:	00e78e33          	add	t3,a5,a4
     694:	e04e4703          	lbu	a4,-508(t3)
        for(k = 0; k < off; k++)
     698:	00200793          	li	a5,2
          buf[k] = buf[buflen - off + k];
     69c:	0ee10a23          	sb	a4,244(sp)
        for(k = 0; k < off; k++)
     6a0:	00fa9663          	bne	s5,a5,6ac <pqcrystals_kyber512_ref_gen_matrix+0x1a4>
          buf[k] = buf[buflen - off + k];
     6a4:	e05e4703          	lbu	a4,-507(t3)
     6a8:	0ee10aa3          	sb	a4,245(sp)
        xof_squeezeblocks(buf + off, 1, &state);
     6ac:	01540533          	add	a0,s0,s5
     6b0:	02010613          	addi	a2,sp,32
     6b4:	00100593          	li	a1,1
     6b8:	624040ef          	jal	ra,4cdc <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
        buflen = off + XOF_BLOCKBYTES;
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
     6bc:	001b9813          	slli	a6,s7,0x1
        buflen = off + XOF_BLOCKBYTES;
     6c0:	0a8a8e13          	addi	t3,s5,168
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
     6c4:	010b0833          	add	a6,s6,a6
     6c8:	417488b3          	sub	a7,s1,s7
     6cc:	00040693          	mv	a3,s0
  ctr = pos = 0;
     6d0:	00000513          	li	a0,0
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
     6d4:	0016c703          	lbu	a4,1(a3)
     6d8:	0006c603          	lbu	a2,0(a3)
      r[ctr++] = val0;
     6dc:	00151593          	slli	a1,a0,0x1
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
     6e0:	00871793          	slli	a5,a4,0x8
     6e4:	00c7e7b3          	or	a5,a5,a2
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
     6e8:	00475613          	srli	a2,a4,0x4
     6ec:	0026c703          	lbu	a4,2(a3)
     6f0:	0187f7b3          	and	a5,a5,s8
     6f4:	01079793          	slli	a5,a5,0x10
  while(ctr < len && pos + 3 <= buflen) {
     6f8:	00368693          	addi	a3,a3,3
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
     6fc:	00471713          	slli	a4,a4,0x4
     700:	4107d793          	srai	a5,a5,0x10
      r[ctr++] = val0;
     704:	00b80333          	add	t1,a6,a1
  while(ctr < len && pos + 3 <= buflen) {
     708:	00dd8eb3          	add	t4,s11,a3
     70c:	00050593          	mv	a1,a0
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
     710:	00c76733          	or	a4,a4,a2
    if(val0 < KYBER_Q)
     714:	00fd4663          	blt	s10,a5,720 <pqcrystals_kyber512_ref_gen_matrix+0x218>
      r[ctr++] = val0;
     718:	00f31023          	sh	a5,0(t1)
     71c:	00150593          	addi	a1,a0,1
    if(ctr < len && val1 < KYBER_Q)
     720:	0315e463          	bltu	a1,a7,748 <pqcrystals_kyber512_ref_gen_matrix+0x240>
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
     724:	00bb8bb3          	add	s7,s7,a1
      while(ctr < KYBER_N) {
     728:	0ff00793          	li	a5,255
     72c:	f577f8e3          	bgeu	a5,s7,67c <pqcrystals_kyber512_ref_gen_matrix+0x174>
     730:	01812a83          	lw	s5,24(sp)
    for(j=0;j<KYBER_K;j++) {
     734:	ee0c84e3          	beqz	s9,61c <pqcrystals_kyber512_ref_gen_matrix+0x114>
     738:	00812b03          	lw	s6,8(sp)
  for(i=0;i<KYBER_K;i++) {
     73c:	020b1e63          	bnez	s6,778 <pqcrystals_kyber512_ref_gen_matrix+0x270>
     740:	000c8b13          	mv	s6,s9
     744:	e29ff06f          	j	56c <pqcrystals_kyber512_ref_gen_matrix+0x64>
      r[ctr++] = val1;
     748:	00159793          	slli	a5,a1,0x1
     74c:	00f807b3          	add	a5,a6,a5
     750:	00158513          	addi	a0,a1,1
    if(ctr < len && val1 < KYBER_Q)
     754:	00ed5a63          	bge	s10,a4,768 <pqcrystals_kyber512_ref_gen_matrix+0x260>
     758:	00058513          	mv	a0,a1
  while(ctr < len && pos + 3 <= buflen) {
     75c:	f7de7ce3          	bgeu	t3,t4,6d4 <pqcrystals_kyber512_ref_gen_matrix+0x1cc>
      r[ctr++] = val1;
     760:	00050593          	mv	a1,a0
     764:	fc1ff06f          	j	724 <pqcrystals_kyber512_ref_gen_matrix+0x21c>
     768:	00e79023          	sh	a4,0(a5)
  while(ctr < len && pos + 3 <= buflen) {
     76c:	ff157ae3          	bgeu	a0,a7,760 <pqcrystals_kyber512_ref_gen_matrix+0x258>
     770:	f7de72e3          	bgeu	t3,t4,6d4 <pqcrystals_kyber512_ref_gen_matrix+0x1cc>
     774:	fedff06f          	j	760 <pqcrystals_kyber512_ref_gen_matrix+0x258>
      }
    }
  }
}
     778:	32c12083          	lw	ra,812(sp)
     77c:	32812403          	lw	s0,808(sp)
     780:	32412483          	lw	s1,804(sp)
     784:	32012903          	lw	s2,800(sp)
     788:	31c12983          	lw	s3,796(sp)
     78c:	31812a03          	lw	s4,792(sp)
     790:	31412a83          	lw	s5,788(sp)
     794:	31012b03          	lw	s6,784(sp)
     798:	30c12b83          	lw	s7,780(sp)
     79c:	30812c03          	lw	s8,776(sp)
     7a0:	30412c83          	lw	s9,772(sp)
     7a4:	30012d03          	lw	s10,768(sp)
     7a8:	2fc12d83          	lw	s11,764(sp)
     7ac:	33010113          	addi	sp,sp,816
     7b0:	00008067          	ret

000007b4 <pqcrystals_kyber512_ref_indcpa_keypair>:
*              - uint8_t *sk: pointer to output private key
                              (of length KYBER_INDCPA_SECRETKEYBYTES bytes)
**************************************************/
void indcpa_keypair(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                    uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
     7b4:	ba010113          	addi	sp,sp,-1120
     7b8:	44812c23          	sw	s0,1112(sp)
     7bc:	45212823          	sw	s2,1104(sp)
  unsigned int i;
  uint8_t buf[2*KYBER_SYMBYTES] = {0};
     7c0:	fffff437          	lui	s0,0xfffff
#ifdef PROFILING_MAC
  register uint32_t cycle_start asm("s4");
  register uint32_t cycle_end asm("s3");
#endif

  randombytes(buf, KYBER_SYMBYTES);
     7c4:	00001937          	lui	s2,0x1
{
     7c8:	fffff2b7          	lui	t0,0xfffff
     7cc:	44912a23          	sw	s1,1108(sp)
  randombytes(buf, KYBER_SYMBYTES);
     7d0:	44090793          	addi	a5,s2,1088 # 1440 <pqcrystals_kyber512_ref_poly_tomsg+0xb0>
     7d4:	bc040493          	addi	s1,s0,-1088 # ffffebc0 <_end_of_memory+0xfffdebc0>
{
     7d8:	44112e23          	sw	ra,1116(sp)
     7dc:	45312623          	sw	s3,1100(sp)
     7e0:	45412423          	sw	s4,1096(sp)
     7e4:	45512223          	sw	s5,1092(sp)
     7e8:	45612023          	sw	s6,1088(sp)
  randombytes(buf, KYBER_SYMBYTES);
     7ec:	009787b3          	add	a5,a5,s1
{
     7f0:	00510133          	add	sp,sp,t0
  randombytes(buf, KYBER_SYMBYTES);
     7f4:	002784b3          	add	s1,a5,sp
{
     7f8:	00050993          	mv	s3,a0
     7fc:	00058a93          	mv	s5,a1
  randombytes(buf, KYBER_SYMBYTES);
     800:	00048513          	mv	a0,s1
     804:	02000593          	li	a1,32
  uint8_t buf[2*KYBER_SYMBYTES] = {0};
     808:	00012023          	sw	zero,0(sp)
     80c:	00012223          	sw	zero,4(sp)
     810:	00012423          	sw	zero,8(sp)
     814:	00012623          	sw	zero,12(sp)
     818:	00012823          	sw	zero,16(sp)
     81c:	00012a23          	sw	zero,20(sp)
     820:	00012c23          	sw	zero,24(sp)
     824:	00012e23          	sw	zero,28(sp)
     828:	02012023          	sw	zero,32(sp)
     82c:	02012223          	sw	zero,36(sp)
     830:	02012423          	sw	zero,40(sp)
     834:	02012623          	sw	zero,44(sp)
     838:	02012823          	sw	zero,48(sp)
     83c:	02012a23          	sw	zero,52(sp)
     840:	02012c23          	sw	zero,56(sp)
     844:	02012e23          	sw	zero,60(sp)
  randombytes(buf, KYBER_SYMBYTES);
     848:	280050ef          	jal	ra,5ac8 <randombytes>
  hash_g(buf, buf, KYBER_SYMBYTES);
     84c:	00048593          	mv	a1,s1
     850:	00048513          	mv	a0,s1
     854:	02000613          	li	a2,32
     858:	55d040ef          	jal	ra,55b4 <pqcrystals_kyber_fips202_ref_sha3_512>

  gen_a(a, publicseed);
     85c:	c4090513          	addi	a0,s2,-960
     860:	00048593          	mv	a1,s1
     864:	00250533          	add	a0,a0,sp
     868:	00000613          	li	a2,0
     86c:	c9dff0ef          	jal	ra,508 <pqcrystals_kyber512_ref_gen_matrix>
     870:	00090b13          	mv	s6,s2

  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
     874:	440b0793          	addi	a5,s6,1088
     878:	40040913          	addi	s2,s0,1024
     87c:	012787b3          	add	a5,a5,s2
     880:	00278933          	add	s2,a5,sp
     884:	02048a13          	addi	s4,s1,32
     888:	000a0593          	mv	a1,s4
     88c:	00090513          	mv	a0,s2
     890:	00000613          	li	a2,0
     894:	4b5000ef          	jal	ra,1548 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
     898:	000a0593          	mv	a1,s4
     89c:	20090513          	addi	a0,s2,512
     8a0:	00100613          	li	a2,1
     8a4:	4a5000ef          	jal	ra,1548 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
     8a8:	c0040413          	addi	s0,s0,-1024
     8ac:	440b0793          	addi	a5,s6,1088
     8b0:	008787b3          	add	a5,a5,s0
     8b4:	00278433          	add	s0,a5,sp
     8b8:	000a0593          	mv	a1,s4
     8bc:	00040513          	mv	a0,s0
     8c0:	00200613          	li	a2,2
     8c4:	485000ef          	jal	ra,1548 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
     8c8:	000a0593          	mv	a1,s4
     8cc:	00300613          	li	a2,3
     8d0:	20040513          	addi	a0,s0,512
     8d4:	475000ef          	jal	ra,1548 <pqcrystals_kyber512_ref_poly_getnoise_eta1>

  polyvec_ntt(&skpv);
     8d8:	00090513          	mv	a0,s2
     8dc:	628000ef          	jal	ra,f04 <pqcrystals_kyber512_ref_polyvec_ntt>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  polyvec_ntt(&e);
     8e0:	00040513          	mv	a0,s0
     8e4:	620000ef          	jal	ra,f04 <pqcrystals_kyber512_ref_polyvec_ntt>
  for(i=0;i<KYBER_K;i++) {
#ifdef PROFILING_MAC
    uart_send_string("\n\rMAC polyvec_basemul");
    asm("csrrs s4, "TICKS_REGISTER", zero");
#endif
    polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
     8e8:	c40b0593          	addi	a1,s6,-960
     8ec:	00090613          	mv	a2,s2
     8f0:	002585b3          	add	a1,a1,sp
     8f4:	44010513          	addi	a0,sp,1088
     8f8:	65c000ef          	jal	ra,f54 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
     8fc:	040b0793          	addi	a5,s6,64
     900:	00f105b3          	add	a1,sp,a5
     904:	00090613          	mv	a2,s2
     908:	64010513          	addi	a0,sp,1600
     90c:	648000ef          	jal	ra,f54 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  polyvec_add(&pkpv, &pkpv, &e);
     910:	44010593          	addi	a1,sp,1088
     914:	00040613          	mv	a2,s0
     918:	00058513          	mv	a0,a1
     91c:	6bc000ef          	jal	ra,fd8 <pqcrystals_kyber512_ref_polyvec_add>
  polyvec_tobytes(r, sk);
     920:	00090593          	mv	a1,s2
     924:	000a8513          	mv	a0,s5
     928:	56c000ef          	jal	ra,e94 <pqcrystals_kyber512_ref_polyvec_tobytes>
  polyvec_tobytes(r, pk);
     92c:	44010593          	addi	a1,sp,1088
     930:	00098513          	mv	a0,s3
     934:	560000ef          	jal	ra,e94 <pqcrystals_kyber512_ref_polyvec_tobytes>
    r[i+KYBER_POLYVECBYTES] = seed[i];
     938:	00048593          	mv	a1,s1
     93c:	30098513          	addi	a0,s3,768
     940:	02000613          	li	a2,32
     944:	279060ef          	jal	ra,73bc <memcpy>
  }
#endif

  pack_sk(sk, &skpv);
  pack_pk(pk, &pkpv, publicseed);
}
     948:	000012b7          	lui	t0,0x1
     94c:	00510133          	add	sp,sp,t0
     950:	45c12083          	lw	ra,1116(sp)
     954:	45812403          	lw	s0,1112(sp)
     958:	45412483          	lw	s1,1108(sp)
     95c:	45012903          	lw	s2,1104(sp)
     960:	44c12983          	lw	s3,1100(sp)
     964:	44812a03          	lw	s4,1096(sp)
     968:	44412a83          	lw	s5,1092(sp)
     96c:	44012b03          	lw	s6,1088(sp)
     970:	46010113          	addi	sp,sp,1120
     974:	00008067          	ret

00000978 <pqcrystals_kyber512_ref_indcpa_enc>:
**************************************************/
void indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                const uint8_t coins[KYBER_SYMBYTES])
{
     978:	81010113          	addi	sp,sp,-2032
     97c:	7e912223          	sw	s1,2020(sp)
     980:	7d812423          	sw	s8,1992(sp)
     984:	fffff2b7          	lui	t0,0xfffff
  polyvec_frombytes(pk, packedpk);
     988:	00002c37          	lui	s8,0x2
     98c:	fffff4b7          	lui	s1,0xfffff
{
     990:	9a028293          	addi	t0,t0,-1632 # ffffe9a0 <_end_of_memory+0xfffde9a0>
     994:	7d712623          	sw	s7,1996(sp)
  polyvec_frombytes(pk, packedpk);
     998:	e20c0793          	addi	a5,s8,-480 # 1e20 <pqcrystals_kyber512_ref_cmov+0x6c>
     99c:	c0048b93          	addi	s7,s1,-1024 # ffffec00 <_end_of_memory+0xfffdec00>
{
     9a0:	7e112623          	sw	ra,2028(sp)
     9a4:	7e812423          	sw	s0,2024(sp)
     9a8:	7f212023          	sw	s2,2016(sp)
     9ac:	7d312e23          	sw	s3,2012(sp)
     9b0:	7d412c23          	sw	s4,2008(sp)
     9b4:	7d512a23          	sw	s5,2004(sp)
     9b8:	7d612823          	sw	s6,2000(sp)
     9bc:	7d912223          	sw	s9,1988(sp)
  polyvec_frombytes(pk, packedpk);
     9c0:	017787b3          	add	a5,a5,s7
{
     9c4:	00510133          	add	sp,sp,t0
  polyvec_frombytes(pk, packedpk);
     9c8:	00278bb3          	add	s7,a5,sp
{
     9cc:	00050a13          	mv	s4,a0
     9d0:	00058b13          	mv	s6,a1
  polyvec_frombytes(pk, packedpk);
     9d4:	000b8513          	mv	a0,s7
     9d8:	00060593          	mv	a1,a2
{
     9dc:	00068993          	mv	s3,a3
     9e0:	00060913          	mv	s2,a2
  unsigned int i;
  uint8_t seed[KYBER_SYMBYTES] = {0};
     9e4:	00012023          	sw	zero,0(sp)
     9e8:	00012223          	sw	zero,4(sp)
     9ec:	00012423          	sw	zero,8(sp)
     9f0:	00012623          	sw	zero,12(sp)
     9f4:	00012823          	sw	zero,16(sp)
     9f8:	00012a23          	sw	zero,20(sp)
     9fc:	00012c23          	sw	zero,24(sp)
     a00:	00012e23          	sw	zero,28(sp)
  polyvec_frombytes(pk, packedpk);
     a04:	4c8000ef          	jal	ra,ecc <pqcrystals_kyber512_ref_polyvec_frombytes>
    seed[i] = packedpk[i+KYBER_POLYVECBYTES];
     a08:	02000613          	li	a2,32
     a0c:	30090593          	addi	a1,s2,768
     a10:	00010513          	mv	a0,sp
     a14:	1a9060ef          	jal	ra,73bc <memcpy>
  uint8_t seed[KYBER_SYMBYTES] = {0};
     a18:	ffffe437          	lui	s0,0xffffe
  register uint32_t cycle_start asm("s4");
  register uint32_t cycle_end asm("s3");
#endif

  unpack_pk(&pkpv, seed, pk);
  poly_frommsg(&k, m);
     a1c:	40040a93          	addi	s5,s0,1024 # ffffe400 <_end_of_memory+0xfffde400>
     a20:	e20c0793          	addi	a5,s8,-480
     a24:	015787b3          	add	a5,a5,s5
     a28:	00278ab3          	add	s5,a5,sp
     a2c:	000b0593          	mv	a1,s6
     a30:	000a8513          	mv	a0,s5
     a34:	0a9000ef          	jal	ra,12dc <pqcrystals_kyber512_ref_poly_frommsg>
  gen_at(at, seed);
     a38:	00001cb7          	lui	s9,0x1
     a3c:	1e040593          	addi	a1,s0,480
     a40:	e20c0793          	addi	a5,s8,-480
     a44:	00b787b3          	add	a5,a5,a1
     a48:	620c8513          	addi	a0,s9,1568 # 1620 <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x50>
     a4c:	002785b3          	add	a1,a5,sp
     a50:	00250533          	add	a0,a0,sp
     a54:	00100613          	li	a2,1
     a58:	ab1ff0ef          	jal	ra,508 <pqcrystals_kyber512_ref_gen_matrix>

  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta1(sp.vec+i, coins, nonce++);
     a5c:	80048913          	addi	s2,s1,-2048
     a60:	e20c0793          	addi	a5,s8,-480
     a64:	012787b3          	add	a5,a5,s2
     a68:	00278933          	add	s2,a5,sp
     a6c:	00098593          	mv	a1,s3
     a70:	00090513          	mv	a0,s2
     a74:	00000613          	li	a2,0
     a78:	2d1000ef          	jal	ra,1548 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
     a7c:	00098593          	mv	a1,s3
     a80:	20090513          	addi	a0,s2,512
     a84:	00100613          	li	a2,1
     a88:	2c1000ef          	jal	ra,1548 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
    poly_getnoise_eta2(ep.vec+i, coins, nonce++);
     a8c:	e20c8513          	addi	a0,s9,-480
     a90:	00098593          	mv	a1,s3
     a94:	00250533          	add	a0,a0,sp
     a98:	00200613          	li	a2,2
     a9c:	2ed000ef          	jal	ra,1588 <pqcrystals_kyber512_ref_poly_getnoise_eta2>
     aa0:	e20c8793          	addi	a5,s9,-480
     aa4:	002787b3          	add	a5,a5,sp
     aa8:	00098593          	mv	a1,s3
     aac:	20078513          	addi	a0,a5,512
     ab0:	00300613          	li	a2,3
     ab4:	2d5000ef          	jal	ra,1588 <pqcrystals_kyber512_ref_poly_getnoise_eta2>
  poly_getnoise_eta2(&epp, coins, nonce++);
     ab8:	60040b13          	addi	s6,s0,1536
     abc:	e20c0793          	addi	a5,s8,-480
     ac0:	016787b3          	add	a5,a5,s6
     ac4:	00278b33          	add	s6,a5,sp
     ac8:	00098593          	mv	a1,s3
     acc:	00400613          	li	a2,4
     ad0:	000b0513          	mv	a0,s6
     ad4:	2b5000ef          	jal	ra,1588 <pqcrystals_kyber512_ref_poly_getnoise_eta2>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  polyvec_ntt(&sp);
     ad8:	00090513          	mv	a0,s2
     adc:	428000ef          	jal	ra,f04 <pqcrystals_kyber512_ref_polyvec_ntt>
  }
#endif

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++)
    polyvec_basemul_acc_montgomery(&b.vec[i], &at[i], &sp);
     ae0:	40048493          	addi	s1,s1,1024
     ae4:	e20c0793          	addi	a5,s8,-480
     ae8:	009787b3          	add	a5,a5,s1
     aec:	002784b3          	add	s1,a5,sp
     af0:	620c8593          	addi	a1,s9,1568
     af4:	002585b3          	add	a1,a1,sp
     af8:	00048513          	mv	a0,s1
     afc:	00090613          	mv	a2,s2
     b00:	454000ef          	jal	ra,f54 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
     b04:	a20c0793          	addi	a5,s8,-1504
     b08:	00f105b3          	add	a1,sp,a5
     b0c:	00090613          	mv	a2,s2
     b10:	20048513          	addi	a0,s1,512
     b14:	440000ef          	jal	ra,f54 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>

  polyvec_basemul_acc_montgomery(&v, &pkpv, &sp);
     b18:	20040413          	addi	s0,s0,512
     b1c:	e20c0793          	addi	a5,s8,-480
     b20:	008787b3          	add	a5,a5,s0
     b24:	00278433          	add	s0,a5,sp
     b28:	00090613          	mv	a2,s2
     b2c:	000b8593          	mv	a1,s7
     b30:	00040513          	mv	a0,s0
     b34:	420000ef          	jal	ra,f54 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  polyvec_invntt_tomont(&b);
     b38:	00048513          	mv	a0,s1
     b3c:	3f0000ef          	jal	ra,f2c <pqcrystals_kyber512_ref_polyvec_invntt_tomont>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  poly_invntt_tomont(&v);
     b40:	00040513          	mv	a0,s0
     b44:	289000ef          	jal	ra,15cc <pqcrystals_kyber512_ref_poly_invntt_tomont>

  polyvec_add(&b, &b, &ep);
     b48:	e20c8613          	addi	a2,s9,-480
     b4c:	00260633          	add	a2,a2,sp
     b50:	00048593          	mv	a1,s1
     b54:	00048513          	mv	a0,s1
     b58:	480000ef          	jal	ra,fd8 <pqcrystals_kyber512_ref_polyvec_add>
  poly_add(&v, &v, &epp);
     b5c:	000b0613          	mv	a2,s6
     b60:	00040593          	mv	a1,s0
     b64:	00040513          	mv	a0,s0
     b68:	3a1000ef          	jal	ra,1708 <pqcrystals_kyber512_ref_poly_add>

#ifdef PROFILING_ADD_SUB
    uart_send_string("\n\rADD poly_add");
    asm("csrrs s4, "TICKS_REGISTER", zero");
#endif
  poly_add(&v, &v, &k);
     b6c:	000a8613          	mv	a2,s5
     b70:	00040593          	mv	a1,s0
     b74:	00040513          	mv	a0,s0
     b78:	391000ef          	jal	ra,1708 <pqcrystals_kyber512_ref_poly_add>
  polyvec_compress(r, b);
     b7c:	00048593          	mv	a1,s1
     b80:	000a0513          	mv	a0,s4
     b84:	134000ef          	jal	ra,cb8 <pqcrystals_kyber512_ref_polyvec_compress>
  poly_compress(r+KYBER_POLYVECCOMPRESSEDBYTES, v);
     b88:	00040593          	mv	a1,s0
     b8c:	280a0513          	addi	a0,s4,640
     b90:	490000ef          	jal	ra,1020 <pqcrystals_kyber512_ref_poly_compress>
    uart_send_string(str);
  }
#endif

  pack_ciphertext(c, &b, &v);
}
     b94:	000012b7          	lui	t0,0x1
     b98:	66028293          	addi	t0,t0,1632 # 1660 <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x90>
     b9c:	00510133          	add	sp,sp,t0
     ba0:	7ec12083          	lw	ra,2028(sp)
     ba4:	7e812403          	lw	s0,2024(sp)
     ba8:	7e412483          	lw	s1,2020(sp)
     bac:	7e012903          	lw	s2,2016(sp)
     bb0:	7dc12983          	lw	s3,2012(sp)
     bb4:	7d812a03          	lw	s4,2008(sp)
     bb8:	7d412a83          	lw	s5,2004(sp)
     bbc:	7d012b03          	lw	s6,2000(sp)
     bc0:	7cc12b83          	lw	s7,1996(sp)
     bc4:	7c812c03          	lw	s8,1992(sp)
     bc8:	7c412c83          	lw	s9,1988(sp)
     bcc:	7f010113          	addi	sp,sp,2032
     bd0:	00008067          	ret

00000bd4 <pqcrystals_kyber512_ref_indcpa_dec>:
*                                   (of length KYBER_INDCPA_SECRETKEYBYTES)
**************************************************/
void indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
     bd4:	81010113          	addi	sp,sp,-2032
     bd8:	7e112623          	sw	ra,2028(sp)
     bdc:	7e812423          	sw	s0,2024(sp)
     be0:	7e912223          	sw	s1,2020(sp)
     be4:	7f212023          	sw	s2,2016(sp)
     be8:	7d312e23          	sw	s3,2012(sp)
     bec:	7d412c23          	sw	s4,2008(sp)
     bf0:	7d512a23          	sw	s5,2004(sp)
     bf4:	bd010113          	addi	sp,sp,-1072
     bf8:	00050913          	mv	s2,a0
  polyvec_decompress(b, c);
     bfc:	40010513          	addi	a0,sp,1024
{
     c00:	00060993          	mv	s3,a2
  poly_decompress(v, c+KYBER_POLYVECCOMPRESSEDBYTES);
     c04:	00001ab7          	lui	s5,0x1
{
     c08:	00058a13          	mv	s4,a1
  poly_decompress(v, c+KYBER_POLYVECCOMPRESSEDBYTES);
     c0c:	fffff437          	lui	s0,0xfffff
  polyvec_decompress(b, c);
     c10:	1c0000ef          	jal	ra,dd0 <pqcrystals_kyber512_ref_polyvec_decompress>
  poly_decompress(v, c+KYBER_POLYVECCOMPRESSEDBYTES);
     c14:	40040493          	addi	s1,s0,1024 # fffff400 <_end_of_memory+0xfffdf400>
     c18:	c00a8793          	addi	a5,s5,-1024 # c00 <pqcrystals_kyber512_ref_indcpa_dec+0x2c>
     c1c:	009787b3          	add	a5,a5,s1
     c20:	002784b3          	add	s1,a5,sp
     c24:	280a0593          	addi	a1,s4,640
     c28:	00048513          	mv	a0,s1
     c2c:	5b0000ef          	jal	ra,11dc <pqcrystals_kyber512_ref_poly_decompress>
  polyvec_frombytes(sk, packedsk);
     c30:	800a8513          	addi	a0,s5,-2048
     c34:	00098593          	mv	a1,s3
     c38:	00250533          	add	a0,a0,sp
     c3c:	290000ef          	jal	ra,ecc <pqcrystals_kyber512_ref_polyvec_frombytes>
#endif

  unpack_ciphertext(&b, &v, c);
  unpack_sk(&skpv, sk);

  polyvec_ntt(&b);
     c40:	40010513          	addi	a0,sp,1024
     c44:	2c0000ef          	jal	ra,f04 <pqcrystals_kyber512_ref_polyvec_ntt>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  polyvec_basemul_acc_montgomery(&mp, &skpv, &b);
     c48:	60040413          	addi	s0,s0,1536
     c4c:	c00a8793          	addi	a5,s5,-1024
     c50:	008787b3          	add	a5,a5,s0
     c54:	00278433          	add	s0,a5,sp
     c58:	800a8593          	addi	a1,s5,-2048
     c5c:	40010613          	addi	a2,sp,1024
     c60:	002585b3          	add	a1,a1,sp
     c64:	00040513          	mv	a0,s0
     c68:	2ec000ef          	jal	ra,f54 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
  poly_invntt_tomont(&mp);
     c6c:	00040513          	mv	a0,s0
     c70:	15d000ef          	jal	ra,15cc <pqcrystals_kyber512_ref_poly_invntt_tomont>

#ifdef PROFILING_ADD_SUB
    uart_send_string("\n\rSUB poly_sub");
    asm("csrrs s4, "TICKS_REGISTER", zero");
#endif
  poly_sub(&mp, &v, &mp);
     c74:	00040613          	mv	a2,s0
     c78:	00048593          	mv	a1,s1
     c7c:	00040513          	mv	a0,s0
     c80:	2e5000ef          	jal	ra,1764 <pqcrystals_kyber512_ref_poly_sub>
#ifdef PROFILING_ADD_SUB
    asm("csrrs s3, "TICKS_REGISTER", zero");
    print_runtime(cycle_start, cycle_end);
#endif

  poly_tomsg(m, &mp);
     c84:	00040593          	mv	a1,s0
     c88:	00090513          	mv	a0,s2
     c8c:	704000ef          	jal	ra,1390 <pqcrystals_kyber512_ref_poly_tomsg>
}
     c90:	43010113          	addi	sp,sp,1072
     c94:	7ec12083          	lw	ra,2028(sp)
     c98:	7e812403          	lw	s0,2024(sp)
     c9c:	7e412483          	lw	s1,2020(sp)
     ca0:	7e012903          	lw	s2,2016(sp)
     ca4:	7dc12983          	lw	s3,2012(sp)
     ca8:	7d812a03          	lw	s4,2008(sp)
     cac:	7d412a83          	lw	s5,2004(sp)
     cb0:	7f010113          	addi	sp,sp,2032
     cb4:	00008067          	ret

00000cb8 <pqcrystals_kyber512_ref_polyvec_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECCOMPRESSEDBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a)
{
     cb8:	00050893          	mv	a7,a0
  uint16_t t[4];
  for(i=0;i<KYBER_K;i++) {
    for(j=0;j<KYBER_N/4;j++) {
      for(k=0;k<4;k++) {
        t[k]  = a->vec[i].coeffs[4*j+k];
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
     cbc:	00001637          	lui	a2,0x1
     cc0:	14050513          	addi	a0,a0,320
     cc4:	00058813          	mv	a6,a1
     cc8:	3c088893          	addi	a7,a7,960
     ccc:	d0160613          	addi	a2,a2,-767 # d01 <pqcrystals_kyber512_ref_polyvec_compress+0x49>
     cd0:	ec050693          	addi	a3,a0,-320
{
     cd4:	00080593          	mv	a1,a6
        t[k]  = a->vec[i].coeffs[4*j+k];
     cd8:	00059283          	lh	t0,0(a1)
     cdc:	00259f83          	lh	t6,2(a1)
     ce0:	00459f03          	lh	t5,4(a1)
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
     ce4:	40f2de13          	srai	t3,t0,0xf
     ce8:	40ffd713          	srai	a4,t6,0xf
     cec:	00ce7e33          	and	t3,t3,a2
     cf0:	00c77733          	and	a4,a4,a2
        t[k]  = a->vec[i].coeffs[4*j+k];
     cf4:	00659e83          	lh	t4,6(a1)
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
     cf8:	40ff5793          	srai	a5,t5,0xf
     cfc:	005e0e33          	add	t3,t3,t0
     d00:	01f70733          	add	a4,a4,t6
     d04:	00c7f7b3          	and	a5,a5,a2
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d08:	010e1e13          	slli	t3,t3,0x10
     d0c:	01071713          	slli	a4,a4,0x10
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
     d10:	01e787b3          	add	a5,a5,t5
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d14:	010e5e13          	srli	t3,t3,0x10
     d18:	01075713          	srli	a4,a4,0x10
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
     d1c:	40fed313          	srai	t1,t4,0xf
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d20:	01079793          	slli	a5,a5,0x10
     d24:	00ae1e13          	slli	t3,t3,0xa
     d28:	00a71713          	slli	a4,a4,0xa
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
     d2c:	00c37333          	and	t1,t1,a2
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d30:	0107d793          	srli	a5,a5,0x10
     d34:	680e0e13          	addi	t3,t3,1664
     d38:	68070713          	addi	a4,a4,1664
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
     d3c:	01d30333          	add	t1,t1,t4
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d40:	02ce5e33          	divu	t3,t3,a2
     d44:	00a79793          	slli	a5,a5,0xa
     d48:	01031313          	slli	t1,t1,0x10
     d4c:	68078793          	addi	a5,a5,1664
     d50:	01035313          	srli	t1,t1,0x10
     d54:	00a31313          	slli	t1,t1,0xa
     d58:	68030313          	addi	t1,t1,1664
      r[0] = (t[0] >> 0);
      r[1] = (t[0] >> 8) | (t[1] << 2);
      r[2] = (t[1] >> 6) | (t[2] << 4);
      r[3] = (t[2] >> 4) | (t[3] << 6);
      r[4] = (t[3] >> 2);
      r += 5;
     d5c:	00568693          	addi	a3,a3,5
    for(j=0;j<KYBER_N/4;j++) {
     d60:	00858593          	addi	a1,a1,8
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d64:	02c75733          	divu	a4,a4,a2
     d68:	3ffe7e13          	andi	t3,t3,1023
      r[1] = (t[0] >> 8) | (t[1] << 2);
     d6c:	008e5e93          	srli	t4,t3,0x8
      r[0] = (t[0] >> 0);
     d70:	ffc68da3          	sb	t3,-5(a3)
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d74:	02c7d7b3          	divu	a5,a5,a2
     d78:	3ff77713          	andi	a4,a4,1023
      r[1] = (t[0] >> 8) | (t[1] << 2);
     d7c:	00271e13          	slli	t3,a4,0x2
     d80:	01ceee33          	or	t3,t4,t3
      r[2] = (t[1] >> 6) | (t[2] << 4);
     d84:	00675713          	srli	a4,a4,0x6
      r[1] = (t[0] >> 8) | (t[1] << 2);
     d88:	ffc68e23          	sb	t3,-4(a3)
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     d8c:	02c35333          	divu	t1,t1,a2
     d90:	3ff7f793          	andi	a5,a5,1023
      r[2] = (t[1] >> 6) | (t[2] << 4);
     d94:	00479e13          	slli	t3,a5,0x4
     d98:	01c76733          	or	a4,a4,t3
     d9c:	fee68ea3          	sb	a4,-3(a3)
      r[3] = (t[2] >> 4) | (t[3] << 6);
     da0:	0047d793          	srli	a5,a5,0x4
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
     da4:	3ff37713          	andi	a4,t1,1023
      r[3] = (t[2] >> 4) | (t[3] << 6);
     da8:	00671313          	slli	t1,a4,0x6
     dac:	0067e7b3          	or	a5,a5,t1
      r[4] = (t[3] >> 2);
     db0:	00275713          	srli	a4,a4,0x2
      r[3] = (t[2] >> 4) | (t[3] << 6);
     db4:	fef68f23          	sb	a5,-2(a3)
      r[4] = (t[3] >> 2);
     db8:	fee68fa3          	sb	a4,-1(a3)
    for(j=0;j<KYBER_N/4;j++) {
     dbc:	f0a69ee3          	bne	a3,a0,cd8 <pqcrystals_kyber512_ref_polyvec_compress+0x20>
  for(i=0;i<KYBER_K;i++) {
     dc0:	14068513          	addi	a0,a3,320
     dc4:	20080813          	addi	a6,a6,512
     dc8:	f0a894e3          	bne	a7,a0,cd0 <pqcrystals_kyber512_ref_polyvec_compress+0x18>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
     dcc:	00008067          	ret

00000dd0 <pqcrystals_kyber512_ref_polyvec_decompress>:
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
      a += 5;

      for(k=0;k<4;k++)
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
     dd0:	00001837          	lui	a6,0x1
     dd4:	14058893          	addi	a7,a1,320
     dd8:	00050313          	mv	t1,a0
     ddc:	3c058e13          	addi	t3,a1,960
     de0:	d0180813          	addi	a6,a6,-767 # d01 <pqcrystals_kyber512_ref_polyvec_compress+0x49>
     de4:	ec088593          	addi	a1,a7,-320
{
     de8:	00030513          	mv	a0,t1
      t[0] = (a[0] >> 0) | ((uint16_t)a[1] << 8);
     dec:	0015c683          	lbu	a3,1(a1)
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
     df0:	0025c703          	lbu	a4,2(a1)
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
     df4:	0035ce83          	lbu	t4,3(a1)
     df8:	0005c283          	lbu	t0,0(a1)
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
     dfc:	0045c783          	lbu	a5,4(a1)
     e00:	00869613          	slli	a2,a3,0x8
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
     e04:	0026df93          	srli	t6,a3,0x2
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
     e08:	00475f13          	srli	t5,a4,0x4
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
     e0c:	00671693          	slli	a3,a4,0x6
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
     e10:	004e9713          	slli	a4,t4,0x4
     e14:	00566633          	or	a2,a2,t0
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
     e18:	01f6e6b3          	or	a3,a3,t6
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
     e1c:	00279793          	slli	a5,a5,0x2
     e20:	006ede93          	srli	t4,t4,0x6
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
     e24:	01e76733          	or	a4,a4,t5
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
     e28:	01d7e7b3          	or	a5,a5,t4
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
     e2c:	3ff67613          	andi	a2,a2,1023
     e30:	3ff6f693          	andi	a3,a3,1023
     e34:	3ff77713          	andi	a4,a4,1023
     e38:	03060633          	mul	a2,a2,a6
    for(j=0;j<KYBER_N/4;j++) {
     e3c:	00850513          	addi	a0,a0,8
      a += 5;
     e40:	00558593          	addi	a1,a1,5
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
     e44:	030686b3          	mul	a3,a3,a6
     e48:	20060613          	addi	a2,a2,512
     e4c:	00a65613          	srli	a2,a2,0xa
     e50:	fec51c23          	sh	a2,-8(a0)
     e54:	03070733          	mul	a4,a4,a6
     e58:	20068693          	addi	a3,a3,512
     e5c:	00a6d693          	srli	a3,a3,0xa
     e60:	fed51d23          	sh	a3,-6(a0)
     e64:	030787b3          	mul	a5,a5,a6
     e68:	20070713          	addi	a4,a4,512
     e6c:	00a75713          	srli	a4,a4,0xa
     e70:	fee51e23          	sh	a4,-4(a0)
     e74:	20078793          	addi	a5,a5,512
     e78:	00a7d793          	srli	a5,a5,0xa
     e7c:	fef51f23          	sh	a5,-2(a0)
    for(j=0;j<KYBER_N/4;j++) {
     e80:	f71596e3          	bne	a1,a7,dec <pqcrystals_kyber512_ref_polyvec_decompress+0x1c>
  for(i=0;i<KYBER_K;i++) {
     e84:	14058893          	addi	a7,a1,320
     e88:	20030313          	addi	t1,t1,512
     e8c:	f5c89ce3          	bne	a7,t3,de4 <pqcrystals_kyber512_ref_polyvec_decompress+0x14>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
     e90:	00008067          	ret

00000e94 <pqcrystals_kyber512_ref_polyvec_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a)
{
     e94:	ff010113          	addi	sp,sp,-16
     e98:	00812423          	sw	s0,8(sp)
     e9c:	00912223          	sw	s1,4(sp)
     ea0:	00112623          	sw	ra,12(sp)
     ea4:	00050413          	mv	s0,a0
     ea8:	00058493          	mv	s1,a1
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
     eac:	37c000ef          	jal	ra,1228 <pqcrystals_kyber512_ref_poly_tobytes>
     eb0:	18040513          	addi	a0,s0,384
}
     eb4:	00812403          	lw	s0,8(sp)
     eb8:	00c12083          	lw	ra,12(sp)
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
     ebc:	20048593          	addi	a1,s1,512
}
     ec0:	00412483          	lw	s1,4(sp)
     ec4:	01010113          	addi	sp,sp,16
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
     ec8:	3600006f          	j	1228 <pqcrystals_kyber512_ref_poly_tobytes>

00000ecc <pqcrystals_kyber512_ref_polyvec_frombytes>:
* Arguments:   - uint8_t *r:       pointer to output byte array
*              - const polyvec *a: pointer to input vector of polynomials
*                                  (of length KYBER_POLYVECBYTES)
**************************************************/
void polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
{
     ecc:	ff010113          	addi	sp,sp,-16
     ed0:	00812423          	sw	s0,8(sp)
     ed4:	00912223          	sw	s1,4(sp)
     ed8:	00112623          	sw	ra,12(sp)
     edc:	00050413          	mv	s0,a0
     ee0:	00058493          	mv	s1,a1
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
     ee4:	3ac000ef          	jal	ra,1290 <pqcrystals_kyber512_ref_poly_frombytes>
     ee8:	20040513          	addi	a0,s0,512
}
     eec:	00812403          	lw	s0,8(sp)
     ef0:	00c12083          	lw	ra,12(sp)
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
     ef4:	18048593          	addi	a1,s1,384
}
     ef8:	00412483          	lw	s1,4(sp)
     efc:	01010113          	addi	sp,sp,16
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
     f00:	3900006f          	j	1290 <pqcrystals_kyber512_ref_poly_frombytes>

00000f04 <pqcrystals_kyber512_ref_polyvec_ntt>:
* Description: Apply forward NTT to all elements of a vector of polynomials
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_ntt(polyvec *r)
{
     f04:	ff010113          	addi	sp,sp,-16
     f08:	00812423          	sw	s0,8(sp)
     f0c:	00112623          	sw	ra,12(sp)
     f10:	00050413          	mv	s0,a0
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_ntt(&r->vec[i]);
     f14:	6b4000ef          	jal	ra,15c8 <pqcrystals_kyber512_ref_poly_ntt>
     f18:	20040513          	addi	a0,s0,512
}
     f1c:	00812403          	lw	s0,8(sp)
     f20:	00c12083          	lw	ra,12(sp)
     f24:	01010113          	addi	sp,sp,16
    poly_ntt(&r->vec[i]);
     f28:	6a00006f          	j	15c8 <pqcrystals_kyber512_ref_poly_ntt>

00000f2c <pqcrystals_kyber512_ref_polyvec_invntt_tomont>:
*              and multiply by Montgomery factor 2^16
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_invntt_tomont(polyvec *r)
{
     f2c:	ff010113          	addi	sp,sp,-16
     f30:	00812423          	sw	s0,8(sp)
     f34:	00112623          	sw	ra,12(sp)
     f38:	00050413          	mv	s0,a0
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_invntt_tomont(&r->vec[i]);
     f3c:	690000ef          	jal	ra,15cc <pqcrystals_kyber512_ref_poly_invntt_tomont>
     f40:	20040513          	addi	a0,s0,512
}
     f44:	00812403          	lw	s0,8(sp)
     f48:	00c12083          	lw	ra,12(sp)
     f4c:	01010113          	addi	sp,sp,16
    poly_invntt_tomont(&r->vec[i]);
     f50:	67c0006f          	j	15cc <pqcrystals_kyber512_ref_poly_invntt_tomont>

00000f54 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>:
* Arguments: - poly *r: pointer to output polynomial
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
{
     f54:	df010113          	addi	sp,sp,-528
     f58:	20112623          	sw	ra,524(sp)
     f5c:	20812423          	sw	s0,520(sp)
     f60:	20912223          	sw	s1,516(sp)
     f64:	21212023          	sw	s2,512(sp)
     f68:	00050413          	mv	s0,a0
     f6c:	00058493          	mv	s1,a1
     f70:	00060913          	mv	s2,a2
  register uint32_t cycle_end asm("s3");

  uart_send_string("\n\rMULT poly_basemul");
  asm("csrrs s4, "TICKS_REGISTER", zero");
#endif
  poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
     f74:	65c000ef          	jal	ra,15d0 <pqcrystals_kyber512_ref_poly_basemul_montgomery>
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  for(i=1;i<KYBER_K;i++) {
    poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
     f78:	20090613          	addi	a2,s2,512
     f7c:	20048593          	addi	a1,s1,512
     f80:	00010513          	mv	a0,sp
     f84:	64c000ef          	jal	ra,15d0 <pqcrystals_kyber512_ref_poly_basemul_montgomery>
    poly_add(r, r, &t);
     f88:	00010613          	mv	a2,sp
     f8c:	00040593          	mv	a1,s0
     f90:	00040513          	mv	a0,s0
     f94:	774000ef          	jal	ra,1708 <pqcrystals_kyber512_ref_poly_add>
  }
#ifndef FPAU
  poly_reduce(r);
#endif
}
     f98:	20c12083          	lw	ra,524(sp)
     f9c:	20812403          	lw	s0,520(sp)
     fa0:	20412483          	lw	s1,516(sp)
     fa4:	20012903          	lw	s2,512(sp)
     fa8:	21010113          	addi	sp,sp,528
     fac:	00008067          	ret

00000fb0 <pqcrystals_kyber512_ref_polyvec_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - polyvec *r: pointer to input/output polynomial
**************************************************/
void polyvec_reduce(polyvec *r)
{
     fb0:	ff010113          	addi	sp,sp,-16
     fb4:	00812423          	sw	s0,8(sp)
     fb8:	00112623          	sw	ra,12(sp)
     fbc:	00050413          	mv	s0,a0
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_reduce(&r->vec[i]);
     fc0:	708000ef          	jal	ra,16c8 <pqcrystals_kyber512_ref_poly_reduce>
     fc4:	20040513          	addi	a0,s0,512
}
     fc8:	00812403          	lw	s0,8(sp)
     fcc:	00c12083          	lw	ra,12(sp)
     fd0:	01010113          	addi	sp,sp,16
    poly_reduce(&r->vec[i]);
     fd4:	6f40006f          	j	16c8 <pqcrystals_kyber512_ref_poly_reduce>

00000fd8 <pqcrystals_kyber512_ref_polyvec_add>:
* Arguments: - polyvec *r: pointer to output vector of polynomials
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_add(polyvec *r, const polyvec *a, const polyvec *b)
{
     fd8:	ff010113          	addi	sp,sp,-16
     fdc:	00812423          	sw	s0,8(sp)
     fe0:	00912223          	sw	s1,4(sp)
     fe4:	01212023          	sw	s2,0(sp)
     fe8:	00112623          	sw	ra,12(sp)
     fec:	00050413          	mv	s0,a0
     ff0:	00058493          	mv	s1,a1
     ff4:	00060913          	mv	s2,a2
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
     ff8:	710000ef          	jal	ra,1708 <pqcrystals_kyber512_ref_poly_add>
     ffc:	20040513          	addi	a0,s0,512
}
    1000:	00812403          	lw	s0,8(sp)
    1004:	00c12083          	lw	ra,12(sp)
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
    1008:	20090613          	addi	a2,s2,512
    100c:	20048593          	addi	a1,s1,512
}
    1010:	00012903          	lw	s2,0(sp)
    1014:	00412483          	lw	s1,4(sp)
    1018:	01010113          	addi	sp,sp,16
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
    101c:	6ec0006f          	j	1708 <pqcrystals_kyber512_ref_poly_add>

00001020 <pqcrystals_kyber512_ref_poly_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (of length KYBER_POLYCOMPRESSEDBYTES)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a)
{
    1020:	fe010113          	addi	sp,sp,-32
#if (KYBER_POLYCOMPRESSEDBYTES == 128)
  for(i=0;i<KYBER_N/8;i++) {
    for(j=0;j<8;j++) {
      // map to positive standard representatives
      u  = a->coeffs[8*i+j];
      u += (u >> 15) & KYBER_Q;
    1024:	00001637          	lui	a2,0x1
{
    1028:	00812e23          	sw	s0,28(sp)
    102c:	00912c23          	sw	s1,24(sp)
    1030:	01212a23          	sw	s2,20(sp)
    1034:	01312823          	sw	s3,16(sp)
    1038:	01412623          	sw	s4,12(sp)
    103c:	08050813          	addi	a6,a0,128
      u += (u >> 15) & KYBER_Q;
    1040:	d0160613          	addi	a2,a2,-767 # d01 <pqcrystals_kyber512_ref_polyvec_compress+0x49>
      u  = a->coeffs[8*i+j];
    1044:	00259a03          	lh	s4,2(a1)
    1048:	00059383          	lh	t2,0(a1)
    104c:	00659983          	lh	s3,6(a1)
    1050:	00a59903          	lh	s2,10(a1)
    1054:	00e59483          	lh	s1,14(a1)
    1058:	00459283          	lh	t0,4(a1)
    105c:	00859e03          	lh	t3,8(a1)
    1060:	00c59f83          	lh	t6,12(a1)
      u += (u >> 15) & KYBER_Q;
    1064:	40fa5893          	srai	a7,s4,0xf
    1068:	00c8f8b3          	and	a7,a7,a2
    106c:	40f3df13          	srai	t5,t2,0xf
    1070:	40f9d693          	srai	a3,s3,0xf
    1074:	40f95713          	srai	a4,s2,0xf
    1078:	40f4d793          	srai	a5,s1,0xf
    107c:	014888b3          	add	a7,a7,s4
    1080:	00cf7f33          	and	t5,t5,a2
    1084:	40fe5413          	srai	s0,t3,0xf
    1088:	00c6f6b3          	and	a3,a3,a2
    108c:	40f2de93          	srai	t4,t0,0xf
    1090:	00c77733          	and	a4,a4,a2
    1094:	00c7f7b3          	and	a5,a5,a2
    1098:	40ffd313          	srai	t1,t6,0xf
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    109c:	01089893          	slli	a7,a7,0x10
      u += (u >> 15) & KYBER_Q;
    10a0:	007f0f33          	add	t5,t5,t2
    10a4:	013686b3          	add	a3,a3,s3
    10a8:	00cefeb3          	and	t4,t4,a2
    10ac:	01270733          	add	a4,a4,s2
    10b0:	00c47433          	and	s0,s0,a2
    10b4:	009787b3          	add	a5,a5,s1
    10b8:	00c37333          	and	t1,t1,a2
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    10bc:	0108d893          	srli	a7,a7,0x10
    10c0:	010f1f13          	slli	t5,t5,0x10
    10c4:	01069693          	slli	a3,a3,0x10
      u += (u >> 15) & KYBER_Q;
    10c8:	005e8eb3          	add	t4,t4,t0
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    10cc:	01071713          	slli	a4,a4,0x10
      u += (u >> 15) & KYBER_Q;
    10d0:	01c40e33          	add	t3,s0,t3
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    10d4:	01079793          	slli	a5,a5,0x10
      u += (u >> 15) & KYBER_Q;
    10d8:	01f30333          	add	t1,t1,t6
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    10dc:	00489893          	slli	a7,a7,0x4
    10e0:	010f5f13          	srli	t5,t5,0x10
    10e4:	0106d693          	srli	a3,a3,0x10
    10e8:	01075713          	srli	a4,a4,0x10
    10ec:	0107d793          	srli	a5,a5,0x10
    10f0:	010e9e93          	slli	t4,t4,0x10
    10f4:	010e1e13          	slli	t3,t3,0x10
    10f8:	01031313          	slli	t1,t1,0x10
    10fc:	68088893          	addi	a7,a7,1664
    1100:	004f1f13          	slli	t5,t5,0x4
    1104:	02c8c8b3          	div	a7,a7,a2
    1108:	00469693          	slli	a3,a3,0x4
    110c:	010ede93          	srli	t4,t4,0x10
    1110:	00471713          	slli	a4,a4,0x4
    1114:	010e5e13          	srli	t3,t3,0x10
    1118:	00479793          	slli	a5,a5,0x4
    111c:	01035313          	srli	t1,t1,0x10
    1120:	680f0f13          	addi	t5,t5,1664
    1124:	68068693          	addi	a3,a3,1664
    1128:	004e9e93          	slli	t4,t4,0x4
    112c:	68070713          	addi	a4,a4,1664
    1130:	004e1e13          	slli	t3,t3,0x4
    1134:	68078793          	addi	a5,a5,1664
    1138:	00431313          	slli	t1,t1,0x4
    113c:	680e8e93          	addi	t4,t4,1664
    1140:	680e0e13          	addi	t3,t3,1664
    1144:	68030313          	addi	t1,t1,1664

    r[0] = t[0] | (t[1] << 4);
    r[1] = t[2] | (t[3] << 4);
    r[2] = t[4] | (t[5] << 4);
    r[3] = t[6] | (t[7] << 4);
    r += 4;
    1148:	00450513          	addi	a0,a0,4
  for(i=0;i<KYBER_N/8;i++) {
    114c:	01058593          	addi	a1,a1,16
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    1150:	02cf4f33          	div	t5,t5,a2
    r[0] = t[0] | (t[1] << 4);
    1154:	00f8f893          	andi	a7,a7,15
    1158:	00489893          	slli	a7,a7,0x4
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    115c:	02c6c6b3          	div	a3,a3,a2
    1160:	00ff7f13          	andi	t5,t5,15
    r[0] = t[0] | (t[1] << 4);
    1164:	01e8e8b3          	or	a7,a7,t5
    1168:	ff150e23          	sb	a7,-4(a0)
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    116c:	02c74733          	div	a4,a4,a2
    r[1] = t[2] | (t[3] << 4);
    1170:	00f6f693          	andi	a3,a3,15
    1174:	00469693          	slli	a3,a3,0x4
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    1178:	02c7c7b3          	div	a5,a5,a2
    r[2] = t[4] | (t[5] << 4);
    117c:	00f77713          	andi	a4,a4,15
    1180:	00471713          	slli	a4,a4,0x4
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    1184:	02ceceb3          	div	t4,t4,a2
    r[3] = t[6] | (t[7] << 4);
    1188:	00f7f793          	andi	a5,a5,15
    118c:	00479793          	slli	a5,a5,0x4
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    1190:	02ce4e33          	div	t3,t3,a2
    1194:	00fef893          	andi	a7,t4,15
    r[1] = t[2] | (t[3] << 4);
    1198:	0116e6b3          	or	a3,a3,a7
    119c:	fed50ea3          	sb	a3,-3(a0)
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    11a0:	02c34333          	div	t1,t1,a2
    11a4:	00fe7e13          	andi	t3,t3,15
    r[2] = t[4] | (t[5] << 4);
    11a8:	01c76733          	or	a4,a4,t3
    11ac:	fee50f23          	sb	a4,-2(a0)
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
    11b0:	00f37313          	andi	t1,t1,15
    r[3] = t[6] | (t[7] << 4);
    11b4:	0067e7b3          	or	a5,a5,t1
    11b8:	fef50fa3          	sb	a5,-1(a0)
  for(i=0;i<KYBER_N/8;i++) {
    11bc:	e90514e3          	bne	a0,a6,1044 <pqcrystals_kyber512_ref_poly_compress+0x24>
    r += 5;
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
    11c0:	01c12403          	lw	s0,28(sp)
    11c4:	01812483          	lw	s1,24(sp)
    11c8:	01412903          	lw	s2,20(sp)
    11cc:	01012983          	lw	s3,16(sp)
    11d0:	00c12a03          	lw	s4,12(sp)
    11d4:	02010113          	addi	sp,sp,32
    11d8:	00008067          	ret

000011dc <pqcrystals_kyber512_ref_poly_decompress>:
{
  unsigned int i;

#if (KYBER_POLYCOMPRESSEDBYTES == 128)
  for(i=0;i<KYBER_N/2;i++) {
    r->coeffs[2*i+0] = (((uint16_t)(a[0] & 15)*KYBER_Q) + 8) >> 4;
    11dc:	00001737          	lui	a4,0x1
    11e0:	08058693          	addi	a3,a1,128
    11e4:	d0170713          	addi	a4,a4,-767 # d01 <pqcrystals_kyber512_ref_polyvec_compress+0x49>
    11e8:	0005c783          	lbu	a5,0(a1)
  for(i=0;i<KYBER_N/2;i++) {
    11ec:	00450513          	addi	a0,a0,4
    r->coeffs[2*i+1] = (((uint16_t)(a[0] >> 4)*KYBER_Q) + 8) >> 4;
    a += 1;
    11f0:	00158593          	addi	a1,a1,1
    r->coeffs[2*i+0] = (((uint16_t)(a[0] & 15)*KYBER_Q) + 8) >> 4;
    11f4:	00f7f793          	andi	a5,a5,15
    11f8:	02e787b3          	mul	a5,a5,a4
    11fc:	00878793          	addi	a5,a5,8
    1200:	4047d793          	srai	a5,a5,0x4
    1204:	fef51e23          	sh	a5,-4(a0)
    r->coeffs[2*i+1] = (((uint16_t)(a[0] >> 4)*KYBER_Q) + 8) >> 4;
    1208:	fff5c783          	lbu	a5,-1(a1)
    120c:	0047d793          	srli	a5,a5,0x4
    1210:	02e787b3          	mul	a5,a5,a4
    1214:	00878793          	addi	a5,a5,8
    1218:	4047d793          	srai	a5,a5,0x4
    121c:	fef51f23          	sh	a5,-2(a0)
  for(i=0;i<KYBER_N/2;i++) {
    1220:	fcd594e3          	bne	a1,a3,11e8 <pqcrystals_kyber512_ref_poly_decompress+0xc>
      r->coeffs[8*i+j] = ((uint32_t)(t[j] & 31)*KYBER_Q + 16) >> 5;
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
    1224:	00008067          	ret

00001228 <pqcrystals_kyber512_ref_poly_tobytes>:
  uint16_t t0, t1;

  for(i=0;i<KYBER_N/2;i++) {
    // map to positive standard representatives
    t0  = a->coeffs[2*i];
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
    1228:	00001837          	lui	a6,0x1
    122c:	18050893          	addi	a7,a0,384
    1230:	d0180813          	addi	a6,a6,-767 # d01 <pqcrystals_kyber512_ref_polyvec_compress+0x49>
    t0  = a->coeffs[2*i];
    1234:	00059703          	lh	a4,0(a1)
    t1 = a->coeffs[2*i+1];
    1238:	00259783          	lh	a5,2(a1)
  for(i=0;i<KYBER_N/2;i++) {
    123c:	00350513          	addi	a0,a0,3
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
    1240:	40f75613          	srai	a2,a4,0xf
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
    1244:	40f7d693          	srai	a3,a5,0xf
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
    1248:	01067633          	and	a2,a2,a6
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
    124c:	0106f6b3          	and	a3,a3,a6
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
    1250:	00c70733          	add	a4,a4,a2
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
    1254:	00d787b3          	add	a5,a5,a3
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
    1258:	01071713          	slli	a4,a4,0x10
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
    125c:	01079793          	slli	a5,a5,0x10
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
    1260:	01075713          	srli	a4,a4,0x10
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
    1264:	0107d793          	srli	a5,a5,0x10
    r[3*i+0] = (t0 >> 0);
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
    1268:	00479613          	slli	a2,a5,0x4
    126c:	00875693          	srli	a3,a4,0x8
    1270:	00c6e6b3          	or	a3,a3,a2
    r[3*i+2] = (t1 >> 4);
    1274:	0047d793          	srli	a5,a5,0x4
    r[3*i+0] = (t0 >> 0);
    1278:	fee50ea3          	sb	a4,-3(a0)
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
    127c:	fed50f23          	sb	a3,-2(a0)
    r[3*i+2] = (t1 >> 4);
    1280:	fef50fa3          	sb	a5,-1(a0)
  for(i=0;i<KYBER_N/2;i++) {
    1284:	00458593          	addi	a1,a1,4
    1288:	faa896e3          	bne	a7,a0,1234 <pqcrystals_kyber512_ref_poly_tobytes+0xc>
  }
}
    128c:	00008067          	ret

00001290 <pqcrystals_kyber512_ref_poly_frombytes>:
**************************************************/
void poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES])
{
  unsigned int i;
  for(i=0;i<KYBER_N/2;i++) {
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
    1290:	000016b7          	lui	a3,0x1
    1294:	18058613          	addi	a2,a1,384
    1298:	fff68693          	addi	a3,a3,-1 # fff <pqcrystals_kyber512_ref_polyvec_add+0x27>
    129c:	0015c783          	lbu	a5,1(a1)
    12a0:	0005c703          	lbu	a4,0(a1)
  for(i=0;i<KYBER_N/2;i++) {
    12a4:	00358593          	addi	a1,a1,3
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
    12a8:	00879793          	slli	a5,a5,0x8
    12ac:	00e7e7b3          	or	a5,a5,a4
    12b0:	00d7f7b3          	and	a5,a5,a3
    12b4:	00f51023          	sh	a5,0(a0)
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
    12b8:	ffe5c703          	lbu	a4,-2(a1)
    12bc:	fff5c783          	lbu	a5,-1(a1)
  for(i=0;i<KYBER_N/2;i++) {
    12c0:	00450513          	addi	a0,a0,4
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
    12c4:	00475713          	srli	a4,a4,0x4
    12c8:	00479793          	slli	a5,a5,0x4
    12cc:	00e7e7b3          	or	a5,a5,a4
    12d0:	fef51f23          	sh	a5,-2(a0)
  for(i=0;i<KYBER_N/2;i++) {
    12d4:	fcb614e3          	bne	a2,a1,129c <pqcrystals_kyber512_ref_poly_frombytes+0xc>
  }
}
    12d8:	00008067          	ret

000012dc <pqcrystals_kyber512_ref_poly_frommsg>:

#if (KYBER_INDCPA_MSGBYTES != KYBER_N/8)
#error "KYBER_INDCPA_MSGBYTES must be equal to KYBER_N/8 bytes!"
#endif

  for(i=0;i<KYBER_N/8;i++) {
    12dc:	20050713          	addi	a4,a0,512
    for(j=0;j<8;j++) {
      mask = -(int16_t)((msg[i] >> j)&1);
    12e0:	0005c783          	lbu	a5,0(a1)
  for(i=0;i<KYBER_N/8;i++) {
    12e4:	01050513          	addi	a0,a0,16
    12e8:	00158593          	addi	a1,a1,1
      mask = -(int16_t)((msg[i] >> j)&1);
    12ec:	0017f793          	andi	a5,a5,1
    12f0:	40f007b3          	neg	a5,a5
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    12f4:	6817f793          	andi	a5,a5,1665
    12f8:	fef51823          	sh	a5,-16(a0)
      mask = -(int16_t)((msg[i] >> j)&1);
    12fc:	fff5c783          	lbu	a5,-1(a1)
    1300:	01e79793          	slli	a5,a5,0x1e
    1304:	41f7d793          	srai	a5,a5,0x1f
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    1308:	6817f793          	andi	a5,a5,1665
    130c:	fef51923          	sh	a5,-14(a0)
      mask = -(int16_t)((msg[i] >> j)&1);
    1310:	fff5c783          	lbu	a5,-1(a1)
    1314:	01d79793          	slli	a5,a5,0x1d
    1318:	41f7d793          	srai	a5,a5,0x1f
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    131c:	6817f793          	andi	a5,a5,1665
    1320:	fef51a23          	sh	a5,-12(a0)
      mask = -(int16_t)((msg[i] >> j)&1);
    1324:	fff5c783          	lbu	a5,-1(a1)
    1328:	01c79793          	slli	a5,a5,0x1c
    132c:	41f7d793          	srai	a5,a5,0x1f
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    1330:	6817f793          	andi	a5,a5,1665
    1334:	fef51b23          	sh	a5,-10(a0)
      mask = -(int16_t)((msg[i] >> j)&1);
    1338:	fff5c783          	lbu	a5,-1(a1)
    133c:	01b79793          	slli	a5,a5,0x1b
    1340:	41f7d793          	srai	a5,a5,0x1f
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    1344:	6817f793          	andi	a5,a5,1665
    1348:	fef51c23          	sh	a5,-8(a0)
      mask = -(int16_t)((msg[i] >> j)&1);
    134c:	fff5c783          	lbu	a5,-1(a1)
    1350:	01a79793          	slli	a5,a5,0x1a
    1354:	41f7d793          	srai	a5,a5,0x1f
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    1358:	6817f793          	andi	a5,a5,1665
    135c:	fef51d23          	sh	a5,-6(a0)
      mask = -(int16_t)((msg[i] >> j)&1);
    1360:	fff5c783          	lbu	a5,-1(a1)
    1364:	01979793          	slli	a5,a5,0x19
    1368:	41f7d793          	srai	a5,a5,0x1f
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    136c:	6817f793          	andi	a5,a5,1665
    1370:	fef51e23          	sh	a5,-4(a0)
      mask = -(int16_t)((msg[i] >> j)&1);
    1374:	fff5c783          	lbu	a5,-1(a1)
    1378:	4077d793          	srai	a5,a5,0x7
    137c:	40f007b3          	neg	a5,a5
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
    1380:	6817f793          	andi	a5,a5,1665
    1384:	fef51f23          	sh	a5,-2(a0)
  for(i=0;i<KYBER_N/8;i++) {
    1388:	f4a71ce3          	bne	a4,a0,12e0 <pqcrystals_kyber512_ref_poly_frommsg+0x4>
    }
  }
}
    138c:	00008067          	ret

00001390 <pqcrystals_kyber512_ref_poly_tomsg>:

  for(i=0;i<KYBER_N/8;i++) {
    msg[i] = 0;
    for(j=0;j<8;j++) {
      t  = a->coeffs[8*i+j];
      t += ((int16_t)t >> 15) & KYBER_Q;
    1390:	000016b7          	lui	a3,0x1
    1394:	20058613          	addi	a2,a1,512
    1398:	d0168693          	addi	a3,a3,-767 # d01 <pqcrystals_kyber512_ref_polyvec_compress+0x49>
    msg[i] = 0;
    139c:	00050023          	sb	zero,0(a0)
      t  = a->coeffs[8*i+j];
    13a0:	00059783          	lh	a5,0(a1)
  for(i=0;i<KYBER_N/8;i++) {
    13a4:	00150513          	addi	a0,a0,1
    13a8:	01058593          	addi	a1,a1,16
      t += ((int16_t)t >> 15) & KYBER_Q;
    13ac:	40f7d713          	srai	a4,a5,0xf
    13b0:	00d77733          	and	a4,a4,a3
    13b4:	00e787b3          	add	a5,a5,a4
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    13b8:	01079793          	slli	a5,a5,0x10
    13bc:	0107d793          	srli	a5,a5,0x10
    13c0:	00179793          	slli	a5,a5,0x1
    13c4:	68078793          	addi	a5,a5,1664
    13c8:	02d7c7b3          	div	a5,a5,a3
      msg[i] |= t << j;
    13cc:	0017f793          	andi	a5,a5,1
    13d0:	fef50fa3          	sb	a5,-1(a0)
      t  = a->coeffs[8*i+j];
    13d4:	ff259703          	lh	a4,-14(a1)
      t += ((int16_t)t >> 15) & KYBER_Q;
    13d8:	40f75813          	srai	a6,a4,0xf
    13dc:	00d87833          	and	a6,a6,a3
    13e0:	01070733          	add	a4,a4,a6
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    13e4:	01071713          	slli	a4,a4,0x10
    13e8:	01075713          	srli	a4,a4,0x10
    13ec:	00171713          	slli	a4,a4,0x1
    13f0:	68070713          	addi	a4,a4,1664
    13f4:	02d74733          	div	a4,a4,a3
      msg[i] |= t << j;
    13f8:	00177713          	andi	a4,a4,1
    13fc:	00171713          	slli	a4,a4,0x1
    1400:	00e7e7b3          	or	a5,a5,a4
    1404:	fef50fa3          	sb	a5,-1(a0)
      t  = a->coeffs[8*i+j];
    1408:	ff459703          	lh	a4,-12(a1)
      t += ((int16_t)t >> 15) & KYBER_Q;
    140c:	40f75813          	srai	a6,a4,0xf
    1410:	00d87833          	and	a6,a6,a3
    1414:	01070733          	add	a4,a4,a6
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    1418:	01071713          	slli	a4,a4,0x10
    141c:	01075713          	srli	a4,a4,0x10
    1420:	00171713          	slli	a4,a4,0x1
    1424:	68070713          	addi	a4,a4,1664
    1428:	02d74733          	div	a4,a4,a3
      msg[i] |= t << j;
    142c:	00177713          	andi	a4,a4,1
    1430:	00271713          	slli	a4,a4,0x2
    1434:	00e7e7b3          	or	a5,a5,a4
    1438:	fef50fa3          	sb	a5,-1(a0)
      t  = a->coeffs[8*i+j];
    143c:	ff659703          	lh	a4,-10(a1)
      t += ((int16_t)t >> 15) & KYBER_Q;
    1440:	40f75813          	srai	a6,a4,0xf
    1444:	00d87833          	and	a6,a6,a3
    1448:	01070733          	add	a4,a4,a6
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    144c:	01071713          	slli	a4,a4,0x10
    1450:	01075713          	srli	a4,a4,0x10
    1454:	00171713          	slli	a4,a4,0x1
    1458:	68070713          	addi	a4,a4,1664
    145c:	02d74733          	div	a4,a4,a3
      msg[i] |= t << j;
    1460:	00177713          	andi	a4,a4,1
    1464:	00371713          	slli	a4,a4,0x3
    1468:	00e7e7b3          	or	a5,a5,a4
    146c:	fef50fa3          	sb	a5,-1(a0)
      t  = a->coeffs[8*i+j];
    1470:	ff859703          	lh	a4,-8(a1)
      t += ((int16_t)t >> 15) & KYBER_Q;
    1474:	40f75813          	srai	a6,a4,0xf
    1478:	00d87833          	and	a6,a6,a3
    147c:	01070733          	add	a4,a4,a6
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    1480:	01071713          	slli	a4,a4,0x10
    1484:	01075713          	srli	a4,a4,0x10
    1488:	00171713          	slli	a4,a4,0x1
    148c:	68070713          	addi	a4,a4,1664
    1490:	02d74733          	div	a4,a4,a3
      msg[i] |= t << j;
    1494:	00177713          	andi	a4,a4,1
    1498:	00471713          	slli	a4,a4,0x4
    149c:	00e7e7b3          	or	a5,a5,a4
    14a0:	fef50fa3          	sb	a5,-1(a0)
      t  = a->coeffs[8*i+j];
    14a4:	ffa59703          	lh	a4,-6(a1)
      t += ((int16_t)t >> 15) & KYBER_Q;
    14a8:	40f75813          	srai	a6,a4,0xf
    14ac:	00d87833          	and	a6,a6,a3
    14b0:	01070733          	add	a4,a4,a6
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    14b4:	01071713          	slli	a4,a4,0x10
    14b8:	01075713          	srli	a4,a4,0x10
    14bc:	00171713          	slli	a4,a4,0x1
    14c0:	68070713          	addi	a4,a4,1664
    14c4:	02d74733          	div	a4,a4,a3
      msg[i] |= t << j;
    14c8:	00177713          	andi	a4,a4,1
    14cc:	00571713          	slli	a4,a4,0x5
    14d0:	00e7e7b3          	or	a5,a5,a4
    14d4:	fef50fa3          	sb	a5,-1(a0)
      t  = a->coeffs[8*i+j];
    14d8:	ffc59703          	lh	a4,-4(a1)
      t += ((int16_t)t >> 15) & KYBER_Q;
    14dc:	40f75813          	srai	a6,a4,0xf
    14e0:	00d87833          	and	a6,a6,a3
    14e4:	01070733          	add	a4,a4,a6
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    14e8:	01071713          	slli	a4,a4,0x10
    14ec:	01075713          	srli	a4,a4,0x10
    14f0:	00171713          	slli	a4,a4,0x1
    14f4:	68070713          	addi	a4,a4,1664
    14f8:	02d74733          	div	a4,a4,a3
      msg[i] |= t << j;
    14fc:	00177713          	andi	a4,a4,1
    1500:	00671713          	slli	a4,a4,0x6
    1504:	00e7e7b3          	or	a5,a5,a4
    1508:	fef50fa3          	sb	a5,-1(a0)
      t  = a->coeffs[8*i+j];
    150c:	ffe59703          	lh	a4,-2(a1)
      t += ((int16_t)t >> 15) & KYBER_Q;
    1510:	40f75813          	srai	a6,a4,0xf
    1514:	00d87833          	and	a6,a6,a3
    1518:	01070733          	add	a4,a4,a6
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
    151c:	01071713          	slli	a4,a4,0x10
    1520:	01075713          	srli	a4,a4,0x10
    1524:	00171713          	slli	a4,a4,0x1
    1528:	68070713          	addi	a4,a4,1664
    152c:	02d74733          	div	a4,a4,a3
      msg[i] |= t << j;
    1530:	00177713          	andi	a4,a4,1
    1534:	00771713          	slli	a4,a4,0x7
    1538:	00e7e7b3          	or	a5,a5,a4
    153c:	fef50fa3          	sb	a5,-1(a0)
  for(i=0;i<KYBER_N/8;i++) {
    1540:	e4b61ee3          	bne	a2,a1,139c <pqcrystals_kyber512_ref_poly_tomsg+0xc>
    }
  }
}
    1544:	00008067          	ret

00001548 <pqcrystals_kyber512_ref_poly_getnoise_eta1>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
    1548:	f3010113          	addi	sp,sp,-208
    154c:	0c812423          	sw	s0,200(sp)
    1550:	00060693          	mv	a3,a2
    1554:	00050413          	mv	s0,a0
  uint8_t buf[KYBER_ETA1*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
    1558:	00058613          	mv	a2,a1
    155c:	00010513          	mv	a0,sp
    1560:	0c000593          	li	a1,192
{
    1564:	0c112623          	sw	ra,204(sp)
  prf(buf, sizeof(buf), seed, nonce);
    1568:	4fc040ef          	jal	ra,5a64 <pqcrystals_kyber512_ref_kyber_shake256_prf>
  poly_cbd_eta1(r, buf);
    156c:	00010593          	mv	a1,sp
    1570:	00040513          	mv	a0,s0
    1574:	4f4000ef          	jal	ra,1a68 <pqcrystals_kyber512_ref_poly_cbd_eta1>
}
    1578:	0cc12083          	lw	ra,204(sp)
    157c:	0c812403          	lw	s0,200(sp)
    1580:	0d010113          	addi	sp,sp,208
    1584:	00008067          	ret

00001588 <pqcrystals_kyber512_ref_poly_getnoise_eta2>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
    1588:	f7010113          	addi	sp,sp,-144
    158c:	08812423          	sw	s0,136(sp)
    1590:	00060693          	mv	a3,a2
    1594:	00050413          	mv	s0,a0
  uint8_t buf[KYBER_ETA2*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
    1598:	00058613          	mv	a2,a1
    159c:	00010513          	mv	a0,sp
    15a0:	08000593          	li	a1,128
{
    15a4:	08112623          	sw	ra,140(sp)
  prf(buf, sizeof(buf), seed, nonce);
    15a8:	4bc040ef          	jal	ra,5a64 <pqcrystals_kyber512_ref_kyber_shake256_prf>
  poly_cbd_eta2(r, buf);
    15ac:	00010593          	mv	a1,sp
    15b0:	00040513          	mv	a0,s0
    15b4:	560000ef          	jal	ra,1b14 <pqcrystals_kyber512_ref_poly_cbd_eta2>
}
    15b8:	08c12083          	lw	ra,140(sp)
    15bc:	08812403          	lw	s0,136(sp)
    15c0:	09010113          	addi	sp,sp,144
    15c4:	00008067          	ret

000015c8 <pqcrystals_kyber512_ref_poly_ntt>:

  uart_send_string("\n\rNTT:");

  asm volatile("csrrs s2, "TICKS_REGISTER", zero");
#endif
  ntt(r->coeffs);
    15c8:	1f80006f          	j	17c0 <pqcrystals_kyber512_ref_ntt>

000015cc <pqcrystals_kyber512_ref_poly_invntt_tomont>:
  uart_send_string("\n\rInverse NTT:");

  asm("csrrs s2, "TICKS_REGISTER", zero");
  #endif

  invntt(r->coeffs);
    15cc:	2b80006f          	j	1884 <pqcrystals_kyber512_ref_invntt>

000015d0 <pqcrystals_kyber512_ref_poly_basemul_montgomery>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_basemul_montgomery(poly *r, const poly *a, const poly *b)
{
    15d0:	fe010113          	addi	sp,sp,-32
    15d4:	00912a23          	sw	s1,20(sp)
    15d8:	01212823          	sw	s2,16(sp)
    15dc:	01312623          	sw	s3,12(sp)
    15e0:	01412423          	sw	s4,8(sp)
    15e4:	01512223          	sw	s5,4(sp)
    15e8:	00112e23          	sw	ra,28(sp)
    15ec:	00812c23          	sw	s0,24(sp)
    15f0:	0000da17          	auipc	s4,0xd
    15f4:	e90a0a13          	addi	s4,s4,-368 # e480 <pqcrystals_kyber512_ref_zetas+0x80>
    15f8:	00450993          	addi	s3,a0,4
    15fc:	00458913          	addi	s2,a1,4
    1600:	00460493          	addi	s1,a2,4
    1604:	0000da97          	auipc	s5,0xd
    1608:	efca8a93          	addi	s5,s5,-260 # e500 <KeccakF_RoundConstants>
  unsigned int i;
  for(i=0;i<KYBER_N/4;i++) {
    basemul(&r->coeffs[4*i], &a->coeffs[4*i], &b->coeffs[4*i], zetas[64+i]);
    160c:	000a1403          	lh	s0,0(s4)
    1610:	ffc48613          	addi	a2,s1,-4
    1614:	ffc90593          	addi	a1,s2,-4
    1618:	ffc98513          	addi	a0,s3,-4
    161c:	00040693          	mv	a3,s0
    1620:	380000ef          	jal	ra,19a0 <pqcrystals_kyber512_ref_basemul>
    basemul(&r->coeffs[4*i+2], &a->coeffs[4*i+2], &b->coeffs[4*i+2], -zetas[64+i]);
    1624:	408006b3          	neg	a3,s0
    1628:	01069693          	slli	a3,a3,0x10
    162c:	00048613          	mv	a2,s1
    1630:	00090593          	mv	a1,s2
    1634:	00098513          	mv	a0,s3
    1638:	4106d693          	srai	a3,a3,0x10
  for(i=0;i<KYBER_N/4;i++) {
    163c:	002a0a13          	addi	s4,s4,2
    basemul(&r->coeffs[4*i+2], &a->coeffs[4*i+2], &b->coeffs[4*i+2], -zetas[64+i]);
    1640:	360000ef          	jal	ra,19a0 <pqcrystals_kyber512_ref_basemul>
  for(i=0;i<KYBER_N/4;i++) {
    1644:	00898993          	addi	s3,s3,8
    1648:	00890913          	addi	s2,s2,8
    164c:	00848493          	addi	s1,s1,8
    1650:	fb5a1ee3          	bne	s4,s5,160c <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x3c>
  }
}
    1654:	01c12083          	lw	ra,28(sp)
    1658:	01812403          	lw	s0,24(sp)
    165c:	01412483          	lw	s1,20(sp)
    1660:	01012903          	lw	s2,16(sp)
    1664:	00c12983          	lw	s3,12(sp)
    1668:	00812a03          	lw	s4,8(sp)
    166c:	00412a83          	lw	s5,4(sp)
    1670:	02010113          	addi	sp,sp,32
    1674:	00008067          	ret

00001678 <pqcrystals_kyber512_ref_poly_tomont>:
*              from normal domain to Montgomery domain
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_tomont(poly *r)
{
    1678:	ff010113          	addi	sp,sp,-16
    167c:	00812423          	sw	s0,8(sp)
    1680:	00912223          	sw	s1,4(sp)
    1684:	01212023          	sw	s2,0(sp)
    1688:	00112623          	sw	ra,12(sp)
    168c:	00050413          	mv	s0,a0
    1690:	20050913          	addi	s2,a0,512
  unsigned int i;
  const int16_t f = (1ULL << 32) % KYBER_Q;
  for(i=0;i<KYBER_N;i++)
    r->coeffs[i] = montgomery_reduce((int32_t)r->coeffs[i]*f);
    1694:	54900493          	li	s1,1353
    1698:	00041503          	lh	a0,0(s0)
  for(i=0;i<KYBER_N;i++)
    169c:	00240413          	addi	s0,s0,2
    r->coeffs[i] = montgomery_reduce((int32_t)r->coeffs[i]*f);
    16a0:	02950533          	mul	a0,a0,s1
    16a4:	5ac000ef          	jal	ra,1c50 <pqcrystals_kyber512_ref_montgomery_reduce>
    16a8:	fea41f23          	sh	a0,-2(s0)
  for(i=0;i<KYBER_N;i++)
    16ac:	ff2416e3          	bne	s0,s2,1698 <pqcrystals_kyber512_ref_poly_tomont+0x20>
}
    16b0:	00c12083          	lw	ra,12(sp)
    16b4:	00812403          	lw	s0,8(sp)
    16b8:	00412483          	lw	s1,4(sp)
    16bc:	00012903          	lw	s2,0(sp)
    16c0:	01010113          	addi	sp,sp,16
    16c4:	00008067          	ret

000016c8 <pqcrystals_kyber512_ref_poly_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *r)
{
    16c8:	ff010113          	addi	sp,sp,-16
    16cc:	00812423          	sw	s0,8(sp)
    16d0:	00912223          	sw	s1,4(sp)
    16d4:	00112623          	sw	ra,12(sp)
    16d8:	00050413          	mv	s0,a0
    16dc:	20050493          	addi	s1,a0,512
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
    16e0:	00041503          	lh	a0,0(s0)
  for(i=0;i<KYBER_N;i++)
    16e4:	00240413          	addi	s0,s0,2
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
    16e8:	590000ef          	jal	ra,1c78 <pqcrystals_kyber512_ref_barrett_reduce>
    16ec:	fea41f23          	sh	a0,-2(s0)
  for(i=0;i<KYBER_N;i++)
    16f0:	fe9418e3          	bne	s0,s1,16e0 <pqcrystals_kyber512_ref_poly_reduce+0x18>
}
    16f4:	00c12083          	lw	ra,12(sp)
    16f8:	00812403          	lw	s0,8(sp)
    16fc:	00412483          	lw	s1,4(sp)
    1700:	01010113          	addi	sp,sp,16
    1704:	00008067          	ret

00001708 <pqcrystals_kyber512_ref_poly_add>:
* Arguments: - poly *r: pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_add(poly *r, const poly *a, const poly *b)
{
    1708:	ff010113          	addi	sp,sp,-16
    170c:	01612623          	sw	s6,12(sp)
    1710:	01712423          	sw	s7,8(sp)

#ifdef FPAU
  register uint32_t coeff0 asm("s6");
  register uint32_t coeff1 asm("s7");
#ifndef STEEL
  asm volatile("nop"); // base addresses update
    1714:	00000013          	nop
    1718:	00000793          	li	a5,0
#ifndef STEEL
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
#endif
    asm volatile("fpau.kyb.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output1 = coeff0 + coeff1*1)
    171c:	00100893          	li	a7,1
  for(i=0;i<KYBER_N;i++) {
    1720:	20000813          	li	a6,512
    coeff0 = a->coeffs[i];
    1724:	00f586b3          	add	a3,a1,a5
    coeff1 = b->coeffs[i];
    1728:	00f60733          	add	a4,a2,a5
    coeff0 = a->coeffs[i];
    172c:	00069b03          	lh	s6,0(a3)
    coeff1 = b->coeffs[i];
    1730:	00071b83          	lh	s7,0(a4)
    asm volatile("nop"); // ORCA
    1734:	00000013          	nop
    asm volatile("nop"); // ORCA
    1738:	00000013          	nop
    asm volatile("nop"); // ORCA
    173c:	00000013          	nop
    asm volatile("fpau.kyb.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output1 = coeff0 + coeff1*1)
    1740:	a11bab33          	fpau.kyb.bf	s6,s7,a7

    r->coeffs[i] = coeff0;
    1744:	00f50733          	add	a4,a0,a5
    1748:	01671023          	sh	s6,0(a4)
  for(i=0;i<KYBER_N;i++) {
    174c:	00278793          	addi	a5,a5,2
    1750:	fd079ae3          	bne	a5,a6,1724 <pqcrystals_kyber512_ref_poly_add+0x1c>
#else // FPAU
    r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
#endif
  }
}
    1754:	00c12b03          	lw	s6,12(sp)
    1758:	00812b83          	lw	s7,8(sp)
    175c:	01010113          	addi	sp,sp,16
    1760:	00008067          	ret

00001764 <pqcrystals_kyber512_ref_poly_sub>:
* Arguments: - poly *r:       pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_sub(poly *r, const poly *a, const poly *b)
{
    1764:	ff010113          	addi	sp,sp,-16
    1768:	01612623          	sw	s6,12(sp)
    176c:	01712423          	sw	s7,8(sp)
    1770:	00000793          	li	a5,0
#ifndef STEEL
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
#endif
    asm volatile("fpau.kyb.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output2 = coeff0 - coeff1*1)
    1774:	00100893          	li	a7,1
  for(i=0;i<KYBER_N;i++){
    1778:	20000813          	li	a6,512
    coeff0 = a->coeffs[i];
    177c:	00f586b3          	add	a3,a1,a5
    coeff1 = b->coeffs[i];
    1780:	00f60733          	add	a4,a2,a5
    coeff0 = a->coeffs[i];
    1784:	00069b03          	lh	s6,0(a3)
    coeff1 = b->coeffs[i];
    1788:	00071b83          	lh	s7,0(a4)
    asm volatile("nop"); // ORCA
    178c:	00000013          	nop
    asm volatile("nop"); // ORCA
    1790:	00000013          	nop
    asm volatile("nop"); // ORCA
    1794:	00000013          	nop
    asm volatile("fpau.kyb.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output2 = coeff0 - coeff1*1)
    1798:	a11bab33          	fpau.kyb.bf	s6,s7,a7

    asm volatile("nop"); // ORCA and STEEL (2nd output written in next cycle)
    179c:	00000013          	nop

    r->coeffs[i] = coeff1;
    17a0:	00f50733          	add	a4,a0,a5
    17a4:	01771023          	sh	s7,0(a4)
  for(i=0;i<KYBER_N;i++){
    17a8:	00278793          	addi	a5,a5,2
    17ac:	fd0798e3          	bne	a5,a6,177c <pqcrystals_kyber512_ref_poly_sub+0x18>
#else // FPAU
    r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
#endif
  }
}
    17b0:	00c12b03          	lw	s6,12(sp)
    17b4:	00812b83          	lw	s7,8(sp)
    17b8:	01010113          	addi	sp,sp,16
    17bc:	00008067          	ret

000017c0 <pqcrystals_kyber512_ref_ntt>:
* Description: Inplace number-theoretic transform (NTT) in Rq.
*              input is in standard order, output is in bitreversed order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void ntt(int16_t r[256]) {
    17c0:	fe010113          	addi	sp,sp,-32
    17c4:	01312c23          	sw	s3,24(sp)
    17c8:	01912623          	sw	s9,12(sp)
    17cc:	01212e23          	sw	s2,28(sp)
    17d0:	01612a23          	sw	s6,20(sp)
    17d4:	01712823          	sw	s7,16(sp)
#else
  unsigned int len, start, j, k;
  int16_t t, zeta;
#endif

  k = 1;
    17d8:	00100993          	li	s3,1
  for(len = 128; len >= 2; len >>= 1) {
    17dc:	08000c93          	li	s9,128
    17e0:	0000d697          	auipc	a3,0xd
    17e4:	c2068693          	addi	a3,a3,-992 # e400 <pqcrystals_kyber512_ref_zetas>
    for(start = 0; start < 256; start = j + len) {
    17e8:	0ff00613          	li	a2,255
  for(len = 128; len >= 2; len >>= 1) {
    17ec:	00100593          	li	a1,1
    for(start = 0; start < 256; start = j + len) {
    17f0:	00000913          	li	s2,0
      zeta = zetas[k++];
    17f4:	00199713          	slli	a4,s3,0x1
    17f8:	00e68733          	add	a4,a3,a4
      for(j = start; j < start + len; j++) {
    17fc:	012c87b3          	add	a5,s9,s2
      zeta = zetas[k++];
    1800:	00071703          	lh	a4,0(a4)
    1804:	00198993          	addi	s3,s3,1
      for(j = start; j < start + len; j++) {
    1808:	06f97a63          	bgeu	s2,a5,187c <pqcrystals_kyber512_ref_ntt+0xbc>
#ifdef FPAU
        //coeff0 = a[j];
        //coeff1 = a[j + len];

        // load coeff0
        asm volatile("mv t0, s2");
    180c:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x1");
    1810:	00129293          	slli	t0,t0,0x1
        asm volatile("add t0, a0, t0");
    1814:	005502b3          	add	t0,a0,t0
        asm volatile("lh s6, 0(t0)");
    1818:	00029b03          	lh	s6,0(t0)

        // load coeff1
        asm volatile("add t1, s2, s9");
    181c:	01990333          	add	t1,s2,s9
        asm volatile("slli t1, t1, 0x1");
    1820:	00131313          	slli	t1,t1,0x1
        asm volatile("add t1, a0, t1");
    1824:	00650333          	add	t1,a0,t1
        asm volatile("lh s7, 0(t1)");
    1828:	00031b83          	lh	s7,0(t1)

        // Compute butterfly operation
#ifndef STEEL
        asm volatile("nop"); // ORCA
    182c:	00000013          	nop
        asm volatile("nop"); // ORCA
    1830:	00000013          	nop
        asm volatile("nop"); // ORCA
    1834:	00000013          	nop
#endif
        asm volatile("fpau.kyb.bf %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(zeta): );
    1838:	a0ebab33          	fpau.kyb.bf	s6,s7,a4

        // Store results in same position
        asm volatile("sh s6, 0(t0)");
    183c:	01629023          	sh	s6,0(t0)
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    1840:	00000013          	nop
        asm volatile("sh s7, 0(t1)");
    1844:	01731023          	sh	s7,0(t1)
      for(j = start; j < start + len; j++) {
    1848:	00190913          	addi	s2,s2,1
    184c:	fcf960e3          	bltu	s2,a5,180c <pqcrystals_kyber512_ref_ntt+0x4c>
    for(start = 0; start < 256; start = j + len) {
    1850:	01990933          	add	s2,s2,s9
    1854:	fb2670e3          	bgeu	a2,s2,17f4 <pqcrystals_kyber512_ref_ntt+0x34>
  for(len = 128; len >= 2; len >>= 1) {
    1858:	001cdc93          	srli	s9,s9,0x1
    185c:	f995eae3          	bltu	a1,s9,17f0 <pqcrystals_kyber512_ref_ntt+0x30>
        r[j] = r[j] + t;
#endif
      }
    }
  }
}
    1860:	01c12903          	lw	s2,28(sp)
    1864:	01812983          	lw	s3,24(sp)
    1868:	01412b03          	lw	s6,20(sp)
    186c:	01012b83          	lw	s7,16(sp)
    1870:	00c12c83          	lw	s9,12(sp)
    1874:	02010113          	addi	sp,sp,32
    1878:	00008067          	ret
      for(j = start; j < start + len; j++) {
    187c:	00078913          	mv	s2,a5
    1880:	f75ff06f          	j	17f4 <pqcrystals_kyber512_ref_ntt+0x34>

00001884 <pqcrystals_kyber512_ref_invntt>:
*              multiplication by Montgomery factor 2^16.
*              Input is in bitreversed order, output is in standard order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void invntt(int16_t r[256]) {
    1884:	fe010113          	addi	sp,sp,-32
    1888:	01312c23          	sw	s3,24(sp)
    188c:	01912623          	sw	s9,12(sp)
    1890:	00050593          	mv	a1,a0
    1894:	01212e23          	sw	s2,28(sp)
    1898:	01612a23          	sw	s6,20(sp)
    189c:	01712823          	sw	s7,16(sp)
  unsigned int start, len, j, k;
  int16_t t, zeta;
  const int16_t f = 1441; // mont^2/128
#endif

  k = 127;
    18a0:	07f00993          	li	s3,127
  for(len = 2; len <= 128; len <<= 1) {
    18a4:	00200c93          	li	s9,2
    18a8:	0000d697          	auipc	a3,0xd
    18ac:	b5868693          	addi	a3,a3,-1192 # e400 <pqcrystals_kyber512_ref_zetas>
    for(start = 0; start < 256; start = j + len) {
    18b0:	0ff00613          	li	a2,255
  for(len = 2; len <= 128; len <<= 1) {
    18b4:	08000513          	li	a0,128
    for(start = 0; start < 256; start = j + len) {
    18b8:	00000913          	li	s2,0
      zeta = -zetas[k--];
    18bc:	00199793          	slli	a5,s3,0x1
    18c0:	00f687b3          	add	a5,a3,a5
    18c4:	00079703          	lh	a4,0(a5)
      for(j = start; j < start + len; j++) {
    18c8:	012c87b3          	add	a5,s9,s2
      zeta = -zetas[k--];
    18cc:	fff98993          	addi	s3,s3,-1
    18d0:	40e00733          	neg	a4,a4
      for(j = start; j < start + len; j++) {
    18d4:	0cf97263          	bgeu	s2,a5,1998 <pqcrystals_kyber512_ref_invntt+0x114>
#ifdef FPAU
        //coeff0 = a[j];
        //coeff1 = a[j + len];

        // load coeff0
        asm volatile("mv t0, s2");
    18d8:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x1");
    18dc:	00129293          	slli	t0,t0,0x1
        asm volatile("add t0, a1, t0");
    18e0:	005582b3          	add	t0,a1,t0
        asm volatile("lh s6, 0(t0)");
    18e4:	00029b03          	lh	s6,0(t0)

        // load coeff1
        asm volatile("add t1, s2, s9");
    18e8:	01990333          	add	t1,s2,s9
        asm volatile("slli t1, t1, 0x1");
    18ec:	00131313          	slli	t1,t1,0x1
        asm volatile("add t1, a1, t1");
    18f0:	00658333          	add	t1,a1,t1
        asm volatile("lh s7, 0(t1)");
    18f4:	00031b83          	lh	s7,0(t1)

        // Compute butterfly operation
#ifndef STEEL
        asm volatile("nop"); // ORCA
    18f8:	00000013          	nop
        asm volatile("nop"); // ORCA
    18fc:	00000013          	nop
        asm volatile("nop"); // ORCA
    1900:	00000013          	nop
#endif
        asm volatile("fpau.kyb.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(zeta): );
    1904:	b0ebab33          	fpau.kyb.bfinv	s6,s7,a4

        // Store results in same position
        asm volatile("sh s6, 0(t0)");
    1908:	01629023          	sh	s6,0(t0)
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    190c:	00000013          	nop
        asm volatile("sh s7, 0(t1)");
    1910:	01731023          	sh	s7,0(t1)
      for(j = start; j < start + len; j++) {
    1914:	00190913          	addi	s2,s2,1
    1918:	fcf960e3          	bltu	s2,a5,18d8 <pqcrystals_kyber512_ref_invntt+0x54>
    for(start = 0; start < 256; start = j + len) {
    191c:	01990933          	add	s2,s2,s9
    1920:	f9267ee3          	bgeu	a2,s2,18bc <pqcrystals_kyber512_ref_invntt+0x38>
  for(len = 2; len <= 128; len <<= 1) {
    1924:	001c9c93          	slli	s9,s9,0x1
    1928:	f99578e3          	bgeu	a0,s9,18b8 <pqcrystals_kyber512_ref_invntt+0x34>

  for(j = 0; j < KYBER_N; ++j) {
    // load coeff
    coeff0 = r[j];
    //coeff1 = ninv; //needed since s7 is overwritten by FPAU
    asm volatile("mv %0, %1\n": "=r"(coeff1) : "r"(ninv) :);
    192c:	000016b7          	lui	a3,0x1
  for(j = 0; j < KYBER_N; ++j) {
    1930:	00000913          	li	s2,0
    1934:	00000793          	li	a5,0
    asm volatile("mv %0, %1\n": "=r"(coeff1) : "r"(ninv) :);
    1938:	ce768693          	addi	a3,a3,-793 # ce7 <pqcrystals_kyber512_ref_polyvec_compress+0x2f>
  for(j = 0; j < KYBER_N; ++j) {
    193c:	0ff00613          	li	a2,255
    coeff0 = r[j];
    1940:	00179793          	slli	a5,a5,0x1
    1944:	00f587b3          	add	a5,a1,a5
    1948:	00079b03          	lh	s6,0(a5)
    asm volatile("mv %0, %1\n": "=r"(coeff1) : "r"(ninv) :);
    194c:	00068b93          	mv	s7,a3

    // multiply by ninv
#ifndef STEEL
    asm volatile("nop"); // ORCA
    1950:	00000013          	nop
    asm volatile("nop"); // ORCA
    1954:	00000013          	nop
    asm volatile("nop"); // ORCA
    1958:	00000013          	nop
#endif
    asm volatile("fpau.kyb.mac %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(zero): );
    195c:	900bab33          	fpau.kyb.mac	s6,s7,zero
#ifndef STEEL
    asm volatile("nop"); // ORCA
    1960:	00000013          	nop
#endif

    // store result
    r[j] = coeff0;
    1964:	00191793          	slli	a5,s2,0x1
    1968:	00f58733          	add	a4,a1,a5
    196c:	01671023          	sh	s6,0(a4)
  for(j = 0; j < KYBER_N; ++j) {
    1970:	00190793          	addi	a5,s2,1
    1974:	00078913          	mv	s2,a5
    1978:	fcf674e3          	bgeu	a2,a5,1940 <pqcrystals_kyber512_ref_invntt+0xbc>
  }
#else
  for(j = 0; j < 256; j++)
    r[j] = fqmul(r[j], f);
#endif
}
    197c:	01c12903          	lw	s2,28(sp)
    1980:	01812983          	lw	s3,24(sp)
    1984:	01412b03          	lw	s6,20(sp)
    1988:	01012b83          	lw	s7,16(sp)
    198c:	00c12c83          	lw	s9,12(sp)
    1990:	02010113          	addi	sp,sp,32
    1994:	00008067          	ret
      for(j = start; j < start + len; j++) {
    1998:	00078913          	mv	s2,a5
    199c:	f21ff06f          	j	18bc <pqcrystals_kyber512_ref_invntt+0x38>

000019a0 <pqcrystals_kyber512_ref_basemul>:
*              - const int16_t a[2]: pointer to the first factor
*              - const int16_t b[2]: pointer to the second factor
*              - int16_t zeta: integer defining the reduction polynomial
**************************************************/
void basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta)
{
    19a0:	fd010113          	addi	sp,sp,-48
    19a4:	02912623          	sw	s1,44(sp)
    19a8:	03212423          	sw	s2,40(sp)
    19ac:	03312223          	sw	s3,36(sp)
    19b0:	03412023          	sw	s4,32(sp)
  // not specifying registers doesn't work since compiler reuses same registers in all mac instructions (sees no outputs in asm extended)
  // if defining output in asm extended, same register is used for second argument, -O3 build simply eliminates this function
  //uint32_t a0, a1, b0, b1;     
  //uint32_t a0c, a1c, b0c, b1c; 

  a0  = a[0];
    19b4:	00059483          	lh	s1,0(a1)
  a0c = a[0]; // copies needed since FPAU overwrites both input registers
  a1  = a[1];
    19b8:	00259903          	lh	s2,2(a1)
  a1c = a[1];
  b0  = b[0];
    19bc:	00061983          	lh	s3,0(a2)
  b0c = b[0];
  b1  = b[1];
    19c0:	00261a03          	lh	s4,2(a2)
{
    19c4:	01512e23          	sw	s5,28(sp)
    19c8:	01612c23          	sw	s6,24(sp)
    19cc:	01712a23          	sw	s7,20(sp)
    19d0:	01812823          	sw	s8,16(sp)
    19d4:	01912623          	sw	s9,12(sp)
  a0c = a[0]; // copies needed since FPAU overwrites both input registers
    19d8:	00048a93          	mv	s5,s1
  a1c = a[1];
    19dc:	00090b13          	mv	s6,s2
  b0c = b[0];
    19e0:	00098b93          	mv	s7,s3
  b1c = b[1];
    19e4:	000a0c13          	mv	s8,s4
  zetac = zeta;
    19e8:	00068c93          	mv	s9,a3

  asm volatile("fpau.kyb.mac %0, %1, %2\n": : "r"(a1), "r"(b1),"r"(zero): );     // a1*b1
    19ec:	900a2933          	fpau.kyb.mac	s2,s4,zero
#ifndef STEEL
  asm volatile("nop");                        // ORCA
    19f0:	00000013          	nop
  asm volatile("nop");                        // ORCA
    19f4:	00000013          	nop
  asm volatile("nop");                        // ORCA
    19f8:	00000013          	nop
  asm volatile("nop");                        // ORCA
    19fc:	00000013          	nop
#endif
  asm volatile("fpau.kyb.mac %0, %1, %2\n": : "r"(zetac), "r"(a1),"r"(zero): );  // a1*b1*zeta
    1a00:	90092cb3          	fpau.kyb.mac	s9,s2,zero
#ifndef STEEL
  asm volatile("nop");                        // ORCA
    1a04:	00000013          	nop
  asm volatile("nop");                        // ORCA
    1a08:	00000013          	nop
  asm volatile("nop");                        // ORCA
    1a0c:	00000013          	nop
  asm volatile("nop");                        // ORCA
    1a10:	00000013          	nop
#endif
  asm volatile("fpau.kyb.mac %0, %1, %2\n": : "r"(a0), "r"(b0),"r"(zetac): ); // a1*b1*zeta + a0*b0
    1a14:	9199a4b3          	fpau.kyb.mac	s1,s3,s9

  r[0] = a0;
    1a18:	00951023          	sh	s1,0(a0)

#ifndef STEEL
  asm volatile("nop");                        // ORCA (wait for FPAU to be free in decode stage)
    1a1c:	00000013          	nop
#endif

  asm volatile("fpau.kyb.mac %0, %1, %2\n": : "r"(a0c), "r"(b1c),"r"(zero): );   // a0*b1
    1a20:	900c2ab3          	fpau.kyb.mac	s5,s8,zero
#ifndef STEEL
  asm volatile("nop");                        // ORCA
    1a24:	00000013          	nop
  asm volatile("nop");                        // ORCA
    1a28:	00000013          	nop
  asm volatile("nop");                        // ORCA
    1a2c:	00000013          	nop
  asm volatile("nop");                        // ORCA
    1a30:	00000013          	nop
#endif
  asm volatile("fpau.kyb.mac %0, %1, %2\n": : "r"(a1c), "r"(b0c),"r"(a0c): ); // a0*b1 + a1*b0
    1a34:	915bab33          	fpau.kyb.mac	s6,s7,s5

  //r[1] = a1c;
  asm volatile("sh s6, 2(a0)"); // specify to use a1c, since compiler doesn't see that a1c is changed and uses a1 instead
    1a38:	01651123          	sh	s6,2(a0)
  r[0]  = fqmul(r[0], zeta);
  r[0] += fqmul(a[0], b[0]);
  r[1]  = fqmul(a[0], b[1]);
  r[1] += fqmul(a[1], b[0]);
#endif // FPAU
}
    1a3c:	02c12483          	lw	s1,44(sp)
    1a40:	02812903          	lw	s2,40(sp)
    1a44:	02412983          	lw	s3,36(sp)
    1a48:	02012a03          	lw	s4,32(sp)
    1a4c:	01c12a83          	lw	s5,28(sp)
    1a50:	01812b03          	lw	s6,24(sp)
    1a54:	01412b83          	lw	s7,20(sp)
    1a58:	01012c03          	lw	s8,16(sp)
    1a5c:	00c12c83          	lw	s9,12(sp)
    1a60:	03010113          	addi	sp,sp,48
    1a64:	00008067          	ret

00001a68 <pqcrystals_kyber512_ref_poly_cbd_eta1>:
  uint32_t t,d;
  int16_t a,b;

  for(i=0;i<KYBER_N/4;i++) {
    t  = load24_littleendian(buf+3*i);
    d  = t & 0x00249249;
    1a68:	00249337          	lui	t1,0x249
    1a6c:	0c058e13          	addi	t3,a1,192
    1a70:	24930313          	addi	t1,t1,585 # 249249 <_end_of_memory+0x229249>
  r |= (uint32_t)x[1] << 8;
    1a74:	0015c703          	lbu	a4,1(a1)
  r |= (uint32_t)x[2] << 16;
    1a78:	0025c783          	lbu	a5,2(a1)
  r  = (uint32_t)x[0];
    1a7c:	0005c683          	lbu	a3,0(a1)
  r |= (uint32_t)x[1] << 8;
    1a80:	00871713          	slli	a4,a4,0x8
  r |= (uint32_t)x[2] << 16;
    1a84:	01079793          	slli	a5,a5,0x10
    1a88:	00f76733          	or	a4,a4,a5
    1a8c:	00d76733          	or	a4,a4,a3
    d += (t>>1) & 0x00249249;
    1a90:	00175793          	srli	a5,a4,0x1
    d += (t>>2) & 0x00249249;
    1a94:	00275693          	srli	a3,a4,0x2
    1a98:	0066f6b3          	and	a3,a3,t1
    d += (t>>1) & 0x00249249;
    1a9c:	0067f7b3          	and	a5,a5,t1
    d  = t & 0x00249249;
    1aa0:	00677733          	and	a4,a4,t1
    d += (t>>2) & 0x00249249;
    1aa4:	00d787b3          	add	a5,a5,a3
    1aa8:	00e787b3          	add	a5,a5,a4

    for(j=0;j<4;j++) {
      a = (d >> (6*j+0)) & 0x7;
      b = (d >> (6*j+3)) & 0x7;
    1aac:	0037df13          	srli	t5,a5,0x3
      a = (d >> (6*j+0)) & 0x7;
    1ab0:	0067d613          	srli	a2,a5,0x6
      b = (d >> (6*j+3)) & 0x7;
    1ab4:	0097de93          	srli	t4,a5,0x9
      a = (d >> (6*j+0)) & 0x7;
    1ab8:	00c7d693          	srli	a3,a5,0xc
      b = (d >> (6*j+3)) & 0x7;
    1abc:	00f7d893          	srli	a7,a5,0xf
      a = (d >> (6*j+0)) & 0x7;
    1ac0:	0127d713          	srli	a4,a5,0x12
    1ac4:	0077f813          	andi	a6,a5,7
      b = (d >> (6*j+3)) & 0x7;
    1ac8:	007f7f13          	andi	t5,t5,7
      a = (d >> (6*j+0)) & 0x7;
    1acc:	00767613          	andi	a2,a2,7
      b = (d >> (6*j+3)) & 0x7;
    1ad0:	007efe93          	andi	t4,t4,7
      a = (d >> (6*j+0)) & 0x7;
    1ad4:	0076f693          	andi	a3,a3,7
      b = (d >> (6*j+3)) & 0x7;
    1ad8:	0078f893          	andi	a7,a7,7
      a = (d >> (6*j+0)) & 0x7;
    1adc:	00777713          	andi	a4,a4,7
      b = (d >> (6*j+3)) & 0x7;
    1ae0:	0157d793          	srli	a5,a5,0x15
      r->coeffs[4*i+j] = a - b;
    1ae4:	41e80833          	sub	a6,a6,t5
    1ae8:	41d60633          	sub	a2,a2,t4
    1aec:	411686b3          	sub	a3,a3,a7
    1af0:	40f707b3          	sub	a5,a4,a5
    1af4:	01051023          	sh	a6,0(a0)
    1af8:	00c51123          	sh	a2,2(a0)
    1afc:	00d51223          	sh	a3,4(a0)
    1b00:	00f51323          	sh	a5,6(a0)
  for(i=0;i<KYBER_N/4;i++) {
    1b04:	00358593          	addi	a1,a1,3
    1b08:	00850513          	addi	a0,a0,8
    1b0c:	f6be14e3          	bne	t3,a1,1a74 <pqcrystals_kyber512_ref_poly_cbd_eta1+0xc>
#elif KYBER_ETA1 == 3
  cbd3(r, buf);
#else
#error "This implementation requires eta1 in {2,3}"
#endif
}
    1b10:	00008067          	ret

00001b14 <pqcrystals_kyber512_ref_poly_cbd_eta2>:

void poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2*KYBER_N/4])
{
    1b14:	fe010113          	addi	sp,sp,-32
    d  = t & 0x55555555;
    1b18:	55555f37          	lui	t5,0x55555
{
    1b1c:	00812e23          	sw	s0,28(sp)
    1b20:	00912c23          	sw	s1,24(sp)
    1b24:	01212a23          	sw	s2,20(sp)
    1b28:	01312823          	sw	s3,16(sp)
    1b2c:	01412623          	sw	s4,12(sp)
    1b30:	20050f93          	addi	t6,a0,512
    d  = t & 0x55555555;
    1b34:	555f0f13          	addi	t5,t5,1365 # 55555555 <_end_of_memory+0x55535555>
  r |= (uint32_t)x[3] << 24;
    1b38:	0015c683          	lbu	a3,1(a1)
    1b3c:	0005c603          	lbu	a2,0(a1)
    1b40:	0025c783          	lbu	a5,2(a1)
    1b44:	0035c703          	lbu	a4,3(a1)
    1b48:	00869693          	slli	a3,a3,0x8
    1b4c:	00c6e6b3          	or	a3,a3,a2
    1b50:	01079793          	slli	a5,a5,0x10
    1b54:	00d7e7b3          	or	a5,a5,a3
    1b58:	01871713          	slli	a4,a4,0x18
    1b5c:	00f76733          	or	a4,a4,a5
    d += (t>>1) & 0x55555555;
    1b60:	00175793          	srli	a5,a4,0x1
    1b64:	01e7f7b3          	and	a5,a5,t5
    d  = t & 0x55555555;
    1b68:	01e77733          	and	a4,a4,t5
    d += (t>>1) & 0x55555555;
    1b6c:	00e787b3          	add	a5,a5,a4
      b = (d >> (4*j+2)) & 0x3;
    1b70:	0027da13          	srli	s4,a5,0x2
      a = (d >> (4*j+0)) & 0x3;
    1b74:	0047d313          	srli	t1,a5,0x4
      b = (d >> (4*j+2)) & 0x3;
    1b78:	0067d993          	srli	s3,a5,0x6
      a = (d >> (4*j+0)) & 0x3;
    1b7c:	0087d893          	srli	a7,a5,0x8
      b = (d >> (4*j+2)) & 0x3;
    1b80:	00a7d913          	srli	s2,a5,0xa
      a = (d >> (4*j+0)) & 0x3;
    1b84:	00c7d813          	srli	a6,a5,0xc
      b = (d >> (4*j+2)) & 0x3;
    1b88:	00e7d493          	srli	s1,a5,0xe
      a = (d >> (4*j+0)) & 0x3;
    1b8c:	0107d613          	srli	a2,a5,0x10
      b = (d >> (4*j+2)) & 0x3;
    1b90:	0127d413          	srli	s0,a5,0x12
      a = (d >> (4*j+0)) & 0x3;
    1b94:	0147d693          	srli	a3,a5,0x14
      b = (d >> (4*j+2)) & 0x3;
    1b98:	0167d393          	srli	t2,a5,0x16
      a = (d >> (4*j+0)) & 0x3;
    1b9c:	0187d713          	srli	a4,a5,0x18
      b = (d >> (4*j+2)) & 0x3;
    1ba0:	01a7d293          	srli	t0,a5,0x1a
      a = (d >> (4*j+0)) & 0x3;
    1ba4:	01c7de93          	srli	t4,a5,0x1c
    1ba8:	0037fe13          	andi	t3,a5,3
      b = (d >> (4*j+2)) & 0x3;
    1bac:	003a7a13          	andi	s4,s4,3
      a = (d >> (4*j+0)) & 0x3;
    1bb0:	00337313          	andi	t1,t1,3
      b = (d >> (4*j+2)) & 0x3;
    1bb4:	0039f993          	andi	s3,s3,3
      a = (d >> (4*j+0)) & 0x3;
    1bb8:	0038f893          	andi	a7,a7,3
      b = (d >> (4*j+2)) & 0x3;
    1bbc:	00397913          	andi	s2,s2,3
      a = (d >> (4*j+0)) & 0x3;
    1bc0:	00387813          	andi	a6,a6,3
      b = (d >> (4*j+2)) & 0x3;
    1bc4:	0034f493          	andi	s1,s1,3
      a = (d >> (4*j+0)) & 0x3;
    1bc8:	00367613          	andi	a2,a2,3
      b = (d >> (4*j+2)) & 0x3;
    1bcc:	00347413          	andi	s0,s0,3
      a = (d >> (4*j+0)) & 0x3;
    1bd0:	0036f693          	andi	a3,a3,3
      b = (d >> (4*j+2)) & 0x3;
    1bd4:	0033f393          	andi	t2,t2,3
      a = (d >> (4*j+0)) & 0x3;
    1bd8:	00377713          	andi	a4,a4,3
      b = (d >> (4*j+2)) & 0x3;
    1bdc:	0032f293          	andi	t0,t0,3
      a = (d >> (4*j+0)) & 0x3;
    1be0:	003efe93          	andi	t4,t4,3
      b = (d >> (4*j+2)) & 0x3;
    1be4:	01e7d793          	srli	a5,a5,0x1e
      r->coeffs[8*i+j] = a - b;
    1be8:	414e0e33          	sub	t3,t3,s4
    1bec:	41330333          	sub	t1,t1,s3
    1bf0:	412888b3          	sub	a7,a7,s2
    1bf4:	40980833          	sub	a6,a6,s1
    1bf8:	40860633          	sub	a2,a2,s0
    1bfc:	407686b3          	sub	a3,a3,t2
    1c00:	40570733          	sub	a4,a4,t0
    1c04:	40fe87b3          	sub	a5,t4,a5
    1c08:	01c51023          	sh	t3,0(a0)
    1c0c:	00651123          	sh	t1,2(a0)
    1c10:	01151223          	sh	a7,4(a0)
    1c14:	01051323          	sh	a6,6(a0)
    1c18:	00c51423          	sh	a2,8(a0)
    1c1c:	00d51523          	sh	a3,10(a0)
    1c20:	00e51623          	sh	a4,12(a0)
    1c24:	00f51723          	sh	a5,14(a0)
  for(i=0;i<KYBER_N/8;i++) {
    1c28:	01050513          	addi	a0,a0,16
    1c2c:	00458593          	addi	a1,a1,4
    1c30:	f1f514e3          	bne	a0,t6,1b38 <pqcrystals_kyber512_ref_poly_cbd_eta2+0x24>
#if KYBER_ETA2 == 2
  cbd2(r, buf);
#else
#error "This implementation requires eta2 = 2"
#endif
}
    1c34:	01c12403          	lw	s0,28(sp)
    1c38:	01812483          	lw	s1,24(sp)
    1c3c:	01412903          	lw	s2,20(sp)
    1c40:	01012983          	lw	s3,16(sp)
    1c44:	00c12a03          	lw	s4,12(sp)
    1c48:	02010113          	addi	sp,sp,32
    1c4c:	00008067          	ret

00001c50 <pqcrystals_kyber512_ref_montgomery_reduce>:
**************************************************/
int16_t montgomery_reduce(int32_t a)
{
  int16_t t;

  t = (int16_t)a*QINV;
    1c50:	fffff737          	lui	a4,0xfffff
    1c54:	30170793          	addi	a5,a4,769 # fffff301 <_end_of_memory+0xfffdf301>
    1c58:	02f507b3          	mul	a5,a0,a5
  t = (a - (int32_t)t*KYBER_Q) >> 16;
    1c5c:	2ff70713          	addi	a4,a4,767
    1c60:	01079793          	slli	a5,a5,0x10
    1c64:	4107d793          	srai	a5,a5,0x10
    1c68:	02e787b3          	mul	a5,a5,a4
    1c6c:	00a78533          	add	a0,a5,a0
  return t;
}
    1c70:	41055513          	srai	a0,a0,0x10
    1c74:	00008067          	ret

00001c78 <pqcrystals_kyber512_ref_barrett_reduce>:
**************************************************/
int16_t barrett_reduce(int16_t a) {
  int16_t t;
  const int16_t v = ((1<<26) + KYBER_Q/2)/KYBER_Q;

  t  = ((int32_t)v*a + (1<<25)) >> 26;
    1c78:	000057b7          	lui	a5,0x5
    1c7c:	ebf78793          	addi	a5,a5,-321 # 4ebf <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x3b>
    1c80:	02f507b3          	mul	a5,a0,a5
    1c84:	02000737          	lui	a4,0x2000
    1c88:	00e787b3          	add	a5,a5,a4
  t *= KYBER_Q;
    1c8c:	00001737          	lui	a4,0x1
    1c90:	d0170713          	addi	a4,a4,-767 # d01 <pqcrystals_kyber512_ref_polyvec_compress+0x49>
  t  = ((int32_t)v*a + (1<<25)) >> 26;
    1c94:	41a7d793          	srai	a5,a5,0x1a
  t *= KYBER_Q;
    1c98:	02e787b3          	mul	a5,a5,a4
  return a - t;
    1c9c:	40f50533          	sub	a0,a0,a5
}
    1ca0:	01051513          	slli	a0,a0,0x10
    1ca4:	41055513          	srai	a0,a0,0x10
    1ca8:	00008067          	ret

00001cac <pqcrystals_kyber512_ref_verify>:
int verify(const uint8_t *a, const uint8_t *b, size_t len)
{
  size_t i;
  uint8_t r = 0;

  for(i=0;i<len;i++)
    1cac:	10060063          	beqz	a2,1dac <pqcrystals_kyber512_ref_verify+0x100>
    1cb0:	fff60793          	addi	a5,a2,-1
    1cb4:	00700713          	li	a4,7
    1cb8:	00f77863          	bgeu	a4,a5,1cc8 <pqcrystals_kyber512_ref_verify+0x1c>
    1cbc:	00b567b3          	or	a5,a0,a1
    1cc0:	0037f793          	andi	a5,a5,3
    1cc4:	02078863          	beqz	a5,1cf4 <pqcrystals_kyber512_ref_verify+0x48>
    1cc8:	00c50633          	add	a2,a0,a2
  uint8_t r = 0;
    1ccc:	00000713          	li	a4,0
    r |= a[i] ^ b[i];
    1cd0:	0005c783          	lbu	a5,0(a1)
    1cd4:	00054683          	lbu	a3,0(a0)
  for(i=0;i<len;i++)
    1cd8:	00150513          	addi	a0,a0,1
    1cdc:	00158593          	addi	a1,a1,1
    r |= a[i] ^ b[i];
    1ce0:	00d7c7b3          	xor	a5,a5,a3
    1ce4:	00f76733          	or	a4,a4,a5
  for(i=0;i<len;i++)
    1ce8:	fec514e3          	bne	a0,a2,1cd0 <pqcrystals_kyber512_ref_verify+0x24>

  return (-(uint64_t)r) >> 63;
    1cec:	00e03533          	snez	a0,a4
    1cf0:	00008067          	ret
    1cf4:	ffc67313          	andi	t1,a2,-4
    1cf8:	00050793          	mv	a5,a0
    1cfc:	00058693          	mv	a3,a1
    1d00:	00a30333          	add	t1,t1,a0
  for(i=0;i<len;i++)
    1d04:	00000813          	li	a6,0
    r |= a[i] ^ b[i];
    1d08:	0006a703          	lw	a4,0(a3)
    1d0c:	0007a883          	lw	a7,0(a5)
    1d10:	00478793          	addi	a5,a5,4
    1d14:	00468693          	addi	a3,a3,4
    1d18:	01174733          	xor	a4,a4,a7
    1d1c:	01076833          	or	a6,a4,a6
  for(i=0;i<len;i++)
    1d20:	fe6794e3          	bne	a5,t1,1d08 <pqcrystals_kyber512_ref_verify+0x5c>
    1d24:	00885713          	srli	a4,a6,0x8
    1d28:	01085793          	srli	a5,a6,0x10
    1d2c:	00e86733          	or	a4,a6,a4
    1d30:	00f76733          	or	a4,a4,a5
    1d34:	01885813          	srli	a6,a6,0x18
    1d38:	01076733          	or	a4,a4,a6
    1d3c:	00367693          	andi	a3,a2,3
    1d40:	0ff77713          	zext.b	a4,a4
    1d44:	ffc67793          	andi	a5,a2,-4
    1d48:	fa0682e3          	beqz	a3,1cec <pqcrystals_kyber512_ref_verify+0x40>
    r |= a[i] ^ b[i];
    1d4c:	00f586b3          	add	a3,a1,a5
    1d50:	00f50833          	add	a6,a0,a5
    1d54:	0006c883          	lbu	a7,0(a3)
    1d58:	00084803          	lbu	a6,0(a6)
  for(i=0;i<len;i++)
    1d5c:	00178693          	addi	a3,a5,1
    r |= a[i] ^ b[i];
    1d60:	01184833          	xor	a6,a6,a7
    1d64:	01076733          	or	a4,a4,a6
  for(i=0;i<len;i++)
    1d68:	f8c6f2e3          	bgeu	a3,a2,1cec <pqcrystals_kyber512_ref_verify+0x40>
    r |= a[i] ^ b[i];
    1d6c:	00d50833          	add	a6,a0,a3
    1d70:	00d586b3          	add	a3,a1,a3
    1d74:	00084803          	lbu	a6,0(a6)
    1d78:	0006c683          	lbu	a3,0(a3)
  for(i=0;i<len;i++)
    1d7c:	00278793          	addi	a5,a5,2
    r |= a[i] ^ b[i];
    1d80:	00d846b3          	xor	a3,a6,a3
    1d84:	00d76733          	or	a4,a4,a3
  for(i=0;i<len;i++)
    1d88:	f6c7f2e3          	bgeu	a5,a2,1cec <pqcrystals_kyber512_ref_verify+0x40>
    r |= a[i] ^ b[i];
    1d8c:	00f585b3          	add	a1,a1,a5
    1d90:	00f507b3          	add	a5,a0,a5
    1d94:	0005c683          	lbu	a3,0(a1)
    1d98:	0007c783          	lbu	a5,0(a5)
    1d9c:	00f6c7b3          	xor	a5,a3,a5
    1da0:	00f76733          	or	a4,a4,a5
  return (-(uint64_t)r) >> 63;
    1da4:	00e03533          	snez	a0,a4
    1da8:	00008067          	ret
  for(i=0;i<len;i++)
    1dac:	00000513          	li	a0,0
}
    1db0:	00008067          	ret

00001db4 <pqcrystals_kyber512_ref_cmov>:
  // units, but we expect that downstream consumers will copy this code and/or
  // change how it is built.
  __asm__("" : "+r"(b) : /* no inputs */);
#endif

  b = -b;
    1db4:	40d006b3          	neg	a3,a3
    1db8:	0ff6f693          	zext.b	a3,a3
  for(i=0;i<len;i++)
    1dbc:	12060063          	beqz	a2,1edc <pqcrystals_kyber512_ref_cmov+0x128>
    1dc0:	fff60793          	addi	a5,a2,-1
    1dc4:	00300713          	li	a4,3
    1dc8:	0ef77663          	bgeu	a4,a5,1eb4 <pqcrystals_kyber512_ref_cmov+0x100>
    1dcc:	00b567b3          	or	a5,a0,a1
    1dd0:	0037f793          	andi	a5,a5,3
    1dd4:	0e079063          	bnez	a5,1eb4 <pqcrystals_kyber512_ref_cmov+0x100>
    1dd8:	00158793          	addi	a5,a1,1
    1ddc:	40f507b3          	sub	a5,a0,a5
    1de0:	0037b793          	sltiu	a5,a5,3
    1de4:	0c079863          	bnez	a5,1eb4 <pqcrystals_kyber512_ref_cmov+0x100>
    1de8:	00869313          	slli	t1,a3,0x8
    1dec:	01069713          	slli	a4,a3,0x10
    1df0:	0066e333          	or	t1,a3,t1
    1df4:	00e36333          	or	t1,t1,a4
    1df8:	01869793          	slli	a5,a3,0x18
    1dfc:	ffc67e13          	andi	t3,a2,-4
    1e00:	00f36333          	or	t1,t1,a5
    1e04:	00050713          	mv	a4,a0
    1e08:	00058813          	mv	a6,a1
    1e0c:	00ae0e33          	add	t3,t3,a0
    r[i] ^= b & (r[i] ^ x[i]);
    1e10:	00072883          	lw	a7,0(a4)
    1e14:	00082783          	lw	a5,0(a6)
    1e18:	00470713          	addi	a4,a4,4
    1e1c:	00480813          	addi	a6,a6,4
    1e20:	00f8c7b3          	xor	a5,a7,a5
    1e24:	0067f7b3          	and	a5,a5,t1
    1e28:	0117c7b3          	xor	a5,a5,a7
    1e2c:	fef72e23          	sw	a5,-4(a4)
  for(i=0;i<len;i++)
    1e30:	ffc710e3          	bne	a4,t3,1e10 <pqcrystals_kyber512_ref_cmov+0x5c>
    1e34:	00367713          	andi	a4,a2,3
    1e38:	ffc67793          	andi	a5,a2,-4
    1e3c:	0a070063          	beqz	a4,1edc <pqcrystals_kyber512_ref_cmov+0x128>
    r[i] ^= b & (r[i] ^ x[i]);
    1e40:	00f508b3          	add	a7,a0,a5
    1e44:	00f58733          	add	a4,a1,a5
    1e48:	0008c303          	lbu	t1,0(a7)
    1e4c:	00074703          	lbu	a4,0(a4)
  for(i=0;i<len;i++)
    1e50:	00178813          	addi	a6,a5,1
    r[i] ^= b & (r[i] ^ x[i]);
    1e54:	00e34733          	xor	a4,t1,a4
    1e58:	00e6f733          	and	a4,a3,a4
    1e5c:	00e34333          	xor	t1,t1,a4
    1e60:	00688023          	sb	t1,0(a7)
  for(i=0;i<len;i++)
    1e64:	06c87c63          	bgeu	a6,a2,1edc <pqcrystals_kyber512_ref_cmov+0x128>
    r[i] ^= b & (r[i] ^ x[i]);
    1e68:	01050333          	add	t1,a0,a6
    1e6c:	01058833          	add	a6,a1,a6
    1e70:	00034883          	lbu	a7,0(t1)
    1e74:	00084703          	lbu	a4,0(a6)
  for(i=0;i<len;i++)
    1e78:	00278793          	addi	a5,a5,2
    r[i] ^= b & (r[i] ^ x[i]);
    1e7c:	00e8c733          	xor	a4,a7,a4
    1e80:	00e6f733          	and	a4,a3,a4
    1e84:	00e8c8b3          	xor	a7,a7,a4
    1e88:	01130023          	sb	a7,0(t1)
  for(i=0;i<len;i++)
    1e8c:	04c7f863          	bgeu	a5,a2,1edc <pqcrystals_kyber512_ref_cmov+0x128>
    r[i] ^= b & (r[i] ^ x[i]);
    1e90:	00f50533          	add	a0,a0,a5
    1e94:	00f587b3          	add	a5,a1,a5
    1e98:	00054703          	lbu	a4,0(a0)
    1e9c:	0007c783          	lbu	a5,0(a5)
    1ea0:	00f747b3          	xor	a5,a4,a5
    1ea4:	00f6f7b3          	and	a5,a3,a5
    1ea8:	00f74733          	xor	a4,a4,a5
    1eac:	00e50023          	sb	a4,0(a0)
  for(i=0;i<len;i++)
    1eb0:	00008067          	ret
    1eb4:	00c50633          	add	a2,a0,a2
    r[i] ^= b & (r[i] ^ x[i]);
    1eb8:	00054703          	lbu	a4,0(a0)
    1ebc:	0005c783          	lbu	a5,0(a1)
  for(i=0;i<len;i++)
    1ec0:	00150513          	addi	a0,a0,1
    1ec4:	00158593          	addi	a1,a1,1
    r[i] ^= b & (r[i] ^ x[i]);
    1ec8:	00f747b3          	xor	a5,a4,a5
    1ecc:	00f6f7b3          	and	a5,a3,a5
    1ed0:	00f74733          	xor	a4,a4,a5
    1ed4:	fee50fa3          	sb	a4,-1(a0)
  for(i=0;i<len;i++)
    1ed8:	fec510e3          	bne	a0,a2,1eb8 <pqcrystals_kyber512_ref_cmov+0x104>
}
    1edc:	00008067          	ret

00001ee0 <itoa>:
char str[21] = {0};
char* pbuf = &str[0];

void itoa(char *buf, unsigned int d, int base)
{
	int div = 1;
    1ee0:	00100793          	li	a5,1
	while (d/div >= base)
    1ee4:	04c5ea63          	bltu	a1,a2,1f38 <itoa+0x58>
		div *= base;
    1ee8:	02c787b3          	mul	a5,a5,a2
	while (d/div >= base)
    1eec:	02f5d6b3          	divu	a3,a1,a5
    1ef0:	fec6fce3          	bgeu	a3,a2,1ee8 <itoa+0x8>

	while (div != 0)
    1ef4:	02078e63          	beqz	a5,1f30 <itoa+0x50>
	{
		int num = d/div;
		d = d%div;
		div /= base;
		if (num > 9)
    1ef8:	00900893          	li	a7,9
    1efc:	0080006f          	j	1f04 <itoa+0x24>
    1f00:	02f5d6b3          	divu	a3,a1,a5
			*(buf++) = (num-10) + 'A';
    1f04:	0ff6f713          	zext.b	a4,a3
    1f08:	03770813          	addi	a6,a4,55
		else
			*(buf++) = num + '0';
    1f0c:	03070713          	addi	a4,a4,48
			*(buf++) = (num-10) + 'A';
    1f10:	00150513          	addi	a0,a0,1
			*(buf++) = num + '0';
    1f14:	0ff77713          	zext.b	a4,a4
		d = d%div;
    1f18:	02f5f5b3          	remu	a1,a1,a5
		div /= base;
    1f1c:	02c7c7b3          	div	a5,a5,a2
		if (num > 9)
    1f20:	00d8d463          	bge	a7,a3,1f28 <itoa+0x48>
			*(buf++) = (num-10) + 'A';
    1f24:	0ff87713          	zext.b	a4,a6
    1f28:	fee50fa3          	sb	a4,-1(a0)
	while (div != 0)
    1f2c:	fc079ae3          	bnez	a5,1f00 <itoa+0x20>
	}
  *(buf++) = '\0';
    1f30:	00050023          	sb	zero,0(a0)
}
    1f34:	00008067          	ret
    1f38:	00058693          	mv	a3,a1
    1f3c:	fbdff06f          	j	1ef8 <itoa+0x18>

00001f40 <print_runtime>:

void print_runtime(unsigned int cycle_start, unsigned int cycle_end)
{
  unsigned int clock_cycles = cycle_end - cycle_start;

  itoa(pbuf, cycle_start, 10);
    1f40:	0000d817          	auipc	a6,0xd
    1f44:	8b880813          	addi	a6,a6,-1864 # e7f8 <pbuf>
	while (d/div >= base)
    1f48:	00900793          	li	a5,9
  itoa(pbuf, cycle_start, 10);
    1f4c:	00082883          	lw	a7,0(a6)
  unsigned int clock_cycles = cycle_end - cycle_start;
    1f50:	40a58633          	sub	a2,a1,a0
	while (d/div >= base)
    1f54:	24a7f063          	bgeu	a5,a0,2194 <print_runtime+0x254>
	int div = 1;
    1f58:	00100793          	li	a5,1
	while (d/div >= base)
    1f5c:	00900693          	li	a3,9
		div *= base;
    1f60:	00279713          	slli	a4,a5,0x2
    1f64:	00f707b3          	add	a5,a4,a5
    1f68:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    1f6c:	02f55733          	divu	a4,a0,a5
    1f70:	fee6e8e3          	bltu	a3,a4,1f60 <print_runtime+0x20>
		div /= base;
    1f74:	00a00e93          	li	t4,10
		if (num > 9)
    1f78:	00900e13          	li	t3,9
		int num = d/div;
    1f7c:	02f55333          	divu	t1,a0,a5
			*(buf++) = (num-10) + 'A';
    1f80:	00188893          	addi	a7,a7,1
    1f84:	0ff37693          	zext.b	a3,t1
    1f88:	03768713          	addi	a4,a3,55
		d = d%div;
    1f8c:	02f57533          	remu	a0,a0,a5
			*(buf++) = num + '0';
    1f90:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    1f94:	0ff77713          	zext.b	a4,a4
		div /= base;
    1f98:	03d7c7b3          	div	a5,a5,t4
		if (num > 9)
    1f9c:	006e4463          	blt	t3,t1,1fa4 <print_runtime+0x64>
			*(buf++) = num + '0';
    1fa0:	0ff6f713          	zext.b	a4,a3
    1fa4:	fee88fa3          	sb	a4,-1(a7)
	while (div != 0)
    1fa8:	fc079ae3          	bnez	a5,1f7c <print_runtime+0x3c>
  *(buf++) = '\0';
    1fac:	00088023          	sb	zero,0(a7)
  while (XUartChanged_IsTransmitFull(BaseAddress));
  X_mWriteReg(BaseAddress, PS7_UART_DATA_OUT_REGISTER, Data);
}

void uart_send_string(char *ptr) {
  while (*ptr) {
    1fb0:	02000513          	li	a0,32
  *(buf++) = '\0';
    1fb4:	0000c697          	auipc	a3,0xc
    1fb8:	74868693          	addi	a3,a3,1864 # e6fc <__clz_tab+0x100>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    1fbc:	e0001737          	lui	a4,0xe0001
    1fc0:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffe102c>
    1fc4:	0107f793          	andi	a5,a5,16
    1fc8:	fe079ce3          	bnez	a5,1fc0 <print_runtime+0x80>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    1fcc:	00168693          	addi	a3,a3,1
    1fd0:	02a72823          	sw	a0,48(a4)
  while (*ptr) {
    1fd4:	0006c503          	lbu	a0,0(a3)
    1fd8:	fe0514e3          	bnez	a0,1fc0 <print_runtime+0x80>
    1fdc:	0000d517          	auipc	a0,0xd
    1fe0:	84850513          	addi	a0,a0,-1976 # e824 <str>
    1fe4:	00054683          	lbu	a3,0(a0)
    1fe8:	00050893          	mv	a7,a0
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    1fec:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    1ff0:	02068063          	beqz	a3,2010 <print_runtime+0xd0>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    1ff4:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffe102c>
    1ff8:	0107f793          	andi	a5,a5,16
    1ffc:	fe079ce3          	bnez	a5,1ff4 <print_runtime+0xb4>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    2000:	00188893          	addi	a7,a7,1
    2004:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    2008:	0008c683          	lbu	a3,0(a7)
    200c:	fe0694e3          	bnez	a3,1ff4 <print_runtime+0xb4>
	while (d/div >= base)
    2010:	00900713          	li	a4,9
  itoa(pbuf, cycle_end, 10);
    2014:	00082883          	lw	a7,0(a6)
	int div = 1;
    2018:	00100793          	li	a5,1
	while (d/div >= base)
    201c:	00900693          	li	a3,9
    2020:	00b77c63          	bgeu	a4,a1,2038 <print_runtime+0xf8>
		div *= base;
    2024:	00279713          	slli	a4,a5,0x2
    2028:	00f707b3          	add	a5,a4,a5
    202c:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    2030:	02f5d733          	divu	a4,a1,a5
    2034:	fee6e8e3          	bltu	a3,a4,2024 <print_runtime+0xe4>
		div /= base;
    2038:	00a00e93          	li	t4,10
		if (num > 9)
    203c:	00900e13          	li	t3,9
		int num = d/div;
    2040:	02f5d333          	divu	t1,a1,a5
			*(buf++) = (num-10) + 'A';
    2044:	00188893          	addi	a7,a7,1
    2048:	0ff37693          	zext.b	a3,t1
    204c:	03768713          	addi	a4,a3,55
		d = d%div;
    2050:	02f5f5b3          	remu	a1,a1,a5
			*(buf++) = num + '0';
    2054:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    2058:	0ff77713          	zext.b	a4,a4
		div /= base;
    205c:	03d7c7b3          	div	a5,a5,t4
		if (num > 9)
    2060:	006e4463          	blt	t3,t1,2068 <print_runtime+0x128>
			*(buf++) = num + '0';
    2064:	0ff6f713          	zext.b	a4,a3
    2068:	fee88fa3          	sb	a4,-1(a7)
	while (div != 0)
    206c:	fc079ae3          	bnez	a5,2040 <print_runtime+0x100>
  *(buf++) = '\0';
    2070:	00088023          	sb	zero,0(a7)
  while (*ptr) {
    2074:	02000593          	li	a1,32
  *(buf++) = '\0';
    2078:	0000c697          	auipc	a3,0xc
    207c:	69468693          	addi	a3,a3,1684 # e70c <__clz_tab+0x110>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    2080:	e0001737          	lui	a4,0xe0001
    2084:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffe102c>
    2088:	0107f793          	andi	a5,a5,16
    208c:	fe079ce3          	bnez	a5,2084 <print_runtime+0x144>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    2090:	00168693          	addi	a3,a3,1
    2094:	02b72823          	sw	a1,48(a4)
  while (*ptr) {
    2098:	0006c583          	lbu	a1,0(a3)
    209c:	fe0594e3          	bnez	a1,2084 <print_runtime+0x144>
    20a0:	00054683          	lbu	a3,0(a0)
    20a4:	0000c597          	auipc	a1,0xc
    20a8:	78058593          	addi	a1,a1,1920 # e824 <str>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    20ac:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    20b0:	02068063          	beqz	a3,20d0 <print_runtime+0x190>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    20b4:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffe102c>
    20b8:	0107f793          	andi	a5,a5,16
    20bc:	fe079ce3          	bnez	a5,20b4 <print_runtime+0x174>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    20c0:	00158593          	addi	a1,a1,1
    20c4:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    20c8:	0005c683          	lbu	a3,0(a1)
    20cc:	fe0694e3          	bnez	a3,20b4 <print_runtime+0x174>
	while (d/div >= base)
    20d0:	00900713          	li	a4,9
  itoa(pbuf, clock_cycles, 10);
    20d4:	00082583          	lw	a1,0(a6)
	int div = 1;
    20d8:	00100793          	li	a5,1
	while (d/div >= base)
    20dc:	00900693          	li	a3,9
    20e0:	00c77c63          	bgeu	a4,a2,20f8 <print_runtime+0x1b8>
		div *= base;
    20e4:	00279713          	slli	a4,a5,0x2
    20e8:	00f707b3          	add	a5,a4,a5
    20ec:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    20f0:	02f65733          	divu	a4,a2,a5
    20f4:	fee6e8e3          	bltu	a3,a4,20e4 <print_runtime+0x1a4>
		div /= base;
    20f8:	00a00313          	li	t1,10
		if (num > 9)
    20fc:	00900893          	li	a7,9
		int num = d/div;
    2100:	02f65833          	divu	a6,a2,a5
			*(buf++) = (num-10) + 'A';
    2104:	00158593          	addi	a1,a1,1
    2108:	0ff87693          	zext.b	a3,a6
    210c:	03768713          	addi	a4,a3,55
		d = d%div;
    2110:	02f67633          	remu	a2,a2,a5
			*(buf++) = num + '0';
    2114:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    2118:	0ff77713          	zext.b	a4,a4
		div /= base;
    211c:	0267c7b3          	div	a5,a5,t1
		if (num > 9)
    2120:	0108c463          	blt	a7,a6,2128 <print_runtime+0x1e8>
			*(buf++) = num + '0';
    2124:	0ff6f713          	zext.b	a4,a3
    2128:	fee58fa3          	sb	a4,-1(a1)
	while (div != 0)
    212c:	fc079ae3          	bnez	a5,2100 <print_runtime+0x1c0>
  *(buf++) = '\0';
    2130:	00058023          	sb	zero,0(a1)
  while (*ptr) {
    2134:	02000613          	li	a2,32
  *(buf++) = '\0';
    2138:	0000c697          	auipc	a3,0xc
    213c:	5e468693          	addi	a3,a3,1508 # e71c <__clz_tab+0x120>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    2140:	e0001737          	lui	a4,0xe0001
    2144:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffe102c>
    2148:	0107f793          	andi	a5,a5,16
    214c:	fe079ce3          	bnez	a5,2144 <print_runtime+0x204>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    2150:	00168693          	addi	a3,a3,1
    2154:	02c72823          	sw	a2,48(a4)
  while (*ptr) {
    2158:	0006c603          	lbu	a2,0(a3)
    215c:	fe0614e3          	bnez	a2,2144 <print_runtime+0x204>
    2160:	00054683          	lbu	a3,0(a0)
    2164:	0000c617          	auipc	a2,0xc
    2168:	6c060613          	addi	a2,a2,1728 # e824 <str>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    216c:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    2170:	02068063          	beqz	a3,2190 <print_runtime+0x250>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    2174:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffe102c>
    2178:	0107f793          	andi	a5,a5,16
    217c:	fe079ce3          	bnez	a5,2174 <print_runtime+0x234>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    2180:	00160613          	addi	a2,a2,1
    2184:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    2188:	00064683          	lbu	a3,0(a2)
    218c:	fe0694e3          	bnez	a3,2174 <print_runtime+0x234>
}
    2190:	00008067          	ret
	int div = 1;
    2194:	00100793          	li	a5,1
    2198:	dddff06f          	j	1f74 <print_runtime+0x34>

0000219c <XUARTChanged_SendByte>:
  while (XUartChanged_IsTransmitFull(BaseAddress));
    219c:	02c50713          	addi	a4,a0,44
    21a0:	00072783          	lw	a5,0(a4)
    21a4:	0107f793          	andi	a5,a5,16
    21a8:	fe079ce3          	bnez	a5,21a0 <XUARTChanged_SendByte+0x4>
  X_mWriteReg(BaseAddress, PS7_UART_DATA_OUT_REGISTER, Data);
    21ac:	02b52823          	sw	a1,48(a0)
}
    21b0:	00008067          	ret

000021b4 <uart_send_string>:
  while (*ptr) {
    21b4:	00054683          	lbu	a3,0(a0)
    21b8:	02068263          	beqz	a3,21dc <uart_send_string+0x28>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    21bc:	e0001737          	lui	a4,0xe0001
    21c0:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffe102c>
    21c4:	0107f793          	andi	a5,a5,16
    21c8:	fe079ce3          	bnez	a5,21c0 <uart_send_string+0xc>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    21cc:	00150513          	addi	a0,a0,1
    21d0:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    21d4:	00054683          	lbu	a3,0(a0)
    21d8:	fe0694e3          	bnez	a3,21c0 <uart_send_string+0xc>
  }
}
    21dc:	00008067          	ret

000021e0 <XUART_Reset>:

void XUART_Reset(void)
{
  X_mWriteReg(BASE_ADDRESS_U, PS7_UART_CONTROL_REGISTER, UART_CR_RESET_TX_RX); // Ctrl_reg disable interrupts, reset FIFOs
    21e0:	e00017b7          	lui	a5,0xe0001
    21e4:	00300713          	li	a4,3
    21e8:	00e7a023          	sw	a4,0(a5) # e0001000 <_end_of_memory+0xdffe1000>
}
    21ec:	00008067          	ret

000021f0 <KeccakF1600_StatePermute>:
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
    21f0:	00052783          	lw	a5,0(a0)
{
    21f4:	e8010113          	addi	sp,sp,-384
    21f8:	17212a23          	sw	s2,372(sp)
        Aba = state[ 0];
    21fc:	0af12823          	sw	a5,176(sp)
    2200:	00452783          	lw	a5,4(a0)
{
    2204:	17312823          	sw	s3,368(sp)
    2208:	17512423          	sw	s5,360(sp)
        Aba = state[ 0];
    220c:	0af12a23          	sw	a5,180(sp)
        Abe = state[ 1];
    2210:	00852783          	lw	a5,8(a0)
{
    2214:	17612223          	sw	s6,356(sp)
    2218:	17712023          	sw	s7,352(sp)
        Abe = state[ 1];
    221c:	00f12823          	sw	a5,16(sp)
    2220:	00c52783          	lw	a5,12(a0)
{
    2224:	15812e23          	sw	s8,348(sp)
    2228:	15912c23          	sw	s9,344(sp)
        Abe = state[ 1];
    222c:	0af12c23          	sw	a5,184(sp)
        Abi = state[ 2];
    2230:	01052783          	lw	a5,16(a0)
{
    2234:	15a12a23          	sw	s10,340(sp)
    2238:	15b12823          	sw	s11,336(sp)
        Abi = state[ 2];
    223c:	0af12e23          	sw	a5,188(sp)
    2240:	01452783          	lw	a5,20(a0)
{
    2244:	16812e23          	sw	s0,380(sp)
    2248:	16912c23          	sw	s1,376(sp)
        Abi = state[ 2];
    224c:	0cf12023          	sw	a5,192(sp)
        Abo = state[ 3];
    2250:	01852783          	lw	a5,24(a0)
{
    2254:	17412623          	sw	s4,364(sp)
        Abo = state[ 3];
    2258:	0cf12223          	sw	a5,196(sp)
    225c:	01c52783          	lw	a5,28(a0)
    2260:	0cf12423          	sw	a5,200(sp)
        Abu = state[ 4];
    2264:	02052783          	lw	a5,32(a0)
    2268:	0cf12623          	sw	a5,204(sp)
    226c:	02452783          	lw	a5,36(a0)
    2270:	0cf12823          	sw	a5,208(sp)
        Aga = state[ 5];
    2274:	02852783          	lw	a5,40(a0)
        Age = state[ 6];
    2278:	03052d83          	lw	s11,48(a0)
        Agi = state[ 7];
        Ago = state[ 8];
        Agu = state[ 9];
        Aka = state[10];
        Ake = state[11];
        Aki = state[12];
    227c:	06052c83          	lw	s9,96(a0)
        Aga = state[ 5];
    2280:	0cf12a23          	sw	a5,212(sp)
    2284:	02c52783          	lw	a5,44(a0)
        Aki = state[12];
    2288:	06452c03          	lw	s8,100(a0)
        Aga = state[ 5];
    228c:	0cf12c23          	sw	a5,216(sp)
        Age = state[ 6];
    2290:	03452783          	lw	a5,52(a0)
    2294:	00f12a23          	sw	a5,20(sp)
        Agi = state[ 7];
    2298:	03852783          	lw	a5,56(a0)
    229c:	00f12e23          	sw	a5,28(sp)
    22a0:	03c52783          	lw	a5,60(a0)
    22a4:	02f12023          	sw	a5,32(sp)
        Ago = state[ 8];
    22a8:	04052783          	lw	a5,64(a0)
    22ac:	0cf12e23          	sw	a5,220(sp)
    22b0:	04452783          	lw	a5,68(a0)
    22b4:	0ef12023          	sw	a5,224(sp)
        Agu = state[ 9];
    22b8:	04852783          	lw	a5,72(a0)
    22bc:	00f12c23          	sw	a5,24(sp)
    22c0:	04c52783          	lw	a5,76(a0)
    22c4:	02f12223          	sw	a5,36(sp)
        Aka = state[10];
    22c8:	05052783          	lw	a5,80(a0)
    22cc:	02f12423          	sw	a5,40(sp)
    22d0:	05452783          	lw	a5,84(a0)
    22d4:	02f12623          	sw	a5,44(sp)
        Ake = state[11];
    22d8:	05852783          	lw	a5,88(a0)
    22dc:	0ef12223          	sw	a5,228(sp)
    22e0:	05c52783          	lw	a5,92(a0)
    22e4:	0ef12423          	sw	a5,232(sp)
        Ako = state[13];
    22e8:	06852783          	lw	a5,104(a0)
    22ec:	02f12823          	sw	a5,48(sp)
    22f0:	06c52783          	lw	a5,108(a0)
    22f4:	02f12a23          	sw	a5,52(sp)
        Aku = state[14];
    22f8:	07052783          	lw	a5,112(a0)
        Ama = state[15];
        Ame = state[16];
        Ami = state[17];
        Amo = state[18];
    22fc:	09052b03          	lw	s6,144(a0)
    2300:	09452983          	lw	s3,148(a0)
        Aku = state[14];
    2304:	0ef12623          	sw	a5,236(sp)
    2308:	07452783          	lw	a5,116(a0)
    230c:	000b0b93          	mv	s7,s6
    2310:	00098d13          	mv	s10,s3
    2314:	0ef12823          	sw	a5,240(sp)
        Ama = state[15];
    2318:	07852783          	lw	a5,120(a0)
    231c:	000c0b13          	mv	s6,s8
    2320:	0ef12a23          	sw	a5,244(sp)
    2324:	07c52783          	lw	a5,124(a0)
    2328:	0ef12c23          	sw	a5,248(sp)
        Ame = state[16];
    232c:	08052783          	lw	a5,128(a0)
    2330:	02f12c23          	sw	a5,56(sp)
    2334:	08452783          	lw	a5,132(a0)
    2338:	02f12e23          	sw	a5,60(sp)
        Ami = state[17];
    233c:	08852783          	lw	a5,136(a0)
    2340:	04f12e23          	sw	a5,92(sp)
    2344:	08c52783          	lw	a5,140(a0)
    2348:	06f12023          	sw	a5,96(sp)
        Amu = state[19];
    234c:	09852783          	lw	a5,152(a0)
    2350:	04f12023          	sw	a5,64(sp)
    2354:	09c52783          	lw	a5,156(a0)
    2358:	04f12223          	sw	a5,68(sp)
        Asa = state[20];
    235c:	0a052783          	lw	a5,160(a0)
    2360:	04f12423          	sw	a5,72(sp)
    2364:	0a452783          	lw	a5,164(a0)
    2368:	04f12623          	sw	a5,76(sp)
        Ase = state[21];
    236c:	0a852783          	lw	a5,168(a0)
    2370:	06f12623          	sw	a5,108(sp)
    2374:	0ac52783          	lw	a5,172(a0)
    2378:	06f12823          	sw	a5,112(sp)
        Asi = state[22];
    237c:	0b052783          	lw	a5,176(a0)
    2380:	04f12823          	sw	a5,80(sp)
    2384:	0b452783          	lw	a5,180(a0)
        Aso = state[23];
        Asu = state[24];
    2388:	0c052903          	lw	s2,192(a0)
    238c:	0c452a83          	lw	s5,196(a0)
        Asi = state[22];
    2390:	04f12a23          	sw	a5,84(sp)
        Aso = state[23];
    2394:	0b852783          	lw	a5,184(a0)
    2398:	0fb12e23          	sw	s11,252(sp)
    239c:	14a12623          	sw	a0,332(sp)
    23a0:	06f12223          	sw	a5,100(sp)
    23a4:	0bc52783          	lw	a5,188(a0)
    23a8:	00090d93          	mv	s11,s2
    23ac:	000c8913          	mv	s2,s9
    23b0:	06f12423          	sw	a5,104(sp)

        for(round = 0; round < NROUNDS; round += 2) {
    23b4:	0000c797          	auipc	a5,0xc
    23b8:	14c78793          	addi	a5,a5,332 # e500 <KeccakF_RoundConstants>
    23bc:	00f12623          	sw	a5,12(sp)
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
    23c0:	0b012783          	lw	a5,176(sp)
    23c4:	0d412703          	lw	a4,212(sp)
    23c8:	0b412683          	lw	a3,180(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
    23cc:	0bc12303          	lw	t1,188(sp)
    23d0:	01c12e03          	lw	t3,28(sp)
    23d4:	0c012e83          	lw	t4,192(sp)
    23d8:	02012f03          	lw	t5,32(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    23dc:	0c412383          	lw	t2,196(sp)
    23e0:	0dc12403          	lw	s0,220(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    23e4:	0d812603          	lw	a2,216(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    23e8:	01012503          	lw	a0,16(sp)
    23ec:	0b812803          	lw	a6,184(sp)
    23f0:	01412883          	lw	a7,20(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    23f4:	0cc12c03          	lw	s8,204(sp)
    23f8:	01812c83          	lw	s9,24(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    23fc:	02c12283          	lw	t0,44(sp)
    2400:	00e7c5b3          	xor	a1,a5,a4
            BCe = Abe^Age^Ake^Ame^Ase;
    2404:	0fc12703          	lw	a4,252(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    2408:	0c812483          	lw	s1,200(sp)
    240c:	0e012983          	lw	s3,224(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    2410:	02812f83          	lw	t6,40(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    2414:	01c347b3          	xor	a5,t1,t3
            BCa = Aba^Aga^Aka^Ama^Asa;
    2418:	00c6c633          	xor	a2,a3,a2
            BCi = Abi^Agi^Aki^Ami^Asi;
    241c:	01eece33          	xor	t3,t4,t5
            BCo = Abo^Ago^Ako^Amo^Aso;
    2420:	0083c333          	xor	t1,t2,s0
            BCu = Abu^Agu^Aku^Amu^Asu;
    2424:	0d012e83          	lw	t4,208(sp)
    2428:	02412f03          	lw	t5,36(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    242c:	0e812403          	lw	s0,232(sp)
    2430:	0e412383          	lw	t2,228(sp)
    2434:	00e546b3          	xor	a3,a0,a4
            BCa = Aba^Aga^Aka^Ama^Asa;
    2438:	00564633          	xor	a2,a2,t0
            BCe = Abe^Age^Ake^Ame^Ase;
    243c:	01184733          	xor	a4,a6,a7
    2440:	03c12283          	lw	t0,60(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    2444:	019c4833          	xor	a6,s8,s9
    2448:	0f012c83          	lw	s9,240(sp)
    244c:	0ec12c03          	lw	s8,236(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    2450:	0134c8b3          	xor	a7,s1,s3
            BCu = Abu^Agu^Aku^Amu^Asu;
    2454:	01eec533          	xor	a0,t4,t5
            BCo = Abo^Ago^Ako^Amo^Aso;
    2458:	03012483          	lw	s1,48(sp)
    245c:	03412983          	lw	s3,52(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    2460:	0f412e83          	lw	t4,244(sp)
    2464:	0f812f03          	lw	t5,248(sp)
    2468:	01f5c5b3          	xor	a1,a1,t6
            BCe = Abe^Age^Ake^Ame^Ase;
    246c:	0076c6b3          	xor	a3,a3,t2
    2470:	03812f83          	lw	t6,56(sp)
    2474:	00874733          	xor	a4,a4,s0
            BCi = Abi^Agi^Aki^Ami^Asi;
    2478:	05c12383          	lw	t2,92(sp)
    247c:	06012403          	lw	s0,96(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    2480:	01954533          	xor	a0,a0,s9
            BCe = Abe^Age^Ake^Ame^Ase;
    2484:	00574733          	xor	a4,a4,t0
            BCa = Aba^Aga^Aka^Ama^Asa;
    2488:	04c12c83          	lw	s9,76(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    248c:	05412283          	lw	t0,84(sp)
    2490:	016e4e33          	xor	t3,t3,s6
    2494:	008e4e33          	xor	t3,t3,s0
            BCa = Aba^Aga^Aka^Ama^Asa;
    2498:	01d5c5b3          	xor	a1,a1,t4
    249c:	01e64633          	xor	a2,a2,t5
            BCe = Abe^Age^Ake^Ame^Ase;
    24a0:	06c12e83          	lw	t4,108(sp)
    24a4:	07012f03          	lw	t5,112(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    24a8:	01964633          	xor	a2,a2,s9
            BCu = Abu^Agu^Aku^Amu^Asu;
    24ac:	01884833          	xor	a6,a6,s8
            BCi = Abi^Agi^Aki^Ami^Asi;
    24b0:	005e4cb3          	xor	s9,t3,t0
            BCa = Aba^Aga^Aka^Ama^Asa;
    24b4:	04812c03          	lw	s8,72(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    24b8:	06412e03          	lw	t3,100(sp)
    24bc:	00934333          	xor	t1,t1,s1
            BCe = Abe^Age^Ake^Ame^Ase;
    24c0:	01f6c6b3          	xor	a3,a3,t6
            BCu = Abu^Agu^Aku^Amu^Asu;
    24c4:	04012483          	lw	s1,64(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    24c8:	05012f83          	lw	t6,80(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    24cc:	01e74733          	xor	a4,a4,t5
    24d0:	01d6c6b3          	xor	a3,a3,t4
            BCo = Abo^Ago^Ako^Amo^Aso;
    24d4:	01734333          	xor	t1,t1,s7
            BCi = Abi^Agi^Aki^Ami^Asi;
    24d8:	0127c7b3          	xor	a5,a5,s2
            BCa = Aba^Aga^Aka^Ama^Asa;
    24dc:	0185c5b3          	xor	a1,a1,s8

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
    24e0:	00171a13          	slli	s4,a4,0x1
            BCo = Abo^Ago^Ako^Amo^Aso;
    24e4:	01c34c33          	xor	s8,t1,t3
    24e8:	0138c8b3          	xor	a7,a7,s3
    24ec:	06812303          	lw	t1,104(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    24f0:	04412983          	lw	s3,68(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    24f4:	0077c7b3          	xor	a5,a5,t2
            Da = BCu^ROL(BCe, 1);
    24f8:	01f6d413          	srli	s0,a3,0x1f
            BCi = Abi^Agi^Aki^Ami^Asi;
    24fc:	01f7c7b3          	xor	a5,a5,t6
            Da = BCu^ROL(BCe, 1);
    2500:	01446433          	or	s0,s0,s4
            BCu = Abu^Agu^Aku^Amu^Asu;
    2504:	00984833          	xor	a6,a6,s1
            Da = BCu^ROL(BCe, 1);
    2508:	00169a13          	slli	s4,a3,0x1
    250c:	01f75493          	srli	s1,a4,0x1f
            BCo = Abo^Ago^Ako^Amo^Aso;
    2510:	01a8c8b3          	xor	a7,a7,s10
            Da = BCu^ROL(BCe, 1);
    2514:	0144e4b3          	or	s1,s1,s4
            De = BCa^ROL(BCi, 1);
    2518:	01f7d293          	srli	t0,a5,0x1f
    251c:	001c9a13          	slli	s4,s9,0x1
    2520:	0142e2b3          	or	t0,t0,s4
            BCu = Abu^Agu^Aku^Amu^Asu;
    2524:	01354533          	xor	a0,a0,s3
            De = BCa^ROL(BCi, 1);
    2528:	01fcda13          	srli	s4,s9,0x1f
            BCo = Abo^Ago^Ako^Amo^Aso;
    252c:	0068c9b3          	xor	s3,a7,t1
            De = BCa^ROL(BCi, 1);
    2530:	00179393          	slli	t2,a5,0x1
    2534:	007a63b3          	or	t2,s4,t2
            Di = BCe^ROL(BCo, 1);
    2538:	01fc5f13          	srli	t5,s8,0x1f
    253c:	00199a13          	slli	s4,s3,0x1
            BCu = Abu^Agu^Aku^Amu^Asu;
    2540:	01b84833          	xor	a6,a6,s11
    2544:	01554533          	xor	a0,a0,s5
            Di = BCe^ROL(BCo, 1);
    2548:	001c1f93          	slli	t6,s8,0x1
    254c:	014f6f33          	or	t5,t5,s4
    2550:	01f9da13          	srli	s4,s3,0x1f
    2554:	01fa6fb3          	or	t6,s4,t6
            Do = BCi^ROL(BCu, 1);
    2558:	00151e13          	slli	t3,a0,0x1
    255c:	01f85a13          	srli	s4,a6,0x1f
    2560:	01f55e93          	srli	t4,a0,0x1f
    2564:	01ca6e33          	or	t3,s4,t3
    2568:	00181a13          	slli	s4,a6,0x1
            Du = BCo^ROL(BCa, 1);
    256c:	00161893          	slli	a7,a2,0x1
    2570:	01f65313          	srli	t1,a2,0x1f
            Do = BCi^ROL(BCu, 1);
    2574:	014eeeb3          	or	t4,t4,s4
            De = BCa^ROL(BCi, 1);
    2578:	00c2c633          	xor	a2,t0,a2
            Du = BCo^ROL(BCa, 1);
    257c:	01f5da13          	srli	s4,a1,0x1f

            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
    2580:	01412283          	lw	t0,20(sp)
            Du = BCo^ROL(BCa, 1);
    2584:	011a68b3          	or	a7,s4,a7
    2588:	0138c8b3          	xor	a7,a7,s3
            Age ^= De;
    258c:	005649b3          	xor	s3,a2,t0
            BCe = ROL(Age, 44);
            Aki ^= Di;
            BCi = ROL(Aki, 43);
            Amo ^= Do;
            BCo = ROL(Amo, 21);
            Asu ^= Du;
    2590:	0158c2b3          	xor	t0,a7,s5
            Ebe =   BCe ^((~BCi)&  BCo );
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );

            Abo ^= Do;
    2594:	0c412a83          	lw	s5,196(sp)
            Do = BCi^ROL(BCu, 1);
    2598:	00feceb3          	xor	t4,t4,a5
    259c:	019e4e33          	xor	t3,t3,s9
            Du = BCo^ROL(BCa, 1);
    25a0:	00159a13          	slli	s4,a1,0x1
            Abo ^= Do;
    25a4:	000e8c93          	mv	s9,t4
            De = BCa^ROL(BCi, 1);
    25a8:	00b3c5b3          	xor	a1,t2,a1
            Amo ^= Do;
    25ac:	017ec3b3          	xor	t2,t4,s7
            Abo ^= Do;
    25b0:	015eceb3          	xor	t4,t4,s5
    25b4:	0c812a83          	lw	s5,200(sp)
            Di = BCe^ROL(BCo, 1);
    25b8:	00ef4f33          	xor	t5,t5,a4
            Du = BCo^ROL(BCa, 1);
    25bc:	01436333          	or	t1,t1,s4
    25c0:	01834333          	xor	t1,t1,s8
            Da = BCu^ROL(BCe, 1);
    25c4:	0104c833          	xor	a6,s1,a6
            Aki ^= Di;
    25c8:	000f0c13          	mv	s8,t5
    25cc:	016f44b3          	xor	s1,t5,s6
            Abo ^= Do;
    25d0:	015e4f33          	xor	t5,t3,s5
            BCa = ROL(Abo, 28);
            Agu ^= Du;
    25d4:	01812a83          	lw	s5,24(sp)
            Di = BCe^ROL(BCo, 1);
    25d8:	00dfc6b3          	xor	a3,t6,a3
            BCe = ROL(Agu, 20);
            Aka ^= Da;
    25dc:	02812b83          	lw	s7,40(sp)
            Asu ^= Du;
    25e0:	01b34fb3          	xor	t6,t1,s11
            Agu ^= Du;
    25e4:	00030d93          	mv	s11,t1
    25e8:	01534333          	xor	t1,t1,s5
    25ec:	02412a83          	lw	s5,36(sp)
            Da = BCu^ROL(BCe, 1);
    25f0:	00a44533          	xor	a0,s0,a0
            Amo ^= Do;
    25f4:	01ae4433          	xor	s0,t3,s10
            Abo ^= Do;
    25f8:	000e0d13          	mv	s10,t3
            Agu ^= Du;
    25fc:	0158ce33          	xor	t3,a7,s5
            Aka ^= Da;
    2600:	00080a93          	mv	s5,a6
    2604:	01784833          	xor	a6,a6,s7
    2608:	02c12b83          	lw	s7,44(sp)
            Agu ^= Du;
    260c:	01112c23          	sw	a7,24(sp)
            Aka ^= Da;
    2610:	00050b13          	mv	s6,a0
    2614:	017548b3          	xor	a7,a0,s7
            BCi = ROL(Aka,  3);
            Ame ^= De;
    2618:	03812b83          	lw	s7,56(sp)
            Age ^= De;
    261c:	0fc12703          	lw	a4,252(sp)
    2620:	00058793          	mv	a5,a1
            Ame ^= De;
    2624:	0175c533          	xor	a0,a1,s7
    2628:	04a12c23          	sw	a0,88(sp)
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
    262c:	01012503          	lw	a0,16(sp)
            Ame ^= De;
    2630:	03c12b83          	lw	s7,60(sp)
            Abe ^= De;
    2634:	06f12a23          	sw	a5,116(sp)
    2638:	00a7c7b3          	xor	a5,a5,a0
    263c:	0b812503          	lw	a0,184(sp)
            Age ^= De;
    2640:	00e5ca33          	xor	s4,a1,a4
    2644:	00060713          	mv	a4,a2
            Ame ^= De;
    2648:	017645b3          	xor	a1,a2,s7
            Aki ^= Di;
    264c:	0126c933          	xor	s2,a3,s2
            Asi ^= Di;
    2650:	00068b93          	mv	s7,a3
            Abe ^= De;
    2654:	06e12c23          	sw	a4,120(sp)
            Asi ^= Di;
    2658:	05012683          	lw	a3,80(sp)
            Abe ^= De;
    265c:	00a74733          	xor	a4,a4,a0
            BCa = ROL(Abe,  1);
            Agi ^= Di;
    2660:	01c12503          	lw	a0,28(sp)
            Asi ^= Di;
    2664:	00dbc633          	xor	a2,s7,a3
            Agi ^= Di;
    2668:	07712e23          	sw	s7,124(sp)
    266c:	00abcbb3          	xor	s7,s7,a0
            Asi ^= Di;
    2670:	05412683          	lw	a3,84(sp)
            Agi ^= Di;
    2674:	0b712623          	sw	s7,172(sp)
    2678:	02012503          	lw	a0,32(sp)
            BCe = ROL(Agi,  6);
            Ako ^= Do;
    267c:	09912223          	sw	s9,132(sp)
    2680:	09a12423          	sw	s10,136(sp)
            Agi ^= Di;
    2684:	00ac4bb3          	xor	s7,s8,a0
            Ako ^= Do;
    2688:	03012503          	lw	a0,48(sp)
            Agi ^= Di;
    268c:	0b712c23          	sw	s7,184(sp)
            BCi = ROL(Ako, 25);
            Amu ^= Du;
    2690:	09b12623          	sw	s11,140(sp)
            Ako ^= Do;
    2694:	00acccb3          	xor	s9,s9,a0
    2698:	03412503          	lw	a0,52(sp)
            Amu ^= Du;
    269c:	01812b83          	lw	s7,24(sp)
            BCo = ROL(Amu,  8);
            Asa ^= Da;
    26a0:	01512823          	sw	s5,16(sp)
            Ako ^= Do;
    26a4:	00ad4d33          	xor	s10,s10,a0
            Amu ^= Du;
    26a8:	04012503          	lw	a0,64(sp)
            Ako ^= Do;
    26ac:	0da12423          	sw	s10,200(sp)
    26b0:	0d912223          	sw	s9,196(sp)
            Amu ^= Du;
    26b4:	00adcdb3          	xor	s11,s11,a0
    26b8:	04412503          	lw	a0,68(sp)
            BCi = ROL(Aki, 43);
    26bc:	00b49c93          	slli	s9,s1,0xb
            Amu ^= Du;
    26c0:	0fb12e23          	sw	s11,252(sp)
    26c4:	00abc533          	xor	a0,s7,a0
    26c8:	10a12023          	sw	a0,256(sp)
            Asa ^= Da;
    26cc:	04812503          	lw	a0,72(sp)
            BCe = ROL(Age, 44);
    26d0:	014a5d93          	srli	s11,s4,0x14
            BCi = ROL(Aki, 43);
    26d4:	0154d493          	srli	s1,s1,0x15
            Asa ^= Da;
    26d8:	00aacab3          	xor	s5,s5,a0
    26dc:	04c12503          	lw	a0,76(sp)
    26e0:	11512223          	sw	s5,260(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    26e4:	00c12a83          	lw	s5,12(sp)
            Asa ^= Da;
    26e8:	00ab4533          	xor	a0,s6,a0
    26ec:	10a12423          	sw	a0,264(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    26f0:	000aa503          	lw	a0,0(s5)
    26f4:	004aad03          	lw	s10,4(s5)
            Agi ^= Di;
    26f8:	09812023          	sw	s8,128(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    26fc:	08a12823          	sw	a0,144(sp)
            BCe = ROL(Age, 44);
    2700:	00c99513          	slli	a0,s3,0xc
    2704:	00a12e23          	sw	a0,28(sp)
            BCi = ROL(Aki, 43);
    2708:	01595513          	srli	a0,s2,0x15
    270c:	00b91913          	slli	s2,s2,0xb
            Asa ^= Da;
    2710:	01612a23          	sw	s6,20(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2714:	09a12e23          	sw	s10,156(sp)
            BCe = ROL(Age, 44);
    2718:	03b12023          	sw	s11,32(sp)
            BCi = ROL(Aki, 43);
    271c:	03912223          	sw	s9,36(sp)
    2720:	02a12423          	sw	a0,40(sp)
    2724:	03212623          	sw	s2,44(sp)
            BCo = ROL(Ame, 45);
    2728:	00d59513          	slli	a0,a1,0xd
            BCi = ROL(Aki, 43);
    272c:	02912823          	sw	s1,48(sp)
            BCo = ROL(Amo, 21);
    2730:	00b3d493          	srli	s1,t2,0xb
    2734:	02912a23          	sw	s1,52(sp)
            BCo = ROL(Ame, 45);
    2738:	04a12623          	sw	a0,76(sp)
    273c:	05812503          	lw	a0,88(sp)
            BCo = ROL(Amo, 21);
    2740:	01541493          	slli	s1,s0,0x15
    2744:	02912c23          	sw	s1,56(sp)
            Asi ^= Di;
    2748:	00dc46b3          	xor	a3,s8,a3
            BCo = ROL(Ame, 45);
    274c:	01355493          	srli	s1,a0,0x13
    2750:	04912823          	sw	s1,80(sp)
            BCu = ROL(Asi, 61);
    2754:	01d69493          	slli	s1,a3,0x1d
    2758:	04912a23          	sw	s1,84(sp)
    275c:	00365493          	srli	s1,a2,0x3
            BCa = ROL(Abe,  1);
    2760:	01f7d913          	srli	s2,a5,0x1f
            BCu = ROL(Asi, 61);
    2764:	04912c23          	sw	s1,88(sp)
            BCa = ROL(Abe,  1);
    2768:	00171493          	slli	s1,a4,0x1
    276c:	0b212023          	sw	s2,160(sp)
    2770:	0a912223          	sw	s1,164(sp)
            BCe = ROL(Age, 44);
    2774:	01c12903          	lw	s2,28(sp)
    2778:	02012483          	lw	s1,32(sp)
    277c:	00ca1a13          	slli	s4,s4,0xc
    2780:	0149d993          	srli	s3,s3,0x14
    2784:	00996933          	or	s2,s2,s1
    2788:	013a69b3          	or	s3,s4,s3
            BCi = ROL(Aki, 43);
    278c:	02412483          	lw	s1,36(sp)
    2790:	02812a03          	lw	s4,40(sp)
            BCe = ROL(Age, 44);
    2794:	09212a23          	sw	s2,148(sp)
            BCi = ROL(Aki, 43);
    2798:	02c12903          	lw	s2,44(sp)
    279c:	0144ea33          	or	s4,s1,s4
    27a0:	03012483          	lw	s1,48(sp)
    27a4:	01412e23          	sw	s4,28(sp)
            BCo = ROL(Amo, 21);
    27a8:	03412a03          	lw	s4,52(sp)
            BCi = ROL(Aki, 43);
    27ac:	009964b3          	or	s1,s2,s1
    27b0:	02912023          	sw	s1,32(sp)
            BCo = ROL(Amo, 21);
    27b4:	03812483          	lw	s1,56(sp)
            BCu = ROL(Asu, 14);
    27b8:	012fdc13          	srli	s8,t6,0x12
    27bc:	03812e23          	sw	s8,60(sp)
            BCo = ROL(Amo, 21);
    27c0:	009a6a33          	or	s4,s4,s1
            BCu = ROL(Asu, 14);
    27c4:	03c12483          	lw	s1,60(sp)
            BCa = ROL(Abo, 28);
    27c8:	004edd13          	srli	s10,t4,0x4
    27cc:	01cf1c93          	slli	s9,t5,0x1c
            BCe = ROL(Agu, 20);
    27d0:	00c35c13          	srli	s8,t1,0xc
    27d4:	014e1b93          	slli	s7,t3,0x14
            BCa = ROL(Abo, 28);
    27d8:	004f5f13          	srli	t5,t5,0x4
            BCe = ROL(Agu, 20);
    27dc:	00ce5e13          	srli	t3,t3,0xc
            BCa = ROL(Abo, 28);
    27e0:	01ce9e93          	slli	t4,t4,0x1c
            BCe = ROL(Agu, 20);
    27e4:	01431313          	slli	t1,t1,0x14
            BCu = ROL(Asu, 14);
    27e8:	00e29d93          	slli	s11,t0,0xe
            BCi = ROL(Aka,  3);
    27ec:	01d85b13          	srli	s6,a6,0x1d
    27f0:	00389a93          	slli	s5,a7,0x3
            BCa = ROL(Abo, 28);
    27f4:	01df6eb3          	or	t4,t5,t4
            BCe = ROL(Agu, 20);
    27f8:	006e6333          	or	t1,t3,t1
            BCo = ROL(Amo, 21);
    27fc:	01539393          	slli	t2,t2,0x15
            BCu = ROL(Asu, 14);
    2800:	0122d293          	srli	t0,t0,0x12
            BCi = ROL(Aka,  3);
    2804:	01d8d893          	srli	a7,a7,0x1d
            BCo = ROL(Amo, 21);
    2808:	00b45413          	srli	s0,s0,0xb
            BCu = ROL(Asu, 14);
    280c:	00ef9f93          	slli	t6,t6,0xe
            BCi = ROL(Aka,  3);
    2810:	00381813          	slli	a6,a6,0x3
            BCo = ROL(Amo, 21);
    2814:	00746433          	or	s0,s0,t2
            BCu = ROL(Asu, 14);
    2818:	01f2efb3          	or	t6,t0,t6
    281c:	01b4e3b3          	or	t2,s1,s11
            BCa = ROL(Abo, 28);
    2820:	019d62b3          	or	t0,s10,s9
            BCi = ROL(Aka,  3);
    2824:	0108e833          	or	a6,a7,a6
            BCa = ROL(Abo, 28);
    2828:	03d12a23          	sw	t4,52(sp)
            BCe = ROL(Agu, 20);
    282c:	02612e23          	sw	t1,60(sp)
    2830:	017c6eb3          	or	t4,s8,s7
            BCi = ROL(Aka,  3);
    2834:	015b6333          	or	t1,s6,s5
            BCe = ROL(Age, 44);
    2838:	09312c23          	sw	s3,152(sp)
            BCo = ROL(Amo, 21);
    283c:	03412423          	sw	s4,40(sp)
    2840:	02812223          	sw	s0,36(sp)
            BCu = ROL(Asu, 14);
    2844:	02712823          	sw	t2,48(sp)
    2848:	03f12623          	sw	t6,44(sp)
            BCa = ROL(Abo, 28);
    284c:	02512c23          	sw	t0,56(sp)
            BCe = ROL(Agu, 20);
    2850:	05d12023          	sw	t4,64(sp)
            BCi = ROL(Aka,  3);
    2854:	04612423          	sw	t1,72(sp)
    2858:	05012223          	sw	a6,68(sp)
            BCo = ROL(Ame, 45);
    285c:	04c12803          	lw	a6,76(sp)
    2860:	05012f83          	lw	t6,80(sp)
            BCu = ROL(Asi, 61);
    2864:	05812483          	lw	s1,88(sp)
    2868:	01d61613          	slli	a2,a2,0x1d
            BCo = ROL(Ame, 45);
    286c:	01f86fb3          	or	t6,a6,t6
            BCu = ROL(Asi, 61);
    2870:	05412803          	lw	a6,84(sp)
    2874:	0036d693          	srli	a3,a3,0x3
    2878:	00d666b3          	or	a3,a2,a3
    287c:	009862b3          	or	t0,a6,s1
            BCa = ROL(Abe,  1);
    2880:	0a412483          	lw	s1,164(sp)
    2884:	0a012803          	lw	a6,160(sp)
            BCo = ROL(Ame, 45);
    2888:	0135d593          	srli	a1,a1,0x13
    288c:	00d51513          	slli	a0,a0,0xd
            BCa = ROL(Abe,  1);
    2890:	00986633          	or	a2,a6,s1
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
    2894:	01012f03          	lw	t5,16(sp)
    2898:	01412b03          	lw	s6,20(sp)
            Abu ^= Du;
    289c:	08c12d83          	lw	s11,140(sp)
    28a0:	0cc12903          	lw	s2,204(sp)
            BCo = ROL(Ame, 45);
    28a4:	00b56533          	or	a0,a0,a1
            BCa = ROL(Abe,  1);
    28a8:	0ac12423          	sw	a2,168(sp)
            Aga ^= Da;
    28ac:	0d412583          	lw	a1,212(sp)
    28b0:	0d812603          	lw	a2,216(sp)
            BCa = ROL(Abe,  1);
    28b4:	01f75713          	srli	a4,a4,0x1f
    28b8:	00179793          	slli	a5,a5,0x1
    28bc:	00f76433          	or	s0,a4,a5
            Aga ^= Da;
    28c0:	00cb4e33          	xor	t3,s6,a2
            Abu ^= Du;
    28c4:	012dc733          	xor	a4,s11,s2
            Aga ^= Da;
    28c8:	00bf47b3          	xor	a5,t5,a1
            Abu ^= Du;
    28cc:	01812303          	lw	t1,24(sp)
    28d0:	0d012903          	lw	s2,208(sp)
            BCe = ROL(Aga, 36);
            Ake ^= De;
    28d4:	07412603          	lw	a2,116(sp)
    28d8:	0e412583          	lw	a1,228(sp)
            BCu = ROL(Asi, 61);
    28dc:	04d12c23          	sw	a3,88(sp)
            Abu ^= Du;
    28e0:	012346b3          	xor	a3,t1,s2
            Ake ^= De;
    28e4:	00b64c33          	xor	s8,a2,a1
    28e8:	0e812903          	lw	s2,232(sp)
    28ec:	07812583          	lw	a1,120(sp)
            BCo = ROL(Ame, 45);
    28f0:	04a12823          	sw	a0,80(sp)
            BCi = ROL(Ake, 10);
            Ami ^= Di;
    28f4:	07c12503          	lw	a0,124(sp)
            Ake ^= De;
    28f8:	0125cbb3          	xor	s7,a1,s2
            Ami ^= Di;
    28fc:	05c12903          	lw	s2,92(sp)
    2900:	08012803          	lw	a6,128(sp)
            BCo = ROL(Ami, 15);
            Aso ^= Do;
    2904:	08412883          	lw	a7,132(sp)
            Ami ^= Di;
    2908:	01254333          	xor	t1,a0,s2
    290c:	06012903          	lw	s2,96(sp)
            BCo = ROL(Ame, 45);
    2910:	05f12623          	sw	t6,76(sp)
            BCu = ROL(Asi, 61);
    2914:	04512a23          	sw	t0,84(sp)
            Ami ^= Di;
    2918:	01284cb3          	xor	s9,a6,s2
            Aso ^= Do;
    291c:	06412903          	lw	s2,100(sp)
            BCa = ROL(Abe,  1);
    2920:	0a812223          	sw	s0,164(sp)
            Aga ^= Da;
    2924:	11c12623          	sw	t3,268(sp)
            Aso ^= Do;
    2928:	0128cd33          	xor	s10,a7,s2
    292c:	08812e03          	lw	t3,136(sp)
    2930:	06812903          	lw	s2,104(sp)
            BCe = ROL(Agi,  6);
    2934:	0b812603          	lw	a2,184(sp)
            BCi = ROL(Ako, 25);
    2938:	0c812283          	lw	t0,200(sp)
            Aso ^= Do;
    293c:	012e4db3          	xor	s11,t3,s2
            BCe = ROL(Agi,  6);
    2940:	00661a13          	slli	s4,a2,0x6
    2944:	0ac12903          	lw	s2,172(sp)
    2948:	01a65e93          	srli	t4,a2,0x1a
            BCi = ROL(Ako, 25);
    294c:	0c412603          	lw	a2,196(sp)
            Aba ^= Da;
    2950:	0b012f83          	lw	t6,176(sp)
            BCi = ROL(Ako, 25);
    2954:	0072d493          	srli	s1,t0,0x7
    2958:	06912023          	sw	s1,96(sp)
            BCe = ROL(Agi,  6);
    295c:	00691e13          	slli	t3,s2,0x6
            BCi = ROL(Ako, 25);
    2960:	00765993          	srli	s3,a2,0x7
    2964:	01961893          	slli	a7,a2,0x19
            BCe = ROL(Agi,  6);
    2968:	01a95a93          	srli	s5,s2,0x1a
            BCo = ROL(Amu,  8);
    296c:	0fc12603          	lw	a2,252(sp)
            BCi = ROL(Ako, 25);
    2970:	01929913          	slli	s2,t0,0x19
            BCo = ROL(Amu,  8);
    2974:	10012283          	lw	t0,256(sp)
            Aba ^= Da;
    2978:	01ff4fb3          	xor	t6,t5,t6
            BCe = ROL(Agi,  6);
    297c:	014aeab3          	or	s5,s5,s4
            Aba ^= Da;
    2980:	000b0f13          	mv	t5,s6
            BCi = ROL(Ako, 25);
    2984:	06012a03          	lw	s4,96(sp)
            Aba ^= Da;
    2988:	0b412b03          	lw	s6,180(sp)
            BCo = ROL(Amu,  8);
    298c:	0182d813          	srli	a6,t0,0x18
    2990:	00861513          	slli	a0,a2,0x8
            Aba ^= Da;
    2994:	016f4f33          	xor	t5,t5,s6
            BCi = ROL(Ako, 25);
    2998:	0129e933          	or	s2,s3,s2
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
    299c:	0bc12b03          	lw	s6,188(sp)
            BCi = ROL(Ako, 25);
    29a0:	011a69b3          	or	s3,s4,a7
            BCo = ROL(Amu,  8);
    29a4:	00a86a33          	or	s4,a6,a0
            Abi ^= Di;
    29a8:	07c12503          	lw	a0,124(sp)
    29ac:	08012803          	lw	a6,128(sp)
            BCo = ROL(Amu,  8);
    29b0:	01865493          	srli	s1,a2,0x18
            Abi ^= Di;
    29b4:	01654533          	xor	a0,a0,s6
    29b8:	0c012b03          	lw	s6,192(sp)
            BCo = ROL(Amu,  8);
    29bc:	00829413          	slli	s0,t0,0x8
    29c0:	0084e8b3          	or	a7,s1,s0
            Abi ^= Di;
    29c4:	01684833          	xor	a6,a6,s6
            BCo = ROL(Amu,  8);
    29c8:	07112423          	sw	a7,104(sp)
            BCa = ROL(Abi, 62);
            Ago ^= Do;
    29cc:	0dc12b03          	lw	s6,220(sp)
    29d0:	08412883          	lw	a7,132(sp)
            BCu = ROL(Asa, 18);
    29d4:	10412603          	lw	a2,260(sp)
    29d8:	10812583          	lw	a1,264(sp)
            BCe = ROL(Agi,  6);
    29dc:	01ceeeb3          	or	t4,t4,t3
            Abi ^= Di;
    29e0:	13012623          	sw	a6,300(sp)
            Ago ^= Do;
    29e4:	08812e03          	lw	t3,136(sp)
    29e8:	0168c833          	xor	a6,a7,s6
    29ec:	0e012b03          	lw	s6,224(sp)
            BCu = ROL(Asa, 18);
    29f0:	00e65393          	srli	t2,a2,0xe
    29f4:	01259293          	slli	t0,a1,0x12
    29f8:	01261613          	slli	a2,a2,0x12
    29fc:	00e5d593          	srli	a1,a1,0xe
            Ago ^= Do;
    2a00:	016e4433          	xor	s0,t3,s6
            BCu = ROL(Asa, 18);
    2a04:	00c5e633          	or	a2,a1,a2
            BCe = ROL(Agi,  6);
    2a08:	05512e23          	sw	s5,92(sp)
            BCi = ROL(Ako, 25);
    2a0c:	0b212623          	sw	s2,172(sp)
    2a10:	07312023          	sw	s3,96(sp)
            BCo = ROL(Amu,  8);
    2a14:	07412223          	sw	s4,100(sp)
            BCu = ROL(Asa, 18);
    2a18:	0ac12823          	sw	a2,176(sp)
            Abi ^= Di;
    2a1c:	12a12423          	sw	a0,296(sp)
            Ago ^= Do;
    2a20:	13012823          	sw	a6,304(sp)
            BCe = ROL(Ago, 55);
            Aku ^= Du;
    2a24:	08c12503          	lw	a0,140(sp)
            Ago ^= Do;
    2a28:	12812a23          	sw	s0,308(sp)
            Aku ^= Du;
    2a2c:	0ec12b03          	lw	s6,236(sp)
    2a30:	01812883          	lw	a7,24(sp)
            BCi = ROL(Aku, 39);
            Ama ^= Da;
    2a34:	01012583          	lw	a1,16(sp)
            Aku ^= Du;
    2a38:	01654ab3          	xor	s5,a0,s6
    2a3c:	0f012b03          	lw	s6,240(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    2a40:	09812503          	lw	a0,152(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2a44:	01c12e03          	lw	t3,28(sp)
            Aku ^= Du;
    2a48:	0168ca33          	xor	s4,a7,s6
            Ama ^= Da;
    2a4c:	0f412883          	lw	a7,244(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2a50:	02012483          	lw	s1,32(sp)
            BCu = ROL(Asa, 18);
    2a54:	0053e2b3          	or	t0,t2,t0
            Ama ^= Da;
    2a58:	0115c9b3          	xor	s3,a1,a7
    2a5c:	01412583          	lw	a1,20(sp)
    2a60:	0f812883          	lw	a7,248(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2a64:	02412383          	lw	t2,36(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    2a68:	fff54813          	not	a6,a0
            Ama ^= Da;
    2a6c:	0115c933          	xor	s2,a1,a7
            BCo = ROL(Ama, 41);
            Ase ^= De;
    2a70:	07412583          	lw	a1,116(sp)
    2a74:	06c12883          	lw	a7,108(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2a78:	fffe4513          	not	a0,t3
            Ebo =   BCo ^((~BCu)&  BCa );
    2a7c:	03012e03          	lw	t3,48(sp)
            Ase ^= De;
    2a80:	0115c8b3          	xor	a7,a1,a7
    2a84:	09112223          	sw	a7,132(sp)
    2a88:	07812583          	lw	a1,120(sp)
    2a8c:	07012883          	lw	a7,112(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2a90:	fff3cb13          	not	s6,t2
    2a94:	02812383          	lw	t2,40(sp)
            Ase ^= De;
    2a98:	0115c633          	xor	a2,a1,a7
            Eba =   BCa ^((~BCe)&  BCi );
    2a9c:	09412583          	lw	a1,148(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2aa0:	09612423          	sw	s6,136(sp)
    2aa4:	fff3c413          	not	s0,t2
            Eba =   BCa ^((~BCe)&  BCi );
    2aa8:	fff5c893          	not	a7,a1
            Ebe =   BCe ^((~BCi)&  BCo );
    2aac:	fff4c593          	not	a1,s1
            Ebo =   BCo ^((~BCu)&  BCa );
    2ab0:	02c12483          	lw	s1,44(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2ab4:	04012383          	lw	t2,64(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2ab8:	08812623          	sw	s0,140(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2abc:	fff4cb13          	not	s6,s1
    2ac0:	fffe4493          	not	s1,t3
            Ege =   BCe ^((~BCi)&  BCo );
    2ac4:	04812e03          	lw	t3,72(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2ac8:	0b612023          	sw	s6,160(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2acc:	fff3c413          	not	s0,t2
            Ege =   BCe ^((~BCi)&  BCo );
    2ad0:	fffe4b13          	not	s6,t3
            Egi =   BCi ^((~BCo)&  BCu );
    2ad4:	04c12e03          	lw	t3,76(sp)
            Ase ^= De;
    2ad8:	12c12c23          	sw	a2,312(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2adc:	0a912a23          	sw	s1,180(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2ae0:	0a812c23          	sw	s0,184(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    2ae4:	0b612e23          	sw	s6,188(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2ae8:	fffe4413          	not	s0,t3
            Ega =   BCa ^((~BCe)&  BCi );
    2aec:	03c12483          	lw	s1,60(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    2af0:	04412383          	lw	t2,68(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2af4:	0c812023          	sw	s0,192(sp)
    2af8:	05012e03          	lw	t3,80(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2afc:	fff4c493          	not	s1,s1
            Ege =   BCe ^((~BCi)&  BCo );
    2b00:	fff3c393          	not	t2,t2
            Egi =   BCi ^((~BCo)&  BCu );
    2b04:	fffe4b13          	not	s6,t3
            Ego =   BCo ^((~BCu)&  BCa );
    2b08:	05412e03          	lw	t3,84(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2b0c:	0d612223          	sw	s6,196(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2b10:	fffe4413          	not	s0,t3
    2b14:	05812e03          	lw	t3,88(sp)
    2b18:	0c812423          	sw	s0,200(sp)
    2b1c:	fffe4b13          	not	s6,t3
            Egu =   BCu ^((~BCa)&  BCe );
    2b20:	03412e03          	lw	t3,52(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2b24:	0d612623          	sw	s6,204(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2b28:	fffe4413          	not	s0,t3
    2b2c:	03812e03          	lw	t3,56(sp)
    2b30:	0c812823          	sw	s0,208(sp)
    2b34:	fffe4b13          	not	s6,t3
            Eku =   BCu ^((~BCa)&  BCe );
    2b38:	0a412e03          	lw	t3,164(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2b3c:	0d612a23          	sw	s6,212(sp)
            BCa = ROL(Abu, 27);
    2b40:	01b69b13          	slli	s6,a3,0x1b
            Eku =   BCu ^((~BCa)&  BCe );
    2b44:	fffe4413          	not	s0,t3
    2b48:	0a812e03          	lw	t3,168(sp)
    2b4c:	0c812c23          	sw	s0,216(sp)
            BCa = ROL(Abu, 27);
    2b50:	01612823          	sw	s6,16(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2b54:	fffe4413          	not	s0,t3
            BCe = ROL(Aga, 36);
    2b58:	10c12e03          	lw	t3,268(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2b5c:	12812223          	sw	s0,292(sp)
            BCa = ROL(Abu, 27);
    2b60:	0056d693          	srli	a3,a3,0x5
            BCe = ROL(Aga, 36);
    2b64:	004e1613          	slli	a2,t3,0x4
    2b68:	00c12a23          	sw	a2,20(sp)
    2b6c:	01c7d613          	srli	a2,a5,0x1c
    2b70:	00c12c23          	sw	a2,24(sp)
            BCi = ROL(Ake, 10);
    2b74:	016c5613          	srli	a2,s8,0x16
    2b78:	06c12623          	sw	a2,108(sp)
    2b7c:	00ab9613          	slli	a2,s7,0xa
    2b80:	06c12823          	sw	a2,112(sp)
            BCa = ROL(Abu, 27);
    2b84:	01012603          	lw	a2,16(sp)
    2b88:	00575413          	srli	s0,a4,0x5
    2b8c:	01b71713          	slli	a4,a4,0x1b
    2b90:	00c46433          	or	s0,s0,a2
    2b94:	00e6e733          	or	a4,a3,a4
            BCe = ROL(Aga, 36);
    2b98:	01412603          	lw	a2,20(sp)
            BCa = ROL(Abu, 27);
    2b9c:	00812823          	sw	s0,16(sp)
    2ba0:	00070413          	mv	s0,a4
            BCe = ROL(Aga, 36);
    2ba4:	01812703          	lw	a4,24(sp)
            BCi = ROL(Ake, 10);
    2ba8:	07012683          	lw	a3,112(sp)
    2bac:	016bdb93          	srli	s7,s7,0x16
            BCe = ROL(Aga, 36);
    2bb0:	00e66733          	or	a4,a2,a4
            BCi = ROL(Ake, 10);
    2bb4:	06c12603          	lw	a2,108(sp)
            BCe = ROL(Aga, 36);
    2bb8:	00479793          	slli	a5,a5,0x4
    2bbc:	01ce5b13          	srli	s6,t3,0x1c
            BCi = ROL(Ake, 10);
    2bc0:	07712a23          	sw	s7,116(sp)
    2bc4:	00ac1b93          	slli	s7,s8,0xa
            BCo = ROL(Ami, 15);
    2bc8:	01135c13          	srli	s8,t1,0x11
            BCe = ROL(Aga, 36);
    2bcc:	0167eb33          	or	s6,a5,s6
            BCi = ROL(Ake, 10);
    2bd0:	00d666b3          	or	a3,a2,a3
            BCo = ROL(Ami, 15);
    2bd4:	07812c23          	sw	s8,120(sp)
    2bd8:	00fc9c13          	slli	s8,s9,0xf
    2bdc:	07812e23          	sw	s8,124(sp)
            BCe = ROL(Aga, 36);
    2be0:	00e12a23          	sw	a4,20(sp)
    2be4:	01612c23          	sw	s6,24(sp)
            BCi = ROL(Ake, 10);
    2be8:	06d12823          	sw	a3,112(sp)
    2bec:	07412603          	lw	a2,116(sp)
            BCo = ROL(Ami, 15);
    2bf0:	011cdc13          	srli	s8,s9,0x11
            BCu = ROL(Aso, 56);
    2bf4:	018d9e13          	slli	t3,s11,0x18
            BCo = ROL(Ami, 15);
    2bf8:	00f31c93          	slli	s9,t1,0xf
            BCu = ROL(Aso, 56);
    2bfc:	008d5313          	srli	t1,s10,0x8
            BCo = ROL(Ami, 15);
    2c00:	07c12783          	lw	a5,124(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    2c04:	02012703          	lw	a4,32(sp)
            BCi = ROL(Ake, 10);
    2c08:	01766bb3          	or	s7,a2,s7
            BCo = ROL(Ami, 15);
    2c0c:	019c6cb3          	or	s9,s8,s9
    2c10:	07812603          	lw	a2,120(sp)
            BCu = ROL(Aso, 56);
    2c14:	006e6c33          	or	s8,t3,t1
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2c18:	09012303          	lw	t1,144(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    2c1c:	00e876b3          	and	a3,a6,a4
            BCo = ROL(Ami, 15);
    2c20:	00f667b3          	or	a5,a2,a5
            Ebi =   BCi ^((~BCo)&  BCu );
    2c24:	02c12803          	lw	a6,44(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2c28:	01f34633          	xor	a2,t1,t6
            Ebi =   BCi ^((~BCo)&  BCu );
    2c2c:	08812303          	lw	t1,136(sp)
            BCu = ROL(Aso, 56);
    2c30:	018d1d13          	slli	s10,s10,0x18
    2c34:	008ddd93          	srli	s11,s11,0x8
    2c38:	01bd6db3          	or	s11,s10,s11
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2c3c:	09c12d03          	lw	s10,156(sp)
            BCo = ROL(Ami, 15);
    2c40:	07912a23          	sw	s9,116(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2c44:	01037cb3          	and	s9,t1,a6
    2c48:	08c12303          	lw	t1,140(sp)
    2c4c:	03012803          	lw	a6,48(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    2c50:	0ed12423          	sw	a3,232(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2c54:	02412683          	lw	a3,36(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2c58:	01ed4d33          	xor	s10,s10,t5
            Eba =   BCa ^((~BCe)&  BCi );
    2c5c:	01c12e03          	lw	t3,28(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2c60:	0fa12023          	sw	s10,224(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2c64:	01037d33          	and	s10,t1,a6
            Ebo =   BCo ^((~BCu)&  BCa );
    2c68:	0a012303          	lw	t1,160(sp)
            BCu = ROL(Aso, 56);
    2c6c:	07812e23          	sw	s8,124(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2c70:	00d57c33          	and	s8,a0,a3
    2c74:	02812683          	lw	a3,40(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    2c78:	01c8f8b3          	and	a7,a7,t3
            Ebo =   BCo ^((~BCu)&  BCa );
    2c7c:	01f37333          	and	t1,t1,t6
            Eba =   BCa ^((~BCe)&  BCi );
    2c80:	0f112223          	sw	a7,228(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2c84:	0e612e23          	sw	t1,252(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2c88:	00d5f8b3          	and	a7,a1,a3
            Ebo =   BCo ^((~BCu)&  BCa );
    2c8c:	0b412303          	lw	t1,180(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2c90:	0f112823          	sw	a7,240(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2c94:	04412883          	lw	a7,68(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2c98:	01e37333          	and	t1,t1,t5
            Ega =   BCa ^((~BCe)&  BCi );
    2c9c:	0b812583          	lw	a1,184(sp)
            BCi = ROL(Ake, 10);
    2ca0:	07712623          	sw	s7,108(sp)
            BCo = ROL(Ami, 15);
    2ca4:	06f12c23          	sw	a5,120(sp)
            BCu = ROL(Aso, 56);
    2ca8:	09b12023          	sw	s11,128(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2cac:	0cc12e23          	sw	a2,220(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2cb0:	0f812623          	sw	s8,236(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2cb4:	0f912a23          	sw	s9,244(sp)
    2cb8:	0fa12c23          	sw	s10,248(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2cbc:	10612023          	sw	t1,256(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2cc0:	0114f4b3          	and	s1,s1,a7
    2cc4:	04812883          	lw	a7,72(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    2cc8:	ffff4313          	not	t1,t5
            Ege =   BCe ^((~BCi)&  BCo );
    2ccc:	05012b83          	lw	s7,80(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2cd0:	0115ff33          	and	t5,a1,a7
            Ege =   BCe ^((~BCi)&  BCo );
    2cd4:	0bc12583          	lw	a1,188(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2cd8:	05412c03          	lw	s8,84(sp)
    2cdc:	05812c83          	lw	s9,88(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    2ce0:	0175f533          	and	a0,a1,s7
            Egi =   BCi ^((~BCo)&  BCu );
    2ce4:	0c012583          	lw	a1,192(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    2ce8:	ffffce13          	not	t3,t6
            Ego =   BCo ^((~BCu)&  BCa );
    2cec:	03412883          	lw	a7,52(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2cf0:	0185ffb3          	and	t6,a1,s8
    2cf4:	0c412583          	lw	a1,196(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2cf8:	11e12223          	sw	t5,260(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    2cfc:	04c12f03          	lw	t5,76(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2d00:	0195f733          	and	a4,a1,s9
            Ego =   BCo ^((~BCu)&  BCa );
    2d04:	0c812583          	lw	a1,200(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    2d08:	01e3f3b3          	and	t2,t2,t5
            Egu =   BCu ^((~BCa)&  BCe );
    2d0c:	03c12f03          	lw	t5,60(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2d10:	0115f7b3          	and	a5,a1,a7
    2d14:	03812883          	lw	a7,56(sp)
    2d18:	0cc12583          	lw	a1,204(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    2d1c:	06012d83          	lw	s11,96(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    2d20:	10a12423          	sw	a0,264(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2d24:	0115f5b3          	and	a1,a1,a7
    2d28:	10b12a23          	sw	a1,276(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2d2c:	0d012583          	lw	a1,208(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    2d30:	fffdc513          	not	a0,s11
    2d34:	0ac12d83          	lw	s11,172(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2d38:	01e5f5b3          	and	a1,a1,t5
    2d3c:	10b12c23          	sw	a1,280(sp)
    2d40:	04012f03          	lw	t5,64(sp)
    2d44:	0d412583          	lw	a1,212(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2d48:	10f12823          	sw	a5,272(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    2d4c:	06412783          	lw	a5,100(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2d50:	01e5f5b3          	and	a1,a1,t5
    2d54:	10b12e23          	sw	a1,284(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    2d58:	fffdc593          	not	a1,s11
            Eku =   BCu ^((~BCa)&  BCe );
    2d5c:	0d812d83          	lw	s11,216(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    2d60:	05c12d03          	lw	s10,92(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2d64:	10e12623          	sw	a4,268(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2d68:	01ddff33          	and	t5,s11,t4
    2d6c:	12412d83          	lw	s11,292(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    2d70:	fff7c713          	not	a4,a5
    2d74:	12e12023          	sw	a4,288(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2d78:	01adfdb3          	and	s11,s11,s10
            Eki =   BCi ^((~BCo)&  BCu );
    2d7c:	06812703          	lw	a4,104(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    2d80:	0b012603          	lw	a2,176(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2d84:	13b12223          	sw	s11,292(sp)
            BCa = ROL(Abi, 62);
    2d88:	12c12b03          	lw	s6,300(sp)
    2d8c:	12812c83          	lw	s9,296(sp)
            BCe = ROL(Ago, 55);
    2d90:	13412b83          	lw	s7,308(sp)
            BCa = ROL(Abi, 62);
    2d94:	01eb1d93          	slli	s11,s6,0x1e
    2d98:	002b5c13          	srli	s8,s6,0x2
            BCe = ROL(Ago, 55);
    2d9c:	13012b03          	lw	s6,304(sp)
            BCa = ROL(Abi, 62);
    2da0:	09812623          	sw	s8,140(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    2da4:	fffd4813          	not	a6,s10
            BCe = ROL(Ago, 55);
    2da8:	009b5c13          	srli	s8,s6,0x9
            BCa = ROL(Abi, 62);
    2dac:	002cdd13          	srli	s10,s9,0x2
            BCe = ROL(Ago, 55);
    2db0:	017b1b13          	slli	s6,s6,0x17
            BCa = ROL(Abi, 62);
    2db4:	01ec9c93          	slli	s9,s9,0x1e
    2db8:	09912423          	sw	s9,136(sp)
            BCe = ROL(Ago, 55);
    2dbc:	09612823          	sw	s6,144(sp)
            BCa = ROL(Abi, 62);
    2dc0:	01aded33          	or	s10,s11,s10
            BCe = ROL(Ago, 55);
    2dc4:	009bdb13          	srli	s6,s7,0x9
            BCa = ROL(Abi, 62);
    2dc8:	08812d83          	lw	s11,136(sp)
            BCe = ROL(Ago, 55);
    2dcc:	09612e23          	sw	s6,156(sp)
            BCa = ROL(Abi, 62);
    2dd0:	0da12023          	sw	s10,192(sp)
            BCi = ROL(Aku, 39);
    2dd4:	019adb13          	srli	s6,s5,0x19
            BCa = ROL(Abi, 62);
    2dd8:	08c12d03          	lw	s10,140(sp)
            BCi = ROL(Aku, 39);
    2ddc:	007a9a93          	slli	s5,s5,0x7
    2de0:	0b512023          	sw	s5,160(sp)
    2de4:	019a5a93          	srli	s5,s4,0x19
    2de8:	0b512a23          	sw	s5,180(sp)
            BCo = ROL(Ama, 41);
    2dec:	00991a93          	slli	s5,s2,0x9
    2df0:	01795913          	srli	s2,s2,0x17
    2df4:	0b212e23          	sw	s2,188(sp)
            BCa = ROL(Abi, 62);
    2df8:	01aded33          	or	s10,s11,s10
            BCu = ROL(Ase,  2);
    2dfc:	08412903          	lw	s2,132(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    2e00:	fff74693          	not	a3,a4
            BCe = ROL(Ago, 55);
    2e04:	017b9c93          	slli	s9,s7,0x17
            Eko =   BCo ^((~BCu)&  BCa );
    2e08:	fff64713          	not	a4,a2
            BCi = ROL(Aku, 39);
    2e0c:	007a1b93          	slli	s7,s4,0x7
            BCu = ROL(Ase,  2);
    2e10:	13812603          	lw	a2,312(sp)
            BCe = ROL(Ago, 55);
    2e14:	018cecb3          	or	s9,s9,s8
            BCa = ROL(Abi, 62);
    2e18:	0da12223          	sw	s10,196(sp)
            BCi = ROL(Aku, 39);
    2e1c:	0b412c03          	lw	s8,180(sp)
    2e20:	016bed33          	or	s10,s7,s6
    2e24:	0a012b03          	lw	s6,160(sp)
            BCo = ROL(Ama, 41);
    2e28:	0179da13          	srli	s4,s3,0x17
    2e2c:	00999993          	slli	s3,s3,0x9
    2e30:	0b312c23          	sw	s3,184(sp)
    2e34:	014aeab3          	or	s5,s5,s4
            BCu = ROL(Ase,  2);
    2e38:	01e95993          	srli	s3,s2,0x1e
    2e3c:	00261913          	slli	s2,a2,0x2
    2e40:	01e65613          	srli	a2,a2,0x1e
            BCi = ROL(Aku, 39);
    2e44:	018b6b33          	or	s6,s6,s8
            BCe = ROL(Ago, 55);
    2e48:	09012d83          	lw	s11,144(sp)
            BCo = ROL(Ama, 41);
    2e4c:	0bc12c03          	lw	s8,188(sp)
            BCu = ROL(Ase,  2);
    2e50:	0cc12c23          	sw	a2,216(sp)
            BCe = ROL(Ago, 55);
    2e54:	0d912423          	sw	s9,200(sp)
            BCu = ROL(Ase,  2);
    2e58:	08412603          	lw	a2,132(sp)
            BCe = ROL(Ago, 55);
    2e5c:	09c12c83          	lw	s9,156(sp)
            BCo = ROL(Ama, 41);
    2e60:	09512223          	sw	s5,132(sp)
    2e64:	0b812a83          	lw	s5,184(sp)
            BCe = ROL(Ago, 55);
    2e68:	019dedb3          	or	s11,s11,s9
            BCu = ROL(Ase,  2);
    2e6c:	0129e933          	or	s2,s3,s2
            BCo = ROL(Ama, 41);
    2e70:	018aeab3          	or	s5,s5,s8
            BCe = ROL(Ago, 55);
    2e74:	0db12623          	sw	s11,204(sp)
            BCi = ROL(Aku, 39);
    2e78:	0da12823          	sw	s10,208(sp)
    2e7c:	0d612a23          	sw	s6,212(sp)
            BCo = ROL(Ama, 41);
    2e80:	09512423          	sw	s5,136(sp)
            BCu = ROL(Ase,  2);
    2e84:	09212823          	sw	s2,144(sp)
    2e88:	0d812983          	lw	s3,216(sp)
    2e8c:	00261613          	slli	a2,a2,0x2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2e90:	0e412903          	lw	s2,228(sp)
            BCu = ROL(Ase,  2);
    2e94:	00c9e9b3          	or	s3,s3,a2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2e98:	0dc12603          	lw	a2,220(sp)
            BCu = ROL(Ase,  2);
    2e9c:	09312623          	sw	s3,140(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2ea0:	09812983          	lw	s3,152(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2ea4:	01264633          	xor	a2,a2,s2
    2ea8:	08c12e23          	sw	a2,156(sp)
    2eac:	0e812903          	lw	s2,232(sp)
    2eb0:	0e012603          	lw	a2,224(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2eb4:	01c12a03          	lw	s4,28(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2eb8:	0fc12b83          	lw	s7,252(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    2ebc:	01264633          	xor	a2,a2,s2
    2ec0:	0ac12023          	sw	a2,160(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2ec4:	09412903          	lw	s2,148(sp)
    2ec8:	0ec12603          	lw	a2,236(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2ecc:	02412b03          	lw	s6,36(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2ed0:	0f812a83          	lw	s5,248(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2ed4:	01264633          	xor	a2,a2,s2
    2ed8:	08c12a23          	sw	a2,148(sp)
    2edc:	0f012603          	lw	a2,240(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2ee0:	016bcb33          	xor	s6,s7,s6
    2ee4:	03612223          	sw	s6,36(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    2ee8:	01364633          	xor	a2,a2,s3
    2eec:	08c12c23          	sw	a2,152(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2ef0:	0f412603          	lw	a2,244(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2ef4:	03412b03          	lw	s6,52(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2ef8:	10012b83          	lw	s7,256(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2efc:	01464633          	xor	a2,a2,s4
    2f00:	02012a03          	lw	s4,32(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2f04:	0164c4b3          	xor	s1,s1,s6
    2f08:	02912a23          	sw	s1,52(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2f0c:	014acab3          	xor	s5,s5,s4
            Ebo =   BCo ^((~BCu)&  BCa );
    2f10:	02812a03          	lw	s4,40(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2f14:	10412483          	lw	s1,260(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2f18:	00c12e23          	sw	a2,28(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    2f1c:	014bca33          	xor	s4,s7,s4
    2f20:	03412423          	sw	s4,40(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2f24:	03812a03          	lw	s4,56(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    2f28:	03512023          	sw	s5,32(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    2f2c:	01337333          	and	t1,t1,s3
            Ega =   BCa ^((~BCe)&  BCi );
    2f30:	0144c4b3          	xor	s1,s1,s4
            Ege =   BCe ^((~BCi)&  BCo );
    2f34:	03c12a03          	lw	s4,60(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    2f38:	02912c23          	sw	s1,56(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    2f3c:	fffec893          	not	a7,t4
            Ege =   BCe ^((~BCi)&  BCo );
    2f40:	0143ca33          	xor	s4,t2,s4
    2f44:	03412e23          	sw	s4,60(sp)
    2f48:	04012383          	lw	t2,64(sp)
    2f4c:	10812b03          	lw	s6,264(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2f50:	05012b83          	lw	s7,80(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2f54:	05412c03          	lw	s8,84(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    2f58:	007b43b3          	xor	t2,s6,t2
    2f5c:	04712023          	sw	t2,64(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2f60:	04412383          	lw	t2,68(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2f64:	05812c83          	lw	s9,88(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2f68:	0b012603          	lw	a2,176(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    2f6c:	007fc3b3          	xor	t2,t6,t2
    2f70:	04712223          	sw	t2,68(sp)
    2f74:	04812f83          	lw	t6,72(sp)
    2f78:	10c12383          	lw	t2,268(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    2f7c:	06412a03          	lw	s4,100(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2f80:	00cf4f33          	xor	t5,t5,a2
            Egi =   BCi ^((~BCo)&  BCu );
    2f84:	01f3cfb3          	xor	t6,t2,t6
    2f88:	05f12423          	sw	t6,72(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2f8c:	11012383          	lw	t2,272(sp)
    2f90:	04c12f83          	lw	t6,76(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    2f94:	06012983          	lw	s3,96(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2f98:	0be12a23          	sw	t5,180(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2f9c:	01f3cfb3          	xor	t6,t2,t6
    2fa0:	11412383          	lw	t2,276(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    2fa4:	06812f03          	lw	t5,104(sp)
    2fa8:	01457533          	and	a0,a0,s4
            Ego =   BCo ^((~BCu)&  BCa );
    2fac:	0173cbb3          	xor	s7,t2,s7
    2fb0:	05712823          	sw	s7,80(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2fb4:	11812b83          	lw	s7,280(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    2fb8:	01d54533          	xor	a0,a0,t4
            Eka =   BCa ^((~BCe)&  BCi );
    2fbc:	0ac12383          	lw	t2,172(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2fc0:	018bcc33          	xor	s8,s7,s8
    2fc4:	11c12b83          	lw	s7,284(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    2fc8:	05f12623          	sw	t6,76(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2fcc:	05812a23          	sw	s8,84(sp)
    2fd0:	019bccb3          	xor	s9,s7,s9
            Eku =   BCu ^((~BCa)&  BCe );
    2fd4:	12412b83          	lw	s7,292(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    2fd8:	0a412f83          	lw	t6,164(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    2fdc:	05912c23          	sw	s9,88(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    2fe0:	005bcbb3          	xor	s7,s7,t0
    2fe4:	0b712c23          	sw	s7,184(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    2fe8:	012e7e33          	and	t3,t3,s2
            Eka =   BCa ^((~BCe)&  BCi );
    2fec:	0138f8b3          	and	a7,a7,s3
            Ema =   BCa ^((~BCe)&  BCi );
    2ff0:	01412903          	lw	s2,20(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    2ff4:	12012983          	lw	s3,288(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    2ff8:	01e5f5b3          	and	a1,a1,t5
            Eko =   BCo ^((~BCu)&  BCa );
    2ffc:	0a812f03          	lw	t5,168(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    3000:	01812b03          	lw	s6,24(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    3004:	07c12a03          	lw	s4,124(sp)
    3008:	08012483          	lw	s1,128(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    300c:	0aa12623          	sw	a0,172(sp)
    3010:	05c12503          	lw	a0,92(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    3014:	0056f6b3          	and	a3,a3,t0
            Emo =   BCo ^((~BCu)&  BCa );
    3018:	fffa4a93          	not	s5,s4
            Eke =   BCe ^((~BCi)&  BCo );
    301c:	00a5c5b3          	xor	a1,a1,a0
            Emo =   BCo ^((~BCu)&  BCa );
    3020:	fff4ca13          	not	s4,s1
            Ebu =   BCu ^((~BCa)&  BCe );
    3024:	02c12483          	lw	s1,44(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    3028:	0076c533          	xor	a0,a3,t2
            Eke =   BCe ^((~BCi)&  BCo );
    302c:	04b12e23          	sw	a1,92(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    3030:	06412683          	lw	a3,100(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    3034:	06012583          	lw	a1,96(sp)
    3038:	00c9f633          	and	a2,s3,a2
            Eko =   BCo ^((~BCu)&  BCa );
    303c:	01f77733          	and	a4,a4,t6
            Ebu =   BCu ^((~BCa)&  BCe );
    3040:	009e4e33          	xor	t3,t3,s1
            Eme =   BCe ^((~BCi)&  BCo );
    3044:	06c12c03          	lw	s8,108(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    3048:	00b645b3          	xor	a1,a2,a1
            Eko =   BCo ^((~BCu)&  BCa );
    304c:	00d746b3          	xor	a3,a4,a3
            Ebu =   BCu ^((~BCa)&  BCe );
    3050:	03c12623          	sw	t3,44(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    3054:	06812703          	lw	a4,104(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    3058:	03012e03          	lw	t3,48(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    305c:	06c12603          	lw	a2,108(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    3060:	fff2c793          	not	a5,t0
            Eka =   BCa ^((~BCe)&  BCi );
    3064:	00787833          	and	a6,a6,t2
            Emi =   BCi ^((~BCo)&  BCu );
    3068:	07812283          	lw	t0,120(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    306c:	06b12023          	sw	a1,96(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    3070:	07412583          	lw	a1,116(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    3074:	01e7f7b3          	and	a5,a5,t5
            Eka =   BCa ^((~BCe)&  BCi );
    3078:	01e84833          	xor	a6,a6,t5
            Eme =   BCe ^((~BCi)&  BCo );
    307c:	07012b83          	lw	s7,112(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    3080:	07412983          	lw	s3,116(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    3084:	01c34333          	xor	t1,t1,t3
            Eka =   BCa ^((~BCe)&  BCi );
    3088:	01f8c8b3          	xor	a7,a7,t6
            Ema =   BCa ^((~BCe)&  BCi );
    308c:	fff94d93          	not	s11,s2
            Eme =   BCe ^((~BCi)&  BCo );
    3090:	fffc4c93          	not	s9,s8
            Eka =   BCa ^((~BCe)&  BCi );
    3094:	0b012423          	sw	a6,168(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    3098:	00e7c833          	xor	a6,a5,a4
            Emi =   BCi ^((~BCo)&  BCu );
    309c:	08012483          	lw	s1,128(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    30a0:	01412703          	lw	a4,20(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    30a4:	00cdfdb3          	and	s11,s11,a2
    30a8:	fffb4d13          	not	s10,s6
    30ac:	07012603          	lw	a2,112(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    30b0:	fff2cb13          	not	s6,t0
            Ebu =   BCu ^((~BCa)&  BCe );
    30b4:	02612823          	sw	t1,48(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    30b8:	01012283          	lw	t0,16(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    30bc:	0b112223          	sw	a7,164(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    30c0:	0aa12823          	sw	a0,176(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    30c4:	07012423          	sw	a6,104(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    30c8:	07c12503          	lw	a0,124(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    30cc:	00bcfcb3          	and	s9,s9,a1
            Emo =   BCo ^((~BCu)&  BCa );
    30d0:	0a812e23          	sw	s0,188(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    30d4:	07812583          	lw	a1,120(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    30d8:	06d12223          	sw	a3,100(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    30dc:	01812683          	lw	a3,24(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    30e0:	0c812803          	lw	a6,200(sp)
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
    30e4:	08812f03          	lw	t5,136(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    30e8:	08c12f83          	lw	t6,140(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    30ec:	fffbcc13          	not	s8,s7
            Emi =   BCi ^((~BCo)&  BCu );
    30f0:	fff9cb93          	not	s7,s3
            Esa =   BCa ^((~BCe)&  BCi );
    30f4:	0cc12883          	lw	a7,204(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    30f8:	0d412e03          	lw	t3,212(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    30fc:	08412e83          	lw	t4,132(sp)
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
    3100:	09c12783          	lw	a5,156(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    3104:	00abfbb3          	and	s7,s7,a0
    3108:	009b7b33          	and	s6,s6,s1
            Eso =   BCo ^((~BCu)&  BCa );
    310c:	ffffc513          	not	a0,t6
            Esa =   BCa ^((~BCe)&  BCi );
    3110:	fff84493          	not	s1,a6
            Eso =   BCo ^((~BCu)&  BCa );
    3114:	09012f83          	lw	t6,144(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    3118:	ffff4813          	not	a6,t5
            BCa = Eba^Ega^Eka^Ema^Esa;
    311c:	03412f03          	lw	t5,52(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    3120:	00bc7c33          	and	s8,s8,a1
            Emo =   BCo ^((~BCu)&  BCa );
    3124:	008afab3          	and	s5,s5,s0
    3128:	005a7a33          	and	s4,s4,t0
            Emu =   BCu ^((~BCa)&  BCe );
    312c:	fff44993          	not	s3,s0
    3130:	fff2c913          	not	s2,t0
            Esa =   BCa ^((~BCe)&  BCi );
    3134:	fff8c413          	not	s0,a7
            Ese =   BCe ^((~BCi)&  BCo );
    3138:	fffe4293          	not	t0,t3
            Esi =   BCi ^((~BCo)&  BCu );
    313c:	fffec893          	not	a7,t4
            Esu =   BCu ^((~BCa)&  BCe );
    3140:	0c412e03          	lw	t3,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    3144:	0a012e83          	lw	t4,160(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    3148:	ffffc593          	not	a1,t6
            BCa = Eba^Ega^Eka^Ema^Esa;
    314c:	01e7cfb3          	xor	t6,a5,t5
    3150:	03812f03          	lw	t5,56(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    3154:	0d012303          	lw	t1,208(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    3158:	09412783          	lw	a5,148(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    315c:	00e9f9b3          	and	s3,s3,a4
    3160:	00d97933          	and	s2,s2,a3
            BCe = Ebe^Ege^Eke^Eme^Ese;
    3164:	04012703          	lw	a4,64(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    3168:	fffe4693          	not	a3,t3
            BCa = Eba^Ega^Eka^Ema^Esa;
    316c:	01eecf33          	xor	t5,t4,t5
            BCe = Ebe^Ege^Eke^Eme^Ese;
    3170:	09812e03          	lw	t3,152(sp)
    3174:	03c12e83          	lw	t4,60(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    3178:	fff34393          	not	t2,t1
            BCe = Ebe^Ege^Eke^Eme^Ese;
    317c:	00ee4e33          	xor	t3,t3,a4
            Esu =   BCu ^((~BCa)&  BCe );
    3180:	0c012303          	lw	t1,192(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    3184:	04412703          	lw	a4,68(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    3188:	01d7ceb3          	xor	t4,a5,t4
            BCi = Ebi^Egi^Eki^Emi^Esi;
    318c:	01c12783          	lw	a5,28(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    3190:	00cd7d33          	and	s10,s10,a2
            Esu =   BCu ^((~BCa)&  BCe );
    3194:	fff34613          	not	a2,t1
            BCi = Ebi^Egi^Eki^Emi^Esi;
    3198:	00e7c333          	xor	t1,a5,a4
    319c:	04812783          	lw	a5,72(sp)
    31a0:	02012703          	lw	a4,32(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    31a4:	0d212c23          	sw	s2,216(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    31a8:	04c12903          	lw	s2,76(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    31ac:	00f74733          	xor	a4,a4,a5
            BCo = Ebo^Ego^Eko^Emo^Eso;
    31b0:	02412783          	lw	a5,36(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    31b4:	0c712e23          	sw	t2,220(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    31b8:	05012383          	lw	t2,80(sp)
    31bc:	0127c7b3          	xor	a5,a5,s2
    31c0:	02812903          	lw	s2,40(sp)
    31c4:	007943b3          	xor	t2,s2,t2
    31c8:	0e712023          	sw	t2,224(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    31cc:	0b412903          	lw	s2,180(sp)
    31d0:	05412383          	lw	t2,84(sp)
    31d4:	0123c3b3          	xor	t2,t2,s2
    31d8:	0e712223          	sw	t2,228(sp)
    31dc:	0b812903          	lw	s2,184(sp)
    31e0:	05812383          	lw	t2,88(sp)
    31e4:	0123c3b3          	xor	t2,t2,s2
            Ema =   BCa ^((~BCe)&  BCi );
    31e8:	0bc12903          	lw	s2,188(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    31ec:	0e712423          	sw	t2,232(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    31f0:	012dc3b3          	xor	t2,s11,s2
            Eme =   BCe ^((~BCi)&  BCo );
    31f4:	01412903          	lw	s2,20(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    31f8:	01012d83          	lw	s11,16(sp)
    31fc:	0a712e23          	sw	t2,188(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    3200:	012cccb3          	xor	s9,s9,s2
    3204:	01812903          	lw	s2,24(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    3208:	01bd4d33          	xor	s10,s10,s11
            Ese =   BCe ^((~BCi)&  BCo );
    320c:	0dc12383          	lw	t2,220(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    3210:	012c4db3          	xor	s11,s8,s2
            Emi =   BCi ^((~BCo)&  BCu );
    3214:	06c12c03          	lw	s8,108(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    3218:	07812903          	lw	s2,120(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    321c:	01b12c23          	sw	s11,24(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    3220:	018bcc33          	xor	s8,s7,s8
    3224:	07012b83          	lw	s7,112(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    3228:	08012d83          	lw	s11,128(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    322c:	01a12823          	sw	s10,16(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    3230:	017b4bb3          	xor	s7,s6,s7
            Emo =   BCo ^((~BCu)&  BCa );
    3234:	07412b03          	lw	s6,116(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    3238:	0d012d03          	lw	s10,208(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    323c:	01912a23          	sw	s9,20(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    3240:	016acb33          	xor	s6,s5,s6
    3244:	012a4ab3          	xor	s5,s4,s2
            Emu =   BCu ^((~BCa)&  BCe );
    3248:	07c12a03          	lw	s4,124(sp)
    324c:	0d812903          	lw	s2,216(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    3250:	07612a23          	sw	s6,116(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    3254:	0149cb33          	xor	s6,s3,s4
            Esi =   BCi ^((~BCo)&  BCu );
    3258:	08c12a03          	lw	s4,140(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    325c:	08812983          	lw	s3,136(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    3260:	01b94db3          	xor	s11,s2,s11
            Esi =   BCi ^((~BCo)&  BCu );
    3264:	0148f8b3          	and	a7,a7,s4
            Ese =   BCe ^((~BCi)&  BCo );
    3268:	08412903          	lw	s2,132(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    326c:	09012a03          	lw	s4,144(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    3270:	07812623          	sw	s8,108(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    3274:	07612c23          	sw	s6,120(sp)
    3278:	07b12e23          	sw	s11,124(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    327c:	0c012b03          	lw	s6,192(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    3280:	0d412d83          	lw	s11,212(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    3284:	0132f2b3          	and	t0,t0,s3
            Esi =   BCi ^((~BCo)&  BCu );
    3288:	0d112823          	sw	a7,208(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    328c:	07712823          	sw	s7,112(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    3290:	0c412b83          	lw	s7,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    3294:	0a412983          	lw	s3,164(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    3298:	01487833          	and	a6,a6,s4
            BCe = Ebe^Ege^Eke^Eme^Ese;
    329c:	05c12a03          	lw	s4,92(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    32a0:	013fcfb3          	xor	t6,t6,s3
    32a4:	0a812983          	lw	s3,168(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    32a8:	0cc12c83          	lw	s9,204(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    32ac:	014e4e33          	xor	t3,t3,s4
            BCa = Eba^Ega^Eka^Ema^Esa;
    32b0:	013f4f33          	xor	t5,t5,s3
            BCe = Ebe^Ege^Eke^Eme^Ese;
    32b4:	0ac12983          	lw	s3,172(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    32b8:	0b012a03          	lw	s4,176(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    32bc:	0192c2b3          	xor	t0,t0,s9
            BCe = Ebe^Ege^Eke^Eme^Ese;
    32c0:	013eceb3          	xor	t4,t4,s3
            BCi = Ebi^Egi^Eki^Emi^Esi;
    32c4:	06012983          	lw	s3,96(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    32c8:	0123f3b3          	and	t2,t2,s2
            BCi = Ebi^Egi^Eki^Emi^Esi;
    32cc:	01474733          	xor	a4,a4,s4
            BCo = Ebo^Ego^Eko^Emo^Eso;
    32d0:	06412903          	lw	s2,100(sp)
    32d4:	0e012a03          	lw	s4,224(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    32d8:	01334333          	xor	t1,t1,s3
            Ese =   BCe ^((~BCi)&  BCo );
    32dc:	0c512023          	sw	t0,192(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    32e0:	06812983          	lw	s3,104(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    32e4:	01b842b3          	xor	t0,a6,s11
            Eso =   BCo ^((~BCu)&  BCa );
    32e8:	08412803          	lw	a6,132(sp)
    32ec:	01657533          	and	a0,a0,s6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    32f0:	0127c7b3          	xor	a5,a5,s2
            Eso =   BCo ^((~BCu)&  BCa );
    32f4:	01054833          	xor	a6,a0,a6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    32f8:	013a4933          	xor	s2,s4,s3
            Eso =   BCo ^((~BCu)&  BCa );
    32fc:	08812503          	lw	a0,136(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    3300:	0e412a03          	lw	s4,228(sp)
    3304:	02c12983          	lw	s3,44(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    3308:	0c812c03          	lw	s8,200(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    330c:	0175f5b3          	and	a1,a1,s7
            BCu = Ebu^Egu^Eku^Emu^Esu;
    3310:	0e812883          	lw	a7,232(sp)
    3314:	013a49b3          	xor	s3,s4,s3
            Eso =   BCo ^((~BCu)&  BCa );
    3318:	00a5c533          	xor	a0,a1,a0
            BCu = Ebu^Egu^Eku^Emu^Esu;
    331c:	03012a03          	lw	s4,48(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    3320:	08c12583          	lw	a1,140(sp)
    3324:	01867633          	and	a2,a2,s8
            BCu = Ebu^Egu^Eku^Emu^Esu;
    3328:	0148ca33          	xor	s4,a7,s4
            Esu =   BCu ^((~BCa)&  BCe );
    332c:	00b64633          	xor	a2,a2,a1
            Esi =   BCi ^((~BCo)&  BCu );
    3330:	0d012883          	lw	a7,208(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    3334:	08c12423          	sw	a2,136(sp)
    3338:	09012603          	lw	a2,144(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    333c:	01b47433          	and	s0,s0,s11
    3340:	01744433          	xor	s0,s0,s7
            Esu =   BCu ^((~BCa)&  BCe );
    3344:	0196f6b3          	and	a3,a3,s9
            Ese =   BCe ^((~BCi)&  BCo );
    3348:	0183cbb3          	xor	s7,t2,s8
            Esi =   BCi ^((~BCo)&  BCu );
    334c:	01a8c8b3          	xor	a7,a7,s10
            Esu =   BCu ^((~BCa)&  BCe );
    3350:	00c6cdb3          	xor	s11,a3,a2
            BCe = Ebe^Ege^Eke^Eme^Ese;
    3354:	01412c83          	lw	s9,20(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    3358:	0bc12683          	lw	a3,188(sp)
    335c:	01012603          	lw	a2,16(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    3360:	01812583          	lw	a1,24(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    3364:	06c12c03          	lw	s8,108(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    3368:	0d112223          	sw	a7,196(sp)
    336c:	0c512423          	sw	t0,200(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    3370:	09012223          	sw	a6,132(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    3374:	09712023          	sw	s7,128(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    3378:	07012b83          	lw	s7,112(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    337c:	07c12803          	lw	a6,124(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    3380:	01a4f4b3          	and	s1,s1,s10
    3384:	0164c4b3          	xor	s1,s1,s6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    3388:	07412b03          	lw	s6,116(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    338c:	00050d13          	mv	s10,a0
            BCu = Ebu^Egu^Eku^Emu^Esu;
    3390:	010a42b3          	xor	t0,s4,a6
    3394:	07812503          	lw	a0,120(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    3398:	08412803          	lw	a6,132(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    339c:	00dfcfb3          	xor	t6,t6,a3
    33a0:	00cf4f33          	xor	t5,t5,a2
            BCe = Ebe^Ege^Eke^Eme^Ese;
    33a4:	08012683          	lw	a3,128(sp)
    33a8:	0c012603          	lw	a2,192(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    33ac:	0167c7b3          	xor	a5,a5,s6
            BCu = Ebu^Egu^Eku^Emu^Esu;
    33b0:	00a9c3b3          	xor	t2,s3,a0
            BCe = Ebe^Ege^Eke^Eme^Ese;
    33b4:	019eceb3          	xor	t4,t4,s9
            BCo = Ebo^Ego^Eko^Emo^Eso;
    33b8:	0107c9b3          	xor	s3,a5,a6
            BCe = Ebe^Ege^Eke^Eme^Ese;
    33bc:	00be4e33          	xor	t3,t3,a1
            BCu = Ebu^Egu^Eku^Emu^Esu;
    33c0:	08812783          	lw	a5,136(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    33c4:	00deceb3          	xor	t4,t4,a3
    33c8:	00ce4e33          	xor	t3,t3,a2
            BCi = Ebi^Egi^Eki^Emi^Esi;
    33cc:	0c812583          	lw	a1,200(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    33d0:	01594933          	xor	s2,s2,s5
            BCa = Eba^Ega^Eka^Ema^Esa;
    33d4:	008f4f33          	xor	t5,t5,s0
            BCo = Ebo^Ego^Eko^Emo^Eso;
    33d8:	01a94933          	xor	s2,s2,s10
            BCi = Ebi^Egi^Eki^Emi^Esi;
    33dc:	0c412883          	lw	a7,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    33e0:	08812823          	sw	s0,144(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    33e4:	0da12623          	sw	s10,204(sp)

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
    33e8:	01fed413          	srli	s0,t4,0x1f
    33ec:	001e1d13          	slli	s10,t3,0x1
            BCa = Eba^Ega^Eka^Ema^Esa;
    33f0:	009fcfb3          	xor	t6,t6,s1
            BCu = Ebu^Egu^Eku^Emu^Esu;
    33f4:	00f3c3b3          	xor	t2,t2,a5
    33f8:	01b2c2b3          	xor	t0,t0,s11
            BCi = Ebi^Egi^Eki^Emi^Esi;
    33fc:	01774733          	xor	a4,a4,s7
            Da = BCu^ROL(BCe, 1);
    3400:	01a46433          	or	s0,s0,s10
            BCa = Eba^Ega^Eka^Ema^Esa;
    3404:	08912623          	sw	s1,140(sp)
            Da = BCu^ROL(BCe, 1);
    3408:	001e9d13          	slli	s10,t4,0x1
    340c:	01fe5493          	srli	s1,t3,0x1f
            BCi = Ebi^Egi^Eki^Emi^Esi;
    3410:	00b74a33          	xor	s4,a4,a1
            Da = BCu^ROL(BCe, 1);
    3414:	01a4e4b3          	or	s1,s1,s10
            BCi = Ebi^Egi^Eki^Emi^Esi;
    3418:	01834333          	xor	t1,t1,s8
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
    341c:	01f3dd13          	srli	s10,t2,0x1f
    3420:	00129593          	slli	a1,t0,0x1
            BCi = Ebi^Egi^Eki^Emi^Esi;
    3424:	01134333          	xor	t1,t1,a7
            Di = BCe^ROL(BCo, 1);
    3428:	01f95b13          	srli	s6,s2,0x1f
    342c:	00199893          	slli	a7,s3,0x1
            Do = BCi^ROL(BCu, 1);
    3430:	00bd65b3          	or	a1,s10,a1
    3434:	01f2dd13          	srli	s10,t0,0x1f
            Da = BCu^ROL(BCe, 1);
    3438:	005442b3          	xor	t0,s0,t0

            Eba ^= Da;
            BCa = Eba;
            Ege ^= De;
            BCe = ROL(Ege, 44);
            Eki ^= Di;
    343c:	06012403          	lw	s0,96(sp)
            De = BCa^ROL(BCi, 1);
    3440:	00131c13          	slli	s8,t1,0x1
    3444:	01fa5713          	srli	a4,s4,0x1f
            Di = BCe^ROL(BCo, 1);
    3448:	011b68b3          	or	a7,s6,a7
    344c:	01d8c8b3          	xor	a7,a7,t4
    3450:	01f9db93          	srli	s7,s3,0x1f
    3454:	00191813          	slli	a6,s2,0x1
            Do = BCi^ROL(BCu, 1);
    3458:	00139513          	slli	a0,t2,0x1
            De = BCa^ROL(BCi, 1);
    345c:	01876733          	or	a4,a4,s8
    3460:	01f74733          	xor	a4,a4,t6
    3464:	001a1c93          	slli	s9,s4,0x1
    3468:	01f35793          	srli	a5,t1,0x1f
            Du = BCo^ROL(BCa, 1);
    346c:	001f9613          	slli	a2,t6,0x1
            Di = BCe^ROL(BCo, 1);
    3470:	010be833          	or	a6,s7,a6
            Do = BCi^ROL(BCu, 1);
    3474:	00ad6533          	or	a0,s10,a0
            Eki ^= Di;
    3478:	01144bb3          	xor	s7,s0,a7
            Du = BCo^ROL(BCa, 1);
    347c:	01ffdd13          	srli	s10,t6,0x1f
            Eki ^= Di;
    3480:	0b012403          	lw	s0,176(sp)
            Ege ^= De;
    3484:	04012f83          	lw	t6,64(sp)
            De = BCa^ROL(BCi, 1);
    3488:	0197e7b3          	or	a5,a5,s9
    348c:	01e7c7b3          	xor	a5,a5,t5
            Di = BCe^ROL(BCo, 1);
    3490:	01c84833          	xor	a6,a6,t3
            Du = BCo^ROL(BCa, 1);
    3494:	001f1693          	slli	a3,t5,0x1
            Do = BCi^ROL(BCu, 1);
    3498:	0145c5b3          	xor	a1,a1,s4
            Ege ^= De;
    349c:	00ffcc33          	xor	s8,t6,a5
            Eki ^= Di;
    34a0:	01044b33          	xor	s6,s0,a6
            Abo =   BCo ^((~BCu)&  BCa );
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
    34a4:	05412f83          	lw	t6,84(sp)
            Ege ^= De;
    34a8:	03c12a03          	lw	s4,60(sp)
            Emo ^= Do;
    34ac:	07412403          	lw	s0,116(sp)
            Du = BCo^ROL(BCa, 1);
    34b0:	00dd66b3          	or	a3,s10,a3
    34b4:	01ff5d13          	srli	s10,t5,0x1f
    34b8:	00cd6633          	or	a2,s10,a2
            Do = BCi^ROL(BCu, 1);
    34bc:	00654533          	xor	a0,a0,t1
            Du = BCo^ROL(BCa, 1);
    34c0:	01364633          	xor	a2,a2,s3
            Ege ^= De;
    34c4:	00ea4cb3          	xor	s9,s4,a4
            Emo ^= Do;
    34c8:	00a44a33          	xor	s4,s0,a0
            Egu ^= Du;
    34cc:	00cfc433          	xor	s0,t6,a2
    34d0:	05812f83          	lw	t6,88(sp)
            Du = BCo^ROL(BCa, 1);
    34d4:	0126c6b3          	xor	a3,a3,s2
            Ebo ^= Do;
    34d8:	02412f03          	lw	t5,36(sp)
            Da = BCu^ROL(BCe, 1);
    34dc:	0074c3b3          	xor	t2,s1,t2
            Egu ^= Du;
    34e0:	00dfc4b3          	xor	s1,t6,a3
            BCe = ROL(Egu, 20);
            Eka ^= Da;
    34e4:	0a412f83          	lw	t6,164(sp)
            Esu ^= Du;
    34e8:	08812303          	lw	t1,136(sp)
            Ebo ^= Do;
    34ec:	00af4933          	xor	s2,t5,a0
            BCi = ROL(Eka, 3);
            Eme ^= De;
    34f0:	01812e03          	lw	t3,24(sp)
            Ebo ^= Do;
    34f4:	02812f03          	lw	t5,40(sp)
            Eka ^= Da;
    34f8:	007fceb3          	xor	t4,t6,t2
    34fc:	0a812f83          	lw	t6,168(sp)
            Esu ^= Du;
    3500:	00c34d33          	xor	s10,t1,a2
            Age =   BCe ^((~BCi)&  BCo );
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
    3504:	09412303          	lw	t1,148(sp)
            Ebo ^= Do;
    3508:	00bf49b3          	xor	s3,t5,a1
            Eme ^= De;
    350c:	00fe4f33          	xor	t5,t3,a5
            Esi ^= Di;
    3510:	0c412e03          	lw	t3,196(sp)
            Eka ^= Da;
    3514:	005fcfb3          	xor	t6,t6,t0
            Ebe ^= De;
    3518:	00e34333          	xor	t1,t1,a4
            Eka ^= Da;
    351c:	05d12a23          	sw	t4,84(sp)
    3520:	05f12c23          	sw	t6,88(sp)
            Esi ^= Di;
    3524:	011e4eb3          	xor	t4,t3,a7
            Eme ^= De;
    3528:	01412f83          	lw	t6,20(sp)
            Esi ^= Di;
    352c:	0c812e03          	lw	t3,200(sp)
            Ebe ^= De;
    3530:	06612a23          	sw	t1,116(sp)
    3534:	09812303          	lw	t1,152(sp)
            Esi ^= Di;
    3538:	010e4e33          	xor	t3,t3,a6
            Emo ^= Do;
    353c:	00bacab3          	xor	s5,s5,a1
            Ebe ^= De;
    3540:	00f34333          	xor	t1,t1,a5
    3544:	08612423          	sw	t1,136(sp)
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
    3548:	04412303          	lw	t1,68(sp)
            Esu ^= Du;
    354c:	00ddcdb3          	xor	s11,s11,a3
            Eme ^= De;
    3550:	00efcfb3          	xor	t6,t6,a4
            Egi ^= Di;
    3554:	01134333          	xor	t1,t1,a7
    3558:	08612a23          	sw	t1,148(sp)
    355c:	04812303          	lw	t1,72(sp)
    3560:	01034333          	xor	t1,t1,a6
    3564:	08612c23          	sw	t1,152(sp)
            BCe = ROL(Egi, 6);
            Eko ^= Do;
    3568:	06412303          	lw	t1,100(sp)
    356c:	00a34333          	xor	t1,t1,a0
    3570:	0a612223          	sw	t1,164(sp)
    3574:	06812303          	lw	t1,104(sp)
    3578:	00b34333          	xor	t1,t1,a1
    357c:	0a612423          	sw	t1,168(sp)
            BCi = ROL(Eko, 25);
            Emu ^= Du;
    3580:	07812303          	lw	t1,120(sp)
    3584:	00c34333          	xor	t1,t1,a2
    3588:	0a612823          	sw	t1,176(sp)
    358c:	07c12303          	lw	t1,124(sp)
    3590:	00d34333          	xor	t1,t1,a3
    3594:	0c612223          	sw	t1,196(sp)
            BCo = ROL(Emu, 8);
            Esa ^= Da;
    3598:	08c12303          	lw	t1,140(sp)
    359c:	00734333          	xor	t1,t1,t2
    35a0:	0c612423          	sw	t1,200(sp)
    35a4:	09012303          	lw	t1,144(sp)
    35a8:	00534333          	xor	t1,t1,t0
    35ac:	0c612c23          	sw	t1,216(sp)
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
    35b0:	02c12303          	lw	t1,44(sp)
    35b4:	00c34333          	xor	t1,t1,a2
    35b8:	0c612e23          	sw	t1,220(sp)
    35bc:	03012303          	lw	t1,48(sp)
    35c0:	00d34333          	xor	t1,t1,a3
    35c4:	0e612023          	sw	t1,224(sp)
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
    35c8:	03412303          	lw	t1,52(sp)
    35cc:	00734333          	xor	t1,t1,t2
    35d0:	0e612223          	sw	t1,228(sp)
    35d4:	03812303          	lw	t1,56(sp)
    35d8:	00534333          	xor	t1,t1,t0
    35dc:	0e612423          	sw	t1,232(sp)
            BCe = ROL(Ega, 36);
            Eke ^= De;
    35e0:	0ac12303          	lw	t1,172(sp)
    35e4:	00e34333          	xor	t1,t1,a4
    35e8:	0e612623          	sw	t1,236(sp)
    35ec:	05c12303          	lw	t1,92(sp)
    35f0:	00f34333          	xor	t1,t1,a5
    35f4:	0e612823          	sw	t1,240(sp)
            BCi = ROL(Eke, 10);
            Emi ^= Di;
    35f8:	06c12303          	lw	t1,108(sp)
    35fc:	01134333          	xor	t1,t1,a7
    3600:	0e612a23          	sw	t1,244(sp)
    3604:	07012303          	lw	t1,112(sp)
    3608:	01034333          	xor	t1,t1,a6
    360c:	0e612c23          	sw	t1,248(sp)
            BCo = ROL(Emi, 15);
            Eso ^= Do;
    3610:	08412303          	lw	t1,132(sp)
    3614:	00a34333          	xor	t1,t1,a0
    3618:	10612423          	sw	t1,264(sp)
    361c:	0cc12303          	lw	t1,204(sp)
    3620:	00b34333          	xor	t1,t1,a1
    3624:	10612223          	sw	t1,260(sp)
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
    3628:	01c12303          	lw	t1,28(sp)
    362c:	011348b3          	xor	a7,t1,a7
    3630:	02012303          	lw	t1,32(sp)
    3634:	01034833          	xor	a6,t1,a6
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
    3638:	04c12303          	lw	t1,76(sp)
    363c:	00a34533          	xor	a0,t1,a0
    3640:	05012303          	lw	t1,80(sp)
    3644:	00b345b3          	xor	a1,t1,a1
            BCe = ROL(Ego, 55);
            Eku ^= Du;
    3648:	0b412303          	lw	t1,180(sp)
    364c:	00c34633          	xor	a2,t1,a2
    3650:	0b812303          	lw	t1,184(sp)
    3654:	00d346b3          	xor	a3,t1,a3
            BCi = ROL(Eku, 39);
            Ema ^= Da;
    3658:	0bc12303          	lw	t1,188(sp)
    365c:	00734333          	xor	t1,t1,t2
    3660:	14612223          	sw	t1,324(sp)
    3664:	01012303          	lw	t1,16(sp)
    3668:	00534333          	xor	t1,t1,t0
    366c:	14612023          	sw	t1,320(sp)
            BCo = ROL(Ema, 41);
            Ese ^= De;
    3670:	08012303          	lw	t1,128(sp)
    3674:	00e34733          	xor	a4,t1,a4
    3678:	0c012303          	lw	t1,192(sp)
    367c:	14e12423          	sw	a4,328(sp)
    3680:	00f34733          	xor	a4,t1,a5
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    3684:	00c12783          	lw	a5,12(sp)
    3688:	0087a303          	lw	t1,8(a5)
    368c:	00c7a783          	lw	a5,12(a5)
    3690:	0c612823          	sw	t1,208(sp)
    3694:	0cf12a23          	sw	a5,212(sp)
            BCe = ROL(Ege, 44);
    3698:	00cc1793          	slli	a5,s8,0xc
    369c:	00f12823          	sw	a5,16(sp)
    36a0:	014cd793          	srli	a5,s9,0x14
    36a4:	00f12a23          	sw	a5,20(sp)
            BCi = ROL(Eki, 43);
    36a8:	00bb1793          	slli	a5,s6,0xb
    36ac:	00f12c23          	sw	a5,24(sp)
    36b0:	015bd793          	srli	a5,s7,0x15
    36b4:	00f12e23          	sw	a5,28(sp)
            BCo = ROL(Emo, 21);
    36b8:	00ba5793          	srli	a5,s4,0xb
    36bc:	02f12023          	sw	a5,32(sp)
    36c0:	015a9793          	slli	a5,s5,0x15
    36c4:	02f12223          	sw	a5,36(sp)
            BCu = ROL(Esu, 14);
    36c8:	012d5793          	srli	a5,s10,0x12
    36cc:	02f12423          	sw	a5,40(sp)
    36d0:	00ed9793          	slli	a5,s11,0xe
            BCa = ROL(Ebo, 28);
    36d4:	01c99313          	slli	t1,s3,0x1c
            BCu = ROL(Esu, 14);
    36d8:	02f12623          	sw	a5,44(sp)
            BCa = ROL(Ebo, 28);
    36dc:	00495793          	srli	a5,s2,0x4
    36e0:	02f12823          	sw	a5,48(sp)
    36e4:	02612a23          	sw	t1,52(sp)
            BCe = ROL(Egu, 20);
    36e8:	01449313          	slli	t1,s1,0x14
    36ec:	00c45793          	srli	a5,s0,0xc
    36f0:	02612e23          	sw	t1,60(sp)
            BCi = ROL(Eka, 3);
    36f4:	05412303          	lw	t1,84(sp)
            BCe = ROL(Egu, 20);
    36f8:	02f12c23          	sw	a5,56(sp)
            BCi = ROL(Eka, 3);
    36fc:	05812783          	lw	a5,88(sp)
            BCe = ROL(Egu, 20);
    3700:	01441413          	slli	s0,s0,0x14
    3704:	04812023          	sw	s0,64(sp)
            BCi = ROL(Eka, 3);
    3708:	01d35413          	srli	s0,t1,0x1d
    370c:	04812223          	sw	s0,68(sp)
    3710:	00379413          	slli	s0,a5,0x3
    3714:	04812423          	sw	s0,72(sp)
    3718:	01d7d413          	srli	s0,a5,0x1d
            BCa = ROL(Ebe, 1);
    371c:	07412783          	lw	a5,116(sp)
            BCi = ROL(Eka, 3);
    3720:	04812623          	sw	s0,76(sp)
    3724:	00331413          	slli	s0,t1,0x3
    3728:	04812823          	sw	s0,80(sp)
            BCa = ROL(Ebe, 1);
    372c:	01f7d313          	srli	t1,a5,0x1f
            BCo = ROL(Eme, 45);
    3730:	00df1413          	slli	s0,t5,0xd
    3734:	04812a23          	sw	s0,84(sp)
            BCa = ROL(Ebe, 1);
    3738:	06612423          	sw	t1,104(sp)
            BCo = ROL(Eme, 45);
    373c:	013fd413          	srli	s0,t6,0x13
            BCa = ROL(Ebe, 1);
    3740:	08812303          	lw	t1,136(sp)
    3744:	00179793          	slli	a5,a5,0x1
            BCo = ROL(Eme, 45);
    3748:	04812c23          	sw	s0,88(sp)
            BCa = ROL(Ebe, 1);
    374c:	06f12823          	sw	a5,112(sp)
            BCu = ROL(Esi, 61);
    3750:	01de1413          	slli	s0,t3,0x1d
            BCe = ROL(Egi, 6);
    3754:	09412783          	lw	a5,148(sp)
            BCu = ROL(Esi, 61);
    3758:	003e5e13          	srli	t3,t3,0x3
    375c:	04812e23          	sw	s0,92(sp)
    3760:	07c12223          	sw	t3,100(sp)
    3764:	003ed413          	srli	s0,t4,0x3
            BCe = ROL(Egi, 6);
    3768:	09812e03          	lw	t3,152(sp)
            BCu = ROL(Esi, 61);
    376c:	06812023          	sw	s0,96(sp)
            BCa = ROL(Ebe, 1);
    3770:	00131413          	slli	s0,t1,0x1
    3774:	06812623          	sw	s0,108(sp)
            BCe = ROL(Egi, 6);
    3778:	01a7d413          	srli	s0,a5,0x1a
    377c:	06812a23          	sw	s0,116(sp)
    3780:	006e1413          	slli	s0,t3,0x6
    3784:	06812c23          	sw	s0,120(sp)
    3788:	01ae5413          	srli	s0,t3,0x1a
    378c:	06812e23          	sw	s0,124(sp)
            BCi = ROL(Eko, 25);
    3790:	0a412403          	lw	s0,164(sp)
            BCe = ROL(Egi, 6);
    3794:	00679793          	slli	a5,a5,0x6
    3798:	08f12023          	sw	a5,128(sp)
            BCi = ROL(Eko, 25);
    379c:	00745793          	srli	a5,s0,0x7
    37a0:	08f12223          	sw	a5,132(sp)
    37a4:	0a812783          	lw	a5,168(sp)
            BCe = ROL(Ege, 44);
    37a8:	00cc9c93          	slli	s9,s9,0xc
    37ac:	014c5c13          	srli	s8,s8,0x14
            BCi = ROL(Eko, 25);
    37b0:	01979e13          	slli	t3,a5,0x19
    37b4:	09c12423          	sw	t3,136(sp)
    37b8:	0077de13          	srli	t3,a5,0x7
    37bc:	09c12623          	sw	t3,140(sp)
    37c0:	01941e13          	slli	t3,s0,0x19
    37c4:	09c12823          	sw	t3,144(sp)
            BCo = ROL(Emu, 8);
    37c8:	0b012403          	lw	s0,176(sp)
    37cc:	0c412783          	lw	a5,196(sp)
            BCe = ROL(Ege, 44);
    37d0:	018cec33          	or	s8,s9,s8
            BCo = ROL(Emu, 8);
    37d4:	01845e13          	srli	t3,s0,0x18
    37d8:	09c12a23          	sw	t3,148(sp)
    37dc:	00879e13          	slli	t3,a5,0x8
    37e0:	09c12c23          	sw	t3,152(sp)
    37e4:	0187de13          	srli	t3,a5,0x18
    37e8:	0bc12223          	sw	t3,164(sp)
    37ec:	00841e13          	slli	t3,s0,0x8
            BCu = ROL(Esa, 18);
    37f0:	0c812403          	lw	s0,200(sp)
    37f4:	0d812783          	lw	a5,216(sp)
            BCo = ROL(Emu, 8);
    37f8:	0bc12423          	sw	t3,168(sp)
            BCu = ROL(Esa, 18);
    37fc:	00e45e13          	srli	t3,s0,0xe
    3800:	0bc12623          	sw	t3,172(sp)
    3804:	01279e13          	slli	t3,a5,0x12
    3808:	0bc12823          	sw	t3,176(sp)
    380c:	00e7de13          	srli	t3,a5,0xe
    3810:	0bc12a23          	sw	t3,180(sp)
    3814:	01241e13          	slli	t3,s0,0x12
            BCa = ROL(Ebu, 27);
    3818:	0dc12403          	lw	s0,220(sp)
    381c:	0e012783          	lw	a5,224(sp)
            BCu = ROL(Esa, 18);
    3820:	0bc12c23          	sw	t3,184(sp)
            BCa = ROL(Ebu, 27);
    3824:	00545e13          	srli	t3,s0,0x5
    3828:	0bc12e23          	sw	t3,188(sp)
    382c:	01b79e13          	slli	t3,a5,0x1b
    3830:	0dc12023          	sw	t3,192(sp)
    3834:	0057de13          	srli	t3,a5,0x5
            BCe = ROL(Ega, 36);
    3838:	0e812783          	lw	a5,232(sp)
            BCa = ROL(Ebu, 27);
    383c:	0dc12223          	sw	t3,196(sp)
    3840:	01b41e13          	slli	t3,s0,0x1b
            BCe = ROL(Ega, 36);
    3844:	0e412403          	lw	s0,228(sp)
            BCa = ROL(Ebu, 27);
    3848:	0dc12423          	sw	t3,200(sp)
            BCe = ROL(Ega, 36);
    384c:	00479e13          	slli	t3,a5,0x4
    3850:	0dc12623          	sw	t3,204(sp)
    3854:	01c45e13          	srli	t3,s0,0x1c
    3858:	00441413          	slli	s0,s0,0x4
    385c:	0c812e23          	sw	s0,220(sp)
            BCi = ROL(Eke, 10);
    3860:	0ec12403          	lw	s0,236(sp)
            BCe = ROL(Ega, 36);
    3864:	01c7d793          	srli	a5,a5,0x1c
    3868:	0ef12023          	sw	a5,224(sp)
            BCi = ROL(Eke, 10);
    386c:	01645793          	srli	a5,s0,0x16
    3870:	0ef12223          	sw	a5,228(sp)
    3874:	0f012783          	lw	a5,240(sp)
            BCe = ROL(Ega, 36);
    3878:	0dc12c23          	sw	t3,216(sp)
            BCi = ROL(Eki, 43);
    387c:	015b5b13          	srli	s6,s6,0x15
            BCi = ROL(Eke, 10);
    3880:	00a79e13          	slli	t3,a5,0xa
    3884:	0167d793          	srli	a5,a5,0x16
    3888:	0ef12623          	sw	a5,236(sp)
    388c:	00a41793          	slli	a5,s0,0xa
            BCo = ROL(Emi, 15);
    3890:	0f412403          	lw	s0,244(sp)
            BCi = ROL(Eke, 10);
    3894:	0ef12823          	sw	a5,240(sp)
    3898:	0fc12423          	sw	t3,232(sp)
            BCo = ROL(Emi, 15);
    389c:	01145793          	srli	a5,s0,0x11
    38a0:	0ef12a23          	sw	a5,244(sp)
    38a4:	0f812783          	lw	a5,248(sp)
    38a8:	00f41413          	slli	s0,s0,0xf
    38ac:	10812023          	sw	s0,256(sp)
    38b0:	00f79e13          	slli	t3,a5,0xf
    38b4:	0117d793          	srli	a5,a5,0x11
    38b8:	0ef12e23          	sw	a5,252(sp)
            BCu = ROL(Eso, 56);
    38bc:	10412783          	lw	a5,260(sp)
            BCo = ROL(Emi, 15);
    38c0:	0fc12c23          	sw	t3,248(sp)
            BCi = ROL(Eki, 43);
    38c4:	00bb9b93          	slli	s7,s7,0xb
            BCu = ROL(Eso, 56);
    38c8:	01879413          	slli	s0,a5,0x18
    38cc:	10812223          	sw	s0,260(sp)
    38d0:	10812403          	lw	s0,264(sp)
    38d4:	0087d793          	srli	a5,a5,0x8
    38d8:	10f12823          	sw	a5,272(sp)
    38dc:	00845e13          	srli	t3,s0,0x8
            BCa = ROL(Ebi, 62);
    38e0:	0028d793          	srli	a5,a7,0x2
            BCu = ROL(Eso, 56);
    38e4:	01841413          	slli	s0,s0,0x18
            BCa = ROL(Ebi, 62);
    38e8:	01e89893          	slli	a7,a7,0x1e
            BCu = ROL(Eso, 56);
    38ec:	10812623          	sw	s0,268(sp)
            BCa = ROL(Ebi, 62);
    38f0:	11112e23          	sw	a7,284(sp)
    38f4:	01e81413          	slli	s0,a6,0x1e
            BCe = ROL(Ego, 55);
    38f8:	00955893          	srli	a7,a0,0x9
            BCa = ROL(Ebi, 62);
    38fc:	00285813          	srli	a6,a6,0x2
            BCe = ROL(Ego, 55);
    3900:	01751513          	slli	a0,a0,0x17
            BCa = ROL(Ebi, 62);
    3904:	13012023          	sw	a6,288(sp)
            BCe = ROL(Ego, 55);
    3908:	12a12623          	sw	a0,300(sp)
    390c:	01759813          	slli	a6,a1,0x17
            BCo = ROL(Ema, 41);
    3910:	14012503          	lw	a0,320(sp)
            BCe = ROL(Ego, 55);
    3914:	0095d593          	srli	a1,a1,0x9
    3918:	12b12823          	sw	a1,304(sp)
            BCi = ROL(Eku, 39);
    391c:	00769593          	slli	a1,a3,0x7
    3920:	12b12a23          	sw	a1,308(sp)
    3924:	01965593          	srli	a1,a2,0x19
    3928:	00761613          	slli	a2,a2,0x7
    392c:	12c12e23          	sw	a2,316(sp)
            BCo = ROL(Ema, 41);
    3930:	00951613          	slli	a2,a0,0x9
    3934:	14c12023          	sw	a2,320(sp)
    3938:	14412603          	lw	a2,324(sp)
            BCe = ROL(Ego, 55);
    393c:	13112423          	sw	a7,296(sp)
            BCi = ROL(Eku, 39);
    3940:	12b12c23          	sw	a1,312(sp)
            BCo = ROL(Ema, 41);
    3944:	01765893          	srli	a7,a2,0x17
    3948:	00961593          	slli	a1,a2,0x9
    394c:	01755613          	srli	a2,a0,0x17
            BCu = ROL(Ese, 2);
    3950:	00271513          	slli	a0,a4,0x2
    3954:	01e75713          	srli	a4,a4,0x1e
    3958:	14e12223          	sw	a4,324(sp)
            Eba ^= Da;
    395c:	09c12703          	lw	a4,156(sp)
            BCa = ROL(Ebi, 62);
    3960:	10812a23          	sw	s0,276(sp)
            BCu = ROL(Ese, 2);
    3964:	14812403          	lw	s0,328(sp)
            Eba ^= Da;
    3968:	007743b3          	xor	t2,a4,t2
    396c:	0a012703          	lw	a4,160(sp)
            BCa = ROL(Ebi, 62);
    3970:	10f12c23          	sw	a5,280(sp)
            BCe = ROL(Ego, 55);
    3974:	13012223          	sw	a6,292(sp)
            Eba ^= Da;
    3978:	005742b3          	xor	t0,a4,t0
            BCu = ROL(Ese, 2);
    397c:	01e45813          	srli	a6,s0,0x1e
            BCe = ROL(Ege, 44);
    3980:	01012703          	lw	a4,16(sp)
            BCu = ROL(Ese, 2);
    3984:	00241793          	slli	a5,s0,0x2
            BCe = ROL(Ege, 44);
    3988:	01412403          	lw	s0,20(sp)
            BCu = ROL(Eso, 56);
    398c:	11c12423          	sw	t3,264(sp)
            BCi = ROL(Eki, 43);
    3990:	016bebb3          	or	s7,s7,s6
            BCe = ROL(Ege, 44);
    3994:	00876733          	or	a4,a4,s0
    3998:	00e12823          	sw	a4,16(sp)
            BCi = ROL(Eki, 43);
    399c:	01812403          	lw	s0,24(sp)
    39a0:	01c12c83          	lw	s9,28(sp)
            BCo = ROL(Emo, 21);
    39a4:	02412b03          	lw	s6,36(sp)
    39a8:	00bada93          	srli	s5,s5,0xb
            BCi = ROL(Eki, 43);
    39ac:	01946cb3          	or	s9,s0,s9
            BCo = ROL(Emo, 21);
    39b0:	02012403          	lw	s0,32(sp)
    39b4:	015a1a13          	slli	s4,s4,0x15
    39b8:	014aea33          	or	s4,s5,s4
    39bc:	01646b33          	or	s6,s0,s6
            BCu = ROL(Esu, 14);
    39c0:	02c12a83          	lw	s5,44(sp)
    39c4:	02812403          	lw	s0,40(sp)
    39c8:	012ddd93          	srli	s11,s11,0x12
    39cc:	00ed1d13          	slli	s10,s10,0xe
    39d0:	01546ab3          	or	s5,s0,s5
    39d4:	01512a23          	sw	s5,20(sp)
            BCa = ROL(Ebo, 28);
    39d8:	03012403          	lw	s0,48(sp)
            BCu = ROL(Esu, 14);
    39dc:	01adeab3          	or	s5,s11,s10
            BCa = ROL(Ebo, 28);
    39e0:	03412d03          	lw	s10,52(sp)
    39e4:	0049d993          	srli	s3,s3,0x4
    39e8:	01c91913          	slli	s2,s2,0x1c
    39ec:	01a46d33          	or	s10,s0,s10
    39f0:	0129e933          	or	s2,s3,s2
            BCe = ROL(Egu, 20);
    39f4:	03812403          	lw	s0,56(sp)
    39f8:	03c12983          	lw	s3,60(sp)
    39fc:	00c4d493          	srli	s1,s1,0xc
            BCa = ROL(Ebo, 28);
    3a00:	01a12e23          	sw	s10,28(sp)
            BCe = ROL(Egu, 20);
    3a04:	013469b3          	or	s3,s0,s3
    3a08:	04012403          	lw	s0,64(sp)
    3a0c:	03312023          	sw	s3,32(sp)
            BCi = ROL(Eka, 3);
    3a10:	04812983          	lw	s3,72(sp)
            BCe = ROL(Egu, 20);
    3a14:	0084e433          	or	s0,s1,s0
            BCi = ROL(Eka, 3);
    3a18:	04412483          	lw	s1,68(sp)
            BCo = ROL(Eme, 45);
    3a1c:	05812d03          	lw	s10,88(sp)
    3a20:	00df9f93          	slli	t6,t6,0xd
            BCi = ROL(Eka, 3);
    3a24:	0134e4b3          	or	s1,s1,s3
    3a28:	02912423          	sw	s1,40(sp)
    3a2c:	05012983          	lw	s3,80(sp)
    3a30:	04c12483          	lw	s1,76(sp)
            BCo = ROL(Eme, 45);
    3a34:	013f5f13          	srli	t5,t5,0x13
    3a38:	01efef33          	or	t5,t6,t5
            BCi = ROL(Eka, 3);
    3a3c:	0134e4b3          	or	s1,s1,s3
            BCo = ROL(Eme, 45);
    3a40:	05412983          	lw	s3,84(sp)
            BCu = ROL(Esi, 61);
    3a44:	05c12f83          	lw	t6,92(sp)
    3a48:	06412e03          	lw	t3,100(sp)
            BCo = ROL(Eme, 45);
    3a4c:	01a9e9b3          	or	s3,s3,s10
            BCu = ROL(Esi, 61);
    3a50:	06012d03          	lw	s10,96(sp)
    3a54:	01de9e93          	slli	t4,t4,0x1d
    3a58:	01ceee33          	or	t3,t4,t3
    3a5c:	01afefb3          	or	t6,t6,s10
            BCa = ROL(Ebe, 1);
    3a60:	06812e83          	lw	t4,104(sp)
            BCu = ROL(Esi, 61);
    3a64:	03f12823          	sw	t6,48(sp)
            BCa = ROL(Ebe, 1);
    3a68:	06c12f83          	lw	t6,108(sp)
    3a6c:	01f35313          	srli	t1,t1,0x1f
            BCa = ROL(Ebo, 28);
    3a70:	01212c23          	sw	s2,24(sp)
            BCa = ROL(Ebe, 1);
    3a74:	01feeeb3          	or	t4,t4,t6
    3a78:	07012f83          	lw	t6,112(sp)
            BCi = ROL(Eka, 3);
    3a7c:	02912223          	sw	s1,36(sp)
            BCo = ROL(Eme, 45);
    3a80:	03312623          	sw	s3,44(sp)
            BCa = ROL(Ebe, 1);
    3a84:	01f36333          	or	t1,t1,t6
            BCu = ROL(Esi, 61);
    3a88:	03c12a23          	sw	t3,52(sp)
            BCa = ROL(Ebe, 1);
    3a8c:	03d12e23          	sw	t4,60(sp)
    3a90:	02612c23          	sw	t1,56(sp)
            BCe = ROL(Egi, 6);
    3a94:	07812d03          	lw	s10,120(sp)
    3a98:	07412f83          	lw	t6,116(sp)
    3a9c:	08012903          	lw	s2,128(sp)
            BCi = ROL(Eko, 25);
    3aa0:	08812e03          	lw	t3,136(sp)
            BCe = ROL(Egi, 6);
    3aa4:	01afefb3          	or	t6,t6,s10
    3aa8:	07c12d03          	lw	s10,124(sp)
            BCi = ROL(Eko, 25);
    3aac:	08c12d83          	lw	s11,140(sp)
            BCo = ROL(Emu, 8);
    3ab0:	09812e83          	lw	t4,152(sp)
            BCe = ROL(Egi, 6);
    3ab4:	012d6d33          	or	s10,s10,s2
            BCi = ROL(Eko, 25);
    3ab8:	08412903          	lw	s2,132(sp)
            BCu = ROL(Esa, 18);
    3abc:	0b012703          	lw	a4,176(sp)
            BCe = ROL(Egi, 6);
    3ac0:	05f12223          	sw	t6,68(sp)
            BCi = ROL(Eko, 25);
    3ac4:	01c96933          	or	s2,s2,t3
    3ac8:	09012e03          	lw	t3,144(sp)
            BCa = ROL(Ebu, 27);
    3acc:	0bc12f83          	lw	t6,188(sp)
    3ad0:	0c412483          	lw	s1,196(sp)
            BCi = ROL(Eko, 25);
    3ad4:	01cdedb3          	or	s11,s11,t3
            BCo = ROL(Emu, 8);
    3ad8:	09412e03          	lw	t3,148(sp)
            BCe = ROL(Ega, 36);
    3adc:	0cc12983          	lw	s3,204(sp)
            BCe = ROL(Egi, 6);
    3ae0:	05a12023          	sw	s10,64(sp)
            BCo = ROL(Emu, 8);
    3ae4:	01de6333          	or	t1,t3,t4
    3ae8:	0a812e83          	lw	t4,168(sp)
    3aec:	0a412e03          	lw	t3,164(sp)
            BCi = ROL(Eko, 25);
    3af0:	05212623          	sw	s2,76(sp)
    3af4:	05b12423          	sw	s11,72(sp)
            BCo = ROL(Emu, 8);
    3af8:	01de6e33          	or	t3,t3,t4
            BCu = ROL(Esa, 18);
    3afc:	0ac12e83          	lw	t4,172(sp)
            BCo = ROL(Emu, 8);
    3b00:	05c12823          	sw	t3,80(sp)
            BCu = ROL(Esa, 18);
    3b04:	0b812e03          	lw	t3,184(sp)
    3b08:	00eeeeb3          	or	t4,t4,a4
    3b0c:	0b412703          	lw	a4,180(sp)
            BCo = ROL(Emu, 8);
    3b10:	04612a23          	sw	t1,84(sp)
            BCu = ROL(Esa, 18);
    3b14:	05d12e23          	sw	t4,92(sp)
    3b18:	01c76733          	or	a4,a4,t3
            BCa = ROL(Ebu, 27);
    3b1c:	0c012e03          	lw	t3,192(sp)
            BCu = ROL(Esa, 18);
    3b20:	04e12c23          	sw	a4,88(sp)
            BCi = ROL(Eku, 39);
    3b24:	0196d693          	srli	a3,a3,0x19
            BCa = ROL(Ebu, 27);
    3b28:	01cfefb3          	or	t6,t6,t3
    3b2c:	0c812e03          	lw	t3,200(sp)
    3b30:	07f12223          	sw	t6,100(sp)
            BCo = ROL(Ema, 41);
    3b34:	00c5e5b3          	or	a1,a1,a2
            BCa = ROL(Ebu, 27);
    3b38:	01c4e4b3          	or	s1,s1,t3
            BCe = ROL(Ega, 36);
    3b3c:	0d812e03          	lw	t3,216(sp)
            BCa = ROL(Ebu, 27);
    3b40:	06912023          	sw	s1,96(sp)
            BCu = ROL(Ese, 2);
    3b44:	00a86633          	or	a2,a6,a0
            BCe = ROL(Ega, 36);
    3b48:	01c9e9b3          	or	s3,s3,t3
    3b4c:	07312423          	sw	s3,104(sp)
    3b50:	0e012903          	lw	s2,224(sp)
    3b54:	0dc12d03          	lw	s10,220(sp)
            BCi = ROL(Eke, 10);
    3b58:	0e812e03          	lw	t3,232(sp)
    3b5c:	0f012e83          	lw	t4,240(sp)
            BCe = ROL(Ega, 36);
    3b60:	012d6d33          	or	s10,s10,s2
            BCi = ROL(Eke, 10);
    3b64:	0e412903          	lw	s2,228(sp)
            BCo = ROL(Emi, 15);
    3b68:	10012d83          	lw	s11,256(sp)
            BCu = ROL(Eso, 56);
    3b6c:	10812703          	lw	a4,264(sp)
            BCi = ROL(Eke, 10);
    3b70:	01c96933          	or	s2,s2,t3
    3b74:	0ec12e03          	lw	t3,236(sp)
            BCu = ROL(Eso, 56);
    3b78:	11012f83          	lw	t6,272(sp)
            BCa = ROL(Ebi, 62);
    3b7c:	11812483          	lw	s1,280(sp)
            BCi = ROL(Eke, 10);
    3b80:	01de6333          	or	t1,t3,t4
            BCo = ROL(Emi, 15);
    3b84:	0f812e83          	lw	t4,248(sp)
    3b88:	0f412e03          	lw	t3,244(sp)
            BCa = ROL(Ebi, 62);
    3b8c:	12012983          	lw	s3,288(sp)
            BCe = ROL(Ega, 36);
    3b90:	07a12623          	sw	s10,108(sp)
            BCo = ROL(Emi, 15);
    3b94:	01de6e33          	or	t3,t3,t4
    3b98:	0fc12e83          	lw	t4,252(sp)
            BCe = ROL(Ego, 55);
    3b9c:	12812d03          	lw	s10,296(sp)
            BCi = ROL(Eke, 10);
    3ba0:	07212a23          	sw	s2,116(sp)
            BCo = ROL(Emi, 15);
    3ba4:	01beeeb3          	or	t4,t4,s11
            BCu = ROL(Eso, 56);
    3ba8:	10412d83          	lw	s11,260(sp)
            BCe = ROL(Ego, 55);
    3bac:	13012903          	lw	s2,304(sp)
            BCi = ROL(Eke, 10);
    3bb0:	06612823          	sw	t1,112(sp)
            BCu = ROL(Eso, 56);
    3bb4:	00ededb3          	or	s11,s11,a4
    3bb8:	10c12703          	lw	a4,268(sp)
            BCo = ROL(Emi, 15);
    3bbc:	07c12e23          	sw	t3,124(sp)
    3bc0:	07d12c23          	sw	t4,120(sp)
            BCu = ROL(Eso, 56);
    3bc4:	01f76733          	or	a4,a4,t6
            BCa = ROL(Ebi, 62);
    3bc8:	11412f83          	lw	t6,276(sp)
            BCu = ROL(Eso, 56);
    3bcc:	09b12023          	sw	s11,128(sp)
    3bd0:	08e12223          	sw	a4,132(sp)
            BCa = ROL(Ebi, 62);
    3bd4:	009fefb3          	or	t6,t6,s1
    3bd8:	11c12483          	lw	s1,284(sp)
    3bdc:	09f12423          	sw	t6,136(sp)
    3be0:	0134e4b3          	or	s1,s1,s3
            BCe = ROL(Ego, 55);
    3be4:	12412983          	lw	s3,292(sp)
            BCa = ROL(Ebi, 62);
    3be8:	08912623          	sw	s1,140(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    3bec:	fff44493          	not	s1,s0
            BCe = ROL(Ego, 55);
    3bf0:	01a9e9b3          	or	s3,s3,s10
    3bf4:	12c12d03          	lw	s10,300(sp)
    3bf8:	09312823          	sw	s3,144(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    3bfc:	fff3c993          	not	s3,t2
            BCe = ROL(Ego, 55);
    3c00:	012d6d33          	or	s10,s10,s2
    3c04:	09a12a23          	sw	s10,148(sp)
            BCi = ROL(Eku, 39);
    3c08:	13812e03          	lw	t3,312(sp)
    3c0c:	13412903          	lw	s2,308(sp)
            BCu = ROL(Ese, 2);
    3c10:	14412703          	lw	a4,324(sp)
            Age =   BCe ^((~BCi)&  BCo );
    3c14:	02812303          	lw	t1,40(sp)
            BCi = ROL(Eku, 39);
    3c18:	01c96933          	or	s2,s2,t3
    3c1c:	13c12e03          	lw	t3,316(sp)
            BCu = ROL(Ese, 2);
    3c20:	00f76533          	or	a0,a4,a5
            Agi =   BCi ^((~BCo)&  BCu );
    3c24:	02c12e83          	lw	t4,44(sp)
            BCi = ROL(Eku, 39);
    3c28:	00de66b3          	or	a3,t3,a3
    3c2c:	08d12e23          	sw	a3,156(sp)
            BCo = ROL(Ema, 41);
    3c30:	14012683          	lw	a3,320(sp)
            Age =   BCe ^((~BCi)&  BCo );
    3c34:	02412e03          	lw	t3,36(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    3c38:	03412803          	lw	a6,52(sp)
            BCu = ROL(Ese, 2);
    3c3c:	0aa12423          	sw	a0,168(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    3c40:	03012503          	lw	a0,48(sp)
            BCo = ROL(Ema, 41);
    3c44:	0116e8b3          	or	a7,a3,a7
            Abi =   BCi ^((~BCo)&  BCu );
    3c48:	fffb4793          	not	a5,s6
            BCi = ROL(Eku, 39);
    3c4c:	09212c23          	sw	s2,152(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    3c50:	0a512a23          	sw	t0,180(sp)
    3c54:	fff2c913          	not	s2,t0
            Age =   BCe ^((~BCi)&  BCo );
    3c58:	fff34293          	not	t0,t1
            Aba =   BCa ^((~BCe)&  BCi );
    3c5c:	01012703          	lw	a4,16(sp)
            BCo = ROL(Ema, 41);
    3c60:	0b112023          	sw	a7,160(sp)
    3c64:	0ab12223          	sw	a1,164(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    3c68:	02012883          	lw	a7,32(sp)
            BCu = ROL(Ese, 2);
    3c6c:	0ac12623          	sw	a2,172(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    3c70:	0b812c23          	sw	s8,184(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    3c74:	01412603          	lw	a2,20(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    3c78:	0b912e23          	sw	s9,188(sp)
    3c7c:	0d712023          	sw	s7,192(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    3c80:	0d412223          	sw	s4,196(sp)
    3c84:	0d612423          	sw	s6,200(sp)
    3c88:	0ef12223          	sw	a5,228(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    3c8c:	0d512623          	sw	s5,204(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    3c90:	0a712823          	sw	t2,176(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    3c94:	0c812e23          	sw	s0,220(sp)
            Age =   BCe ^((~BCi)&  BCo );
    3c98:	fffe4393          	not	t2,t3
    3c9c:	0e512423          	sw	t0,232(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    3ca0:	fffecf93          	not	t6,t4
    3ca4:	0fe12023          	sw	t5,224(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    3ca8:	fff54e93          	not	t4,a0
    3cac:	fff84e13          	not	t3,a6
            Agu =   BCu ^((~BCa)&  BCe );
    3cb0:	01812803          	lw	a6,24(sp)
    3cb4:	01c12503          	lw	a0,28(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    3cb8:	05c12b03          	lw	s6,92(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    3cbc:	04412683          	lw	a3,68(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    3cc0:	05412783          	lw	a5,84(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    3cc4:	fffb4293          	not	t0,s6
            Aku =   BCu ^((~BCa)&  BCe );
    3cc8:	03812b03          	lw	s6,56(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    3ccc:	0e512623          	sw	t0,236(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    3cd0:	fff74d93          	not	s11,a4
            Aku =   BCu ^((~BCa)&  BCe );
    3cd4:	fffb4293          	not	t0,s6
    3cd8:	03c12b03          	lw	s6,60(sp)
    3cdc:	0e512823          	sw	t0,240(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    3ce0:	04c12703          	lw	a4,76(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    3ce4:	fffb4293          	not	t0,s6
            Ama =   BCa ^((~BCe)&  BCi );
    3ce8:	06812b03          	lw	s6,104(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    3cec:	0e512a23          	sw	t0,244(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    3cf0:	fffc4d13          	not	s10,s8
            Ama =   BCa ^((~BCe)&  BCi );
    3cf4:	fffb4293          	not	t0,s6
    3cf8:	06c12b03          	lw	s6,108(sp)
    3cfc:	0e512c23          	sw	t0,248(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    3d00:	fffbcc13          	not	s8,s7
            Ama =   BCa ^((~BCe)&  BCi );
    3d04:	fffb4293          	not	t0,s6
            Ame =   BCe ^((~BCi)&  BCo );
    3d08:	07012b03          	lw	s6,112(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    3d0c:	0e512e23          	sw	t0,252(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    3d10:	fffa4b93          	not	s7,s4
            Ame =   BCe ^((~BCi)&  BCo );
    3d14:	fffb4293          	not	t0,s6
    3d18:	07412b03          	lw	s6,116(sp)
    3d1c:	10512223          	sw	t0,260(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    3d20:	fff64a13          	not	s4,a2
            Ame =   BCe ^((~BCi)&  BCo );
    3d24:	fffb4293          	not	t0,s6
            Ami =   BCi ^((~BCo)&  BCu );
    3d28:	07812b03          	lw	s6,120(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    3d2c:	10512423          	sw	t0,264(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    3d30:	04012603          	lw	a2,64(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    3d34:	fffb4293          	not	t0,s6
    3d38:	07c12b03          	lw	s6,124(sp)
    3d3c:	10512623          	sw	t0,268(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    3d40:	04812583          	lw	a1,72(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    3d44:	fffb4293          	not	t0,s6
            Amo =   BCo ^((~BCu)&  BCa );
    3d48:	08012b03          	lw	s6,128(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    3d4c:	10512823          	sw	t0,272(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    3d50:	fff8c413          	not	s0,a7
            Amo =   BCo ^((~BCu)&  BCa );
    3d54:	fffb4293          	not	t0,s6
    3d58:	08412b03          	lw	s6,132(sp)
    3d5c:	10512a23          	sw	t0,276(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    3d60:	fff84313          	not	t1,a6
            Amo =   BCo ^((~BCu)&  BCa );
    3d64:	fffb4293          	not	t0,s6
            Amu =   BCu ^((~BCa)&  BCe );
    3d68:	06012b03          	lw	s6,96(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    3d6c:	10512c23          	sw	t0,280(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    3d70:	fff54893          	not	a7,a0
            Amu =   BCu ^((~BCa)&  BCe );
    3d74:	fffb4293          	not	t0,s6
            Aka =   BCa ^((~BCe)&  BCi );
    3d78:	fff64813          	not	a6,a2
    3d7c:	fff6c513          	not	a0,a3
            Ake =   BCe ^((~BCi)&  BCo );
    3d80:	fff74613          	not	a2,a4
            Aki =   BCi ^((~BCo)&  BCu );
    3d84:	05012683          	lw	a3,80(sp)
    3d88:	fff7c713          	not	a4,a5
            Amu =   BCu ^((~BCa)&  BCe );
    3d8c:	10512e23          	sw	t0,284(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    3d90:	05812783          	lw	a5,88(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    3d94:	06412b03          	lw	s6,100(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    3d98:	fffccc93          	not	s9,s9
            Abo =   BCo ^((~BCu)&  BCa );
    3d9c:	fffaca93          	not	s5,s5
            Amu =   BCu ^((~BCa)&  BCe );
    3da0:	fffb4293          	not	t0,s6
            Asa =   BCa ^((~BCe)&  BCi );
    3da4:	09012b03          	lw	s6,144(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    3da8:	12512023          	sw	t0,288(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    3dac:	ffff4f13          	not	t5,t5
            Asa =   BCa ^((~BCe)&  BCi );
    3db0:	fffb4293          	not	t0,s6
    3db4:	09412b03          	lw	s6,148(sp)
    3db8:	12512223          	sw	t0,292(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    3dbc:	fff5c593          	not	a1,a1
            Asa =   BCa ^((~BCe)&  BCi );
    3dc0:	fffb4293          	not	t0,s6
            Ase =   BCe ^((~BCi)&  BCo );
    3dc4:	09812b03          	lw	s6,152(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    3dc8:	12512423          	sw	t0,296(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    3dcc:	fff6c693          	not	a3,a3
            Ase =   BCe ^((~BCi)&  BCo );
    3dd0:	fffb4293          	not	t0,s6
    3dd4:	09c12b03          	lw	s6,156(sp)
    3dd8:	12512623          	sw	t0,300(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    3ddc:	fff7c793          	not	a5,a5
            Ase =   BCe ^((~BCi)&  BCo );
    3de0:	fffb4293          	not	t0,s6
            Asi =   BCi ^((~BCo)&  BCu );
    3de4:	0a012b03          	lw	s6,160(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    3de8:	12512823          	sw	t0,304(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    3dec:	fffb4293          	not	t0,s6
    3df0:	0a412b03          	lw	s6,164(sp)
    3df4:	12512a23          	sw	t0,308(sp)
    3df8:	fffb4293          	not	t0,s6
            Aso =   BCo ^((~BCu)&  BCa );
    3dfc:	0a812b03          	lw	s6,168(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    3e00:	12512c23          	sw	t0,312(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    3e04:	fffb4293          	not	t0,s6
    3e08:	0ac12b03          	lw	s6,172(sp)
    3e0c:	12512e23          	sw	t0,316(sp)
    3e10:	fffb4293          	not	t0,s6
            Asu =   BCu ^((~BCa)&  BCe );
    3e14:	08812b03          	lw	s6,136(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    3e18:	14512023          	sw	t0,320(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    3e1c:	fffb4293          	not	t0,s6
    3e20:	08c12b03          	lw	s6,140(sp)
    3e24:	14512223          	sw	t0,324(sp)
    3e28:	fffb4293          	not	t0,s6
    3e2c:	14512423          	sw	t0,328(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    3e30:	0b012b03          	lw	s6,176(sp)
    3e34:	0d012283          	lw	t0,208(sp)
    3e38:	0162c2b3          	xor	t0,t0,s6
    3e3c:	0c512823          	sw	t0,208(sp)
    3e40:	0b412b03          	lw	s6,180(sp)
    3e44:	0d412283          	lw	t0,212(sp)
    3e48:	0162c2b3          	xor	t0,t0,s6
            Aba =   BCa ^((~BCe)&  BCi );
    3e4c:	0bc12b03          	lw	s6,188(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    3e50:	0c512a23          	sw	t0,212(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    3e54:	016dfb33          	and	s6,s11,s6
    3e58:	0d612c23          	sw	s6,216(sp)
    3e5c:	0c012b03          	lw	s6,192(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    3e60:	0c412d83          	lw	s11,196(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    3e64:	016d7d33          	and	s10,s10,s6
            Abe =   BCe ^((~BCi)&  BCo );
    3e68:	0c812b03          	lw	s6,200(sp)
    3e6c:	01bcfcb3          	and	s9,s9,s11
            Abi =   BCi ^((~BCo)&  BCu );
    3e70:	0e412d83          	lw	s11,228(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    3e74:	016c7c33          	and	s8,s8,s6
            Abi =   BCi ^((~BCo)&  BCu );
    3e78:	0cc12b03          	lw	s6,204(sp)
            Age =   BCe ^((~BCi)&  BCo );
    3e7c:	0e812283          	lw	t0,232(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    3e80:	016bfbb3          	and	s7,s7,s6
    3e84:	01412b03          	lw	s6,20(sp)
    3e88:	016dfb33          	and	s6,s11,s6
            Abo =   BCo ^((~BCu)&  BCa );
    3e8c:	0b012d83          	lw	s11,176(sp)
    3e90:	01bafab3          	and	s5,s5,s11
    3e94:	0b412d83          	lw	s11,180(sp)
    3e98:	01ba7a33          	and	s4,s4,s11
            Abu =   BCu ^((~BCa)&  BCe );
    3e9c:	01012d83          	lw	s11,16(sp)
    3ea0:	01b9f9b3          	and	s3,s3,s11
    3ea4:	0b812d83          	lw	s11,184(sp)
    3ea8:	01b97933          	and	s2,s2,s11
            Aga =   BCa ^((~BCe)&  BCi );
    3eac:	02412d83          	lw	s11,36(sp)
    3eb0:	01b4f4b3          	and	s1,s1,s11
    3eb4:	02812d83          	lw	s11,40(sp)
    3eb8:	01b47433          	and	s0,s0,s11
            Age =   BCe ^((~BCi)&  BCo );
    3ebc:	02c12d83          	lw	s11,44(sp)
    3ec0:	01b3f3b3          	and	t2,t2,s11
    3ec4:	0e012d83          	lw	s11,224(sp)
    3ec8:	0e712223          	sw	t2,228(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    3ecc:	0ec12383          	lw	t2,236(sp)
            Age =   BCe ^((~BCi)&  BCo );
    3ed0:	01b2f2b3          	and	t0,t0,s11
            Agi =   BCi ^((~BCo)&  BCu );
    3ed4:	03012d83          	lw	s11,48(sp)
    3ed8:	01bfffb3          	and	t6,t6,s11
    3edc:	03412d83          	lw	s11,52(sp)
    3ee0:	01bf7f33          	and	t5,t5,s11
            Ago =   BCo ^((~BCu)&  BCa );
    3ee4:	01812d83          	lw	s11,24(sp)
    3ee8:	01befeb3          	and	t4,t4,s11
    3eec:	01c12d83          	lw	s11,28(sp)
    3ef0:	01be7e33          	and	t3,t3,s11
            Agu =   BCu ^((~BCa)&  BCe );
    3ef4:	0dc12d83          	lw	s11,220(sp)
    3ef8:	01b37333          	and	t1,t1,s11
    3efc:	02012d83          	lw	s11,32(sp)
    3f00:	01b8f8b3          	and	a7,a7,s11
            Aka =   BCa ^((~BCe)&  BCi );
    3f04:	04812d83          	lw	s11,72(sp)
    3f08:	01b87833          	and	a6,a6,s11
    3f0c:	04c12d83          	lw	s11,76(sp)
    3f10:	01b57533          	and	a0,a0,s11
            Ake =   BCe ^((~BCi)&  BCo );
    3f14:	05012d83          	lw	s11,80(sp)
    3f18:	01b5f5b3          	and	a1,a1,s11
    3f1c:	05412d83          	lw	s11,84(sp)
    3f20:	01b67633          	and	a2,a2,s11
            Aki =   BCi ^((~BCo)&  BCu );
    3f24:	05812d83          	lw	s11,88(sp)
    3f28:	01b6f6b3          	and	a3,a3,s11
    3f2c:	05c12d83          	lw	s11,92(sp)
    3f30:	01b77733          	and	a4,a4,s11
            Ako =   BCo ^((~BCu)&  BCa );
    3f34:	03812d83          	lw	s11,56(sp)
    3f38:	01b7f7b3          	and	a5,a5,s11
    3f3c:	03c12d83          	lw	s11,60(sp)
    3f40:	01b3f3b3          	and	t2,t2,s11
    3f44:	0e712623          	sw	t2,236(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    3f48:	04012d83          	lw	s11,64(sp)
    3f4c:	0f012383          	lw	t2,240(sp)
    3f50:	01b3f3b3          	and	t2,t2,s11
    3f54:	0e712823          	sw	t2,240(sp)
    3f58:	0f412383          	lw	t2,244(sp)
    3f5c:	04412d83          	lw	s11,68(sp)
    3f60:	01b3f3b3          	and	t2,t2,s11
    3f64:	0e712a23          	sw	t2,244(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    3f68:	07012d83          	lw	s11,112(sp)
    3f6c:	0f812383          	lw	t2,248(sp)
    3f70:	01b3f3b3          	and	t2,t2,s11
    3f74:	0e712c23          	sw	t2,248(sp)
    3f78:	07412d83          	lw	s11,116(sp)
    3f7c:	0fc12383          	lw	t2,252(sp)
    3f80:	01b3f3b3          	and	t2,t2,s11
    3f84:	10712023          	sw	t2,256(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    3f88:	07812d83          	lw	s11,120(sp)
    3f8c:	10412383          	lw	t2,260(sp)
    3f90:	01b3f3b3          	and	t2,t2,s11
    3f94:	10712223          	sw	t2,260(sp)
    3f98:	07c12d83          	lw	s11,124(sp)
    3f9c:	10812383          	lw	t2,264(sp)
    3fa0:	01b3f3b3          	and	t2,t2,s11
    3fa4:	10712423          	sw	t2,264(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    3fa8:	08012d83          	lw	s11,128(sp)
    3fac:	10c12383          	lw	t2,268(sp)
    3fb0:	01b3f3b3          	and	t2,t2,s11
    3fb4:	10712623          	sw	t2,268(sp)
    3fb8:	08412d83          	lw	s11,132(sp)
    3fbc:	11012383          	lw	t2,272(sp)
    3fc0:	01b3f3b3          	and	t2,t2,s11
    3fc4:	10712823          	sw	t2,272(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    3fc8:	06012d83          	lw	s11,96(sp)
    3fcc:	11412383          	lw	t2,276(sp)
    3fd0:	01b3f3b3          	and	t2,t2,s11
    3fd4:	10712a23          	sw	t2,276(sp)
    3fd8:	06412d83          	lw	s11,100(sp)
    3fdc:	11812383          	lw	t2,280(sp)
    3fe0:	01b3f3b3          	and	t2,t2,s11
    3fe4:	10712c23          	sw	t2,280(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    3fe8:	06812d83          	lw	s11,104(sp)
    3fec:	11c12383          	lw	t2,284(sp)
    3ff0:	01b3f3b3          	and	t2,t2,s11
    3ff4:	10712e23          	sw	t2,284(sp)
    3ff8:	06c12d83          	lw	s11,108(sp)
    3ffc:	12012383          	lw	t2,288(sp)
    4000:	01b3f3b3          	and	t2,t2,s11
    4004:	12712023          	sw	t2,288(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    4008:	12412383          	lw	t2,292(sp)
    400c:	09812d83          	lw	s11,152(sp)
    4010:	01b3f3b3          	and	t2,t2,s11
    4014:	12712223          	sw	t2,292(sp)
    4018:	09c12d83          	lw	s11,156(sp)
    401c:	12812383          	lw	t2,296(sp)
    4020:	01b3f3b3          	and	t2,t2,s11
    4024:	12712423          	sw	t2,296(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    4028:	0a012d83          	lw	s11,160(sp)
    402c:	12c12383          	lw	t2,300(sp)
    4030:	01b3f3b3          	and	t2,t2,s11
    4034:	12712623          	sw	t2,300(sp)
    4038:	0a412d83          	lw	s11,164(sp)
    403c:	13012383          	lw	t2,304(sp)
    4040:	01b3f3b3          	and	t2,t2,s11
    4044:	12712823          	sw	t2,304(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    4048:	0a812d83          	lw	s11,168(sp)
    404c:	13412383          	lw	t2,308(sp)
    4050:	01b3f3b3          	and	t2,t2,s11
    4054:	12712a23          	sw	t2,308(sp)
    4058:	0ac12d83          	lw	s11,172(sp)
    405c:	13812383          	lw	t2,312(sp)
    4060:	01b3f3b3          	and	t2,t2,s11
    4064:	12712c23          	sw	t2,312(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    4068:	08812d83          	lw	s11,136(sp)
    406c:	13c12383          	lw	t2,316(sp)
    4070:	01b3f3b3          	and	t2,t2,s11
    4074:	12712e23          	sw	t2,316(sp)
    4078:	08c12d83          	lw	s11,140(sp)
    407c:	14012383          	lw	t2,320(sp)
    4080:	01b3f3b3          	and	t2,t2,s11
    4084:	14712023          	sw	t2,320(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    4088:	09012d83          	lw	s11,144(sp)
    408c:	14412383          	lw	t2,324(sp)
    4090:	01b3f3b3          	and	t2,t2,s11
    4094:	14712223          	sw	t2,324(sp)
    4098:	09412d83          	lw	s11,148(sp)
    409c:	14812383          	lw	t2,328(sp)
    40a0:	01b3f3b3          	and	t2,t2,s11
        for(round = 0; round < NROUNDS; round += 2) {
    40a4:	00c12d83          	lw	s11,12(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    40a8:	14712423          	sw	t2,328(sp)
        for(round = 0; round < NROUNDS; round += 2) {
    40ac:	010d8d93          	addi	s11,s11,16
    40b0:	01b12623          	sw	s11,12(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    40b4:	0d012383          	lw	t2,208(sp)
    40b8:	0d812d83          	lw	s11,216(sp)
    40bc:	01b3c3b3          	xor	t2,t2,s11
    40c0:	0a712823          	sw	t2,176(sp)
    40c4:	0d412383          	lw	t2,212(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    40c8:	01012d83          	lw	s11,16(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    40cc:	01a3cd33          	xor	s10,t2,s10
    40d0:	0ba12a23          	sw	s10,180(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    40d4:	01bccd33          	xor	s10,s9,s11
    40d8:	0b812d83          	lw	s11,184(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    40dc:	0bc12c83          	lw	s9,188(sp)
            Age =   BCe ^((~BCi)&  BCo );
    40e0:	0e412383          	lw	t2,228(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    40e4:	01bc4c33          	xor	s8,s8,s11
    40e8:	0b812c23          	sw	s8,184(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    40ec:	019bcc33          	xor	s8,s7,s9
    40f0:	0c012b83          	lw	s7,192(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    40f4:	0c412d83          	lw	s11,196(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    40f8:	01a12823          	sw	s10,16(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    40fc:	017b4bb3          	xor	s7,s6,s7
            Abo =   BCo ^((~BCu)&  BCa );
    4100:	0c812b03          	lw	s6,200(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    4104:	0d712023          	sw	s7,192(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    4108:	01bacbb3          	xor	s7,s5,s11
            Abu =   BCu ^((~BCa)&  BCe );
    410c:	0cc12a83          	lw	s5,204(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    4110:	016a4a33          	xor	s4,s4,s6
            Abu =   BCu ^((~BCa)&  BCe );
    4114:	01412b03          	lw	s6,20(sp)
    4118:	0159c9b3          	xor	s3,s3,s5
    411c:	0d312623          	sw	s3,204(sp)
    4120:	016949b3          	xor	s3,s2,s6
            Aga =   BCa ^((~BCe)&  BCi );
    4124:	01812903          	lw	s2,24(sp)
    4128:	01c12d83          	lw	s11,28(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    412c:	0d712223          	sw	s7,196(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    4130:	0124c4b3          	xor	s1,s1,s2
    4134:	0c912a23          	sw	s1,212(sp)
    4138:	01b444b3          	xor	s1,s0,s11
            Age =   BCe ^((~BCi)&  BCo );
    413c:	0dc12403          	lw	s0,220(sp)
    4140:	02012d83          	lw	s11,32(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    4144:	0b812e23          	sw	s8,188(sp)
            Age =   BCe ^((~BCi)&  BCo );
    4148:	0083c3b3          	xor	t2,t2,s0
    414c:	01b2c433          	xor	s0,t0,s11
            Agi =   BCi ^((~BCo)&  BCu );
    4150:	02412283          	lw	t0,36(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    4154:	0d412423          	sw	s4,200(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    4158:	0d312823          	sw	s3,208(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    415c:	005fcfb3          	xor	t6,t6,t0
    4160:	01f12e23          	sw	t6,28(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    4164:	0c912c23          	sw	s1,216(sp)
            Age =   BCe ^((~BCi)&  BCo );
    4168:	0e712e23          	sw	t2,252(sp)
    416c:	00812a23          	sw	s0,20(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    4170:	02812d83          	lw	s11,40(sp)
    4174:	01bf4fb3          	xor	t6,t5,s11
            Ago =   BCo ^((~BCu)&  BCa );
    4178:	02c12d83          	lw	s11,44(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    417c:	03f12023          	sw	t6,32(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    4180:	01beceb3          	xor	t4,t4,s11
    4184:	0e012d83          	lw	s11,224(sp)
    4188:	0dd12e23          	sw	t4,220(sp)
    418c:	01be4e33          	xor	t3,t3,s11
            Agu =   BCu ^((~BCa)&  BCe );
    4190:	03012d83          	lw	s11,48(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    4194:	0fc12023          	sw	t3,224(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    4198:	01b34333          	xor	t1,t1,s11
    419c:	03412d83          	lw	s11,52(sp)
    41a0:	00612c23          	sw	t1,24(sp)
    41a4:	01b8c333          	xor	t1,a7,s11
            Aka =   BCa ^((~BCe)&  BCi );
    41a8:	03812883          	lw	a7,56(sp)
    41ac:	03c12d83          	lw	s11,60(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    41b0:	02612223          	sw	t1,36(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    41b4:	01184833          	xor	a6,a6,a7
    41b8:	03012423          	sw	a6,40(sp)
    41bc:	01b54833          	xor	a6,a0,s11
            Ake =   BCe ^((~BCi)&  BCo );
    41c0:	04012503          	lw	a0,64(sp)
    41c4:	04412d83          	lw	s11,68(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    41c8:	03012623          	sw	a6,44(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    41cc:	00a5c533          	xor	a0,a1,a0
            Aki =   BCi ^((~BCo)&  BCu );
    41d0:	04812583          	lw	a1,72(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    41d4:	01b64633          	xor	a2,a2,s11
            Aki =   BCi ^((~BCo)&  BCu );
    41d8:	04c12d83          	lw	s11,76(sp)
    41dc:	00b6c933          	xor	s2,a3,a1
            Ako =   BCo ^((~BCu)&  BCa );
    41e0:	05012683          	lw	a3,80(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    41e4:	0ec12423          	sw	a2,232(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    41e8:	01b74b33          	xor	s6,a4,s11
            Ako =   BCo ^((~BCu)&  BCa );
    41ec:	00d7c633          	xor	a2,a5,a3
    41f0:	05412d83          	lw	s11,84(sp)
    41f4:	0ec12683          	lw	a3,236(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    41f8:	05812783          	lw	a5,88(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    41fc:	02c12823          	sw	a2,48(sp)
    4200:	01b6c633          	xor	a2,a3,s11
            Aku =   BCu ^((~BCa)&  BCe );
    4204:	0f012683          	lw	a3,240(sp)
    4208:	05c12d83          	lw	s11,92(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    420c:	02c12a23          	sw	a2,52(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    4210:	00f6c633          	xor	a2,a3,a5
    4214:	0f412683          	lw	a3,244(sp)
    4218:	0ec12623          	sw	a2,236(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    421c:	0ea12223          	sw	a0,228(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    4220:	01b6c633          	xor	a2,a3,s11
    4224:	0ec12823          	sw	a2,240(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    4228:	0f812683          	lw	a3,248(sp)
    422c:	06012783          	lw	a5,96(sp)
    4230:	06412d83          	lw	s11,100(sp)
    4234:	00f6c633          	xor	a2,a3,a5
    4238:	10012683          	lw	a3,256(sp)
    423c:	0ec12a23          	sw	a2,244(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    4240:	07012783          	lw	a5,112(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    4244:	01b6c633          	xor	a2,a3,s11
            Ame =   BCe ^((~BCi)&  BCo );
    4248:	10412683          	lw	a3,260(sp)
    424c:	06812d83          	lw	s11,104(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    4250:	0ec12c23          	sw	a2,248(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    4254:	01b6c633          	xor	a2,a3,s11
    4258:	10812683          	lw	a3,264(sp)
    425c:	06c12d83          	lw	s11,108(sp)
    4260:	02c12c23          	sw	a2,56(sp)
    4264:	01b6c633          	xor	a2,a3,s11
            Ami =   BCi ^((~BCo)&  BCu );
    4268:	10c12683          	lw	a3,268(sp)
    426c:	07412d83          	lw	s11,116(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    4270:	02c12e23          	sw	a2,60(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    4274:	00f6c633          	xor	a2,a3,a5
    4278:	11012683          	lw	a3,272(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    427c:	07812783          	lw	a5,120(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    4280:	04c12e23          	sw	a2,92(sp)
    4284:	01b6c633          	xor	a2,a3,s11
            Amo =   BCo ^((~BCu)&  BCa );
    4288:	11412683          	lw	a3,276(sp)
    428c:	07c12d83          	lw	s11,124(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    4290:	06c12023          	sw	a2,96(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    4294:	00f6cbb3          	xor	s7,a3,a5
    4298:	11812683          	lw	a3,280(sp)
    429c:	01b6cd33          	xor	s10,a3,s11
            Amu =   BCu ^((~BCa)&  BCe );
    42a0:	11c12683          	lw	a3,284(sp)
    42a4:	08012d83          	lw	s11,128(sp)
    42a8:	01b6c633          	xor	a2,a3,s11
    42ac:	12012683          	lw	a3,288(sp)
    42b0:	08412d83          	lw	s11,132(sp)
    42b4:	04c12023          	sw	a2,64(sp)
    42b8:	01b6c633          	xor	a2,a3,s11
            Asa =   BCa ^((~BCe)&  BCi );
    42bc:	12412683          	lw	a3,292(sp)
    42c0:	08812d83          	lw	s11,136(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    42c4:	04c12223          	sw	a2,68(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    42c8:	01b6c633          	xor	a2,a3,s11
    42cc:	12812683          	lw	a3,296(sp)
    42d0:	08c12d83          	lw	s11,140(sp)
    42d4:	04c12423          	sw	a2,72(sp)
    42d8:	01b6c633          	xor	a2,a3,s11
    42dc:	04c12623          	sw	a2,76(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    42e0:	12c12683          	lw	a3,300(sp)
    42e4:	09012d83          	lw	s11,144(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    42e8:	0a812703          	lw	a4,168(sp)
    42ec:	0ac12783          	lw	a5,172(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    42f0:	01b6c633          	xor	a2,a3,s11
    42f4:	13012683          	lw	a3,304(sp)
    42f8:	09412d83          	lw	s11,148(sp)
    42fc:	06c12623          	sw	a2,108(sp)
    4300:	01b6c633          	xor	a2,a3,s11
            Asi =   BCi ^((~BCo)&  BCu );
    4304:	13412683          	lw	a3,308(sp)
    4308:	09812d83          	lw	s11,152(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    430c:	06c12823          	sw	a2,112(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    4310:	01b6c633          	xor	a2,a3,s11
    4314:	13812683          	lw	a3,312(sp)
    4318:	09c12d83          	lw	s11,156(sp)
    431c:	04c12823          	sw	a2,80(sp)
    4320:	01b6c633          	xor	a2,a3,s11
            Aso =   BCo ^((~BCu)&  BCa );
    4324:	13c12683          	lw	a3,316(sp)
    4328:	0a012d83          	lw	s11,160(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    432c:	04c12a23          	sw	a2,84(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    4330:	01b6c633          	xor	a2,a3,s11
    4334:	14012683          	lw	a3,320(sp)
    4338:	0a412d83          	lw	s11,164(sp)
    433c:	06c12223          	sw	a2,100(sp)
    4340:	01b6c633          	xor	a2,a3,s11
            Asu =   BCu ^((~BCa)&  BCe );
    4344:	14412683          	lw	a3,324(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    4348:	06c12423          	sw	a2,104(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    434c:	00e6cdb3          	xor	s11,a3,a4
    4350:	14812703          	lw	a4,328(sp)
    4354:	00f74ab3          	xor	s5,a4,a5
        for(round = 0; round < NROUNDS; round += 2) {
    4358:	00c12783          	lw	a5,12(sp)
    435c:	0000a717          	auipc	a4,0xa
    4360:	26470713          	addi	a4,a4,612 # e5c0 <KeccakF_RoundConstants+0xc0>
    4364:	00f70463          	beq	a4,a5,436c <KeccakF1600_StatePermute+0x217c>
    4368:	858fe06f          	j	23c0 <KeccakF1600_StatePermute+0x1d0>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
    436c:	14c12503          	lw	a0,332(sp)
    4370:	0b012783          	lw	a5,176(sp)
    4374:	00090c93          	mv	s9,s2
        state[ 1] = Abe;
        state[ 2] = Abi;
        state[ 3] = Abo;
    4378:	01452e23          	sw	s4,28(a0)
        state[ 0] = Aba;
    437c:	00f52023          	sw	a5,0(a0)
    4380:	0b412783          	lw	a5,180(sp)
        state[ 4] = Abu;
        state[ 5] = Aga;
    4384:	02952623          	sw	s1,44(a0)
        state[ 6] = Age;
    4388:	02852a23          	sw	s0,52(a0)
        state[ 0] = Aba;
    438c:	00f52223          	sw	a5,4(a0)
        state[ 1] = Abe;
    4390:	01012783          	lw	a5,16(sp)
        state[ 6] = Age;
    4394:	02752823          	sw	t2,48(a0)
        state[ 7] = Agi;
    4398:	03f52e23          	sw	t6,60(a0)
        state[ 1] = Abe;
    439c:	00f52423          	sw	a5,8(a0)
    43a0:	0b812783          	lw	a5,184(sp)
        state[ 8] = Ago;
    43a4:	05d52023          	sw	t4,64(a0)
    43a8:	05c52223          	sw	t3,68(a0)
        state[ 1] = Abe;
    43ac:	00f52623          	sw	a5,12(a0)
        state[ 2] = Abi;
    43b0:	0bc12783          	lw	a5,188(sp)
    43b4:	00f52823          	sw	a5,16(a0)
    43b8:	0c012783          	lw	a5,192(sp)
    43bc:	00f52a23          	sw	a5,20(a0)
        state[ 3] = Abo;
    43c0:	0c412783          	lw	a5,196(sp)
    43c4:	00f52c23          	sw	a5,24(a0)
        state[ 4] = Abu;
    43c8:	0cc12783          	lw	a5,204(sp)
    43cc:	02f52023          	sw	a5,32(a0)
    43d0:	0d012783          	lw	a5,208(sp)
    43d4:	02f52223          	sw	a5,36(a0)
        state[ 5] = Aga;
    43d8:	0d412783          	lw	a5,212(sp)
    43dc:	02f52423          	sw	a5,40(a0)
        state[ 7] = Agi;
    43e0:	01c12783          	lw	a5,28(sp)
    43e4:	02f52c23          	sw	a5,56(a0)
        state[ 9] = Agu;
    43e8:	01812783          	lw	a5,24(sp)
    43ec:	04f52423          	sw	a5,72(a0)
    43f0:	04652623          	sw	t1,76(a0)
        state[10] = Aka;
    43f4:	02812783          	lw	a5,40(sp)
        state[11] = Ake;
        state[12] = Aki;
    43f8:	07952023          	sw	s9,96(a0)
    43fc:	07652223          	sw	s6,100(a0)
        state[10] = Aka;
    4400:	04f52823          	sw	a5,80(a0)
        state[11] = Ake;
    4404:	0e412783          	lw	a5,228(sp)
        state[13] = Ako;
        state[14] = Aku;
        state[15] = Ama;
        state[16] = Ame;
        state[17] = Ami;
        state[18] = Amo;
    4408:	09752823          	sw	s7,144(a0)
    440c:	09a52a23          	sw	s10,148(a0)
        state[11] = Ake;
    4410:	04f52c23          	sw	a5,88(a0)
    4414:	0e812783          	lw	a5,232(sp)
        state[10] = Aka;
    4418:	05052a23          	sw	a6,84(a0)
        state[11] = Ake;
    441c:	04f52e23          	sw	a5,92(a0)
        state[13] = Ako;
    4420:	03012783          	lw	a5,48(sp)
    4424:	06f52423          	sw	a5,104(a0)
    4428:	03412783          	lw	a5,52(sp)
    442c:	06f52623          	sw	a5,108(a0)
        state[14] = Aku;
    4430:	0ec12783          	lw	a5,236(sp)
    4434:	06f52823          	sw	a5,112(a0)
    4438:	0f012783          	lw	a5,240(sp)
    443c:	06f52a23          	sw	a5,116(a0)
        state[15] = Ama;
    4440:	0f412783          	lw	a5,244(sp)
    4444:	06f52c23          	sw	a5,120(a0)
    4448:	0f812783          	lw	a5,248(sp)
    444c:	06f52e23          	sw	a5,124(a0)
        state[16] = Ame;
    4450:	03812783          	lw	a5,56(sp)
    4454:	08f52023          	sw	a5,128(a0)
    4458:	03c12783          	lw	a5,60(sp)
    445c:	08f52223          	sw	a5,132(a0)
        state[17] = Ami;
    4460:	05c12783          	lw	a5,92(sp)
    4464:	08f52423          	sw	a5,136(a0)
    4468:	06012783          	lw	a5,96(sp)
    446c:	08f52623          	sw	a5,140(a0)
        state[19] = Amu;
    4470:	04012783          	lw	a5,64(sp)
    4474:	08f52c23          	sw	a5,152(a0)
    4478:	04412783          	lw	a5,68(sp)
        state[20] = Asa;
        state[21] = Ase;
        state[22] = Asi;
        state[23] = Aso;
        state[24] = Asu;
}
    447c:	17c12403          	lw	s0,380(sp)
        state[24] = Asu;
    4480:	0db52023          	sw	s11,192(a0)
        state[19] = Amu;
    4484:	08f52e23          	sw	a5,156(a0)
        state[20] = Asa;
    4488:	04812783          	lw	a5,72(sp)
        state[24] = Asu;
    448c:	0d552223          	sw	s5,196(a0)
        state[23] = Aso;
    4490:	0ac52e23          	sw	a2,188(a0)
        state[20] = Asa;
    4494:	0af52023          	sw	a5,160(a0)
    4498:	04c12783          	lw	a5,76(sp)
}
    449c:	17812483          	lw	s1,376(sp)
    44a0:	17412903          	lw	s2,372(sp)
        state[20] = Asa;
    44a4:	0af52223          	sw	a5,164(a0)
        state[21] = Ase;
    44a8:	06c12783          	lw	a5,108(sp)
}
    44ac:	17012983          	lw	s3,368(sp)
    44b0:	16c12a03          	lw	s4,364(sp)
        state[21] = Ase;
    44b4:	0af52423          	sw	a5,168(a0)
    44b8:	07012783          	lw	a5,112(sp)
}
    44bc:	16812a83          	lw	s5,360(sp)
    44c0:	16412b03          	lw	s6,356(sp)
        state[21] = Ase;
    44c4:	0af52623          	sw	a5,172(a0)
        state[22] = Asi;
    44c8:	05012783          	lw	a5,80(sp)
}
    44cc:	16012b83          	lw	s7,352(sp)
    44d0:	15c12c03          	lw	s8,348(sp)
        state[22] = Asi;
    44d4:	0af52823          	sw	a5,176(a0)
    44d8:	05412783          	lw	a5,84(sp)
}
    44dc:	15812c83          	lw	s9,344(sp)
    44e0:	15412d03          	lw	s10,340(sp)
        state[22] = Asi;
    44e4:	0af52a23          	sw	a5,180(a0)
        state[23] = Aso;
    44e8:	06412783          	lw	a5,100(sp)
}
    44ec:	15012d83          	lw	s11,336(sp)
        state[23] = Aso;
    44f0:	0af52c23          	sw	a5,184(a0)
}
    44f4:	18010113          	addi	sp,sp,384
    44f8:	00008067          	ret

000044fc <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int pos,
                                  unsigned int r,
                                  const uint8_t *in,
                                  size_t inlen)
{
    44fc:	fe010113          	addi	sp,sp,-32
    4500:	00812c23          	sw	s0,24(sp)
    4504:	00912a23          	sw	s1,20(sp)
    4508:	01312623          	sw	s3,12(sp)
  unsigned int i;

  while(pos+inlen >= r) {
    450c:	00e58f33          	add	t5,a1,a4
{
    4510:	00112e23          	sw	ra,28(sp)
    4514:	01212823          	sw	s2,16(sp)
    4518:	00050493          	mv	s1,a0
    451c:	00068413          	mv	s0,a3
  while(pos+inlen >= r) {
    4520:	000f0993          	mv	s3,t5
    4524:	0acf6a63          	bltu	t5,a2,45d8 <keccak_absorb+0xdc>
    4528:	00060913          	mv	s2,a2
    for(i=pos;i<r;i++)
    452c:	08c5fa63          	bgeu	a1,a2,45c0 <keccak_absorb+0xc4>
    4530:	40b907b3          	sub	a5,s2,a1
{
    4534:	00040813          	mv	a6,s0
    4538:	00f406b3          	add	a3,s0,a5
    453c:	408585b3          	sub	a1,a1,s0
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    4540:	01f00513          	li	a0,31
    4544:	0280006f          	j	456c <keccak_absorb+0x70>
    4548:	0007ae03          	lw	t3,0(a5)
    454c:	0047a703          	lw	a4,4(a5)
    4550:	00689333          	sll	t1,a7,t1
    4554:	00000893          	li	a7,0
    4558:	011e48b3          	xor	a7,t3,a7
    455c:	00674733          	xor	a4,a4,t1
    4560:	0117a023          	sw	a7,0(a5)
    4564:	00e7a223          	sw	a4,4(a5)
    for(i=pos;i<r;i++)
    4568:	04d80a63          	beq	a6,a3,45bc <keccak_absorb+0xc0>
    456c:	00b807b3          	add	a5,a6,a1
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    4570:	00084883          	lbu	a7,0(a6)
    4574:	0077f713          	andi	a4,a5,7
    4578:	00371713          	slli	a4,a4,0x3
    457c:	ff87f793          	andi	a5,a5,-8
    4580:	fe070313          	addi	t1,a4,-32
    4584:	40e50e33          	sub	t3,a0,a4
    4588:	00f487b3          	add	a5,s1,a5
    458c:	00180813          	addi	a6,a6,1
    4590:	0018de93          	srli	t4,a7,0x1
    4594:	fa035ae3          	bgez	t1,4548 <keccak_absorb+0x4c>
    4598:	01ced333          	srl	t1,t4,t3
    459c:	00e898b3          	sll	a7,a7,a4
    45a0:	0007ae03          	lw	t3,0(a5)
    45a4:	0047a703          	lw	a4,4(a5)
    45a8:	011e48b3          	xor	a7,t3,a7
    45ac:	00674733          	xor	a4,a4,t1
    45b0:	0117a023          	sw	a7,0(a5)
    45b4:	00e7a223          	sw	a4,4(a5)
    for(i=pos;i<r;i++)
    45b8:	fad81ae3          	bne	a6,a3,456c <keccak_absorb+0x70>
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    45bc:	00080413          	mv	s0,a6
    inlen -= r-pos;
    KeccakF1600_StatePermute(s);
    45c0:	00048513          	mv	a0,s1
    inlen -= r-pos;
    45c4:	412f09b3          	sub	s3,t5,s2
    KeccakF1600_StatePermute(s);
    45c8:	c29fd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
  while(pos+inlen >= r) {
    45cc:	00098f13          	mv	t5,s3
    pos = 0;
    45d0:	00000593          	li	a1,0
  while(pos+inlen >= r) {
    45d4:	f529fee3          	bgeu	s3,s2,4530 <keccak_absorb+0x34>
  }

  for(i=pos;i<pos+inlen;i++)
    45d8:	0b35f863          	bgeu	a1,s3,4688 <keccak_absorb+0x18c>
    45dc:	40b987b3          	sub	a5,s3,a1
    45e0:	00040613          	mv	a2,s0
    45e4:	00f406b3          	add	a3,s0,a5
    45e8:	408585b3          	sub	a1,a1,s0
    s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    45ec:	01f00e13          	li	t3,31
    45f0:	0280006f          	j	4618 <keccak_absorb+0x11c>
    45f4:	0007a883          	lw	a7,0(a5)
    45f8:	0047a703          	lw	a4,4(a5)
    45fc:	01051833          	sll	a6,a0,a6
    4600:	00000513          	li	a0,0
    4604:	00a8c533          	xor	a0,a7,a0
    4608:	01074733          	xor	a4,a4,a6
    460c:	00a7a023          	sw	a0,0(a5)
    4610:	00e7a223          	sw	a4,4(a5)
  for(i=pos;i<pos+inlen;i++)
    4614:	04d60a63          	beq	a2,a3,4668 <keccak_absorb+0x16c>
    4618:	00b607b3          	add	a5,a2,a1
    s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    461c:	00064503          	lbu	a0,0(a2)
    4620:	0077f713          	andi	a4,a5,7
    4624:	00371713          	slli	a4,a4,0x3
    4628:	ff87f793          	andi	a5,a5,-8
    462c:	fe070813          	addi	a6,a4,-32
    4630:	40ee08b3          	sub	a7,t3,a4
    4634:	00f487b3          	add	a5,s1,a5
    4638:	00160613          	addi	a2,a2,1
    463c:	00155313          	srli	t1,a0,0x1
    4640:	fa085ae3          	bgez	a6,45f4 <keccak_absorb+0xf8>
    4644:	01135833          	srl	a6,t1,a7
    4648:	00e51533          	sll	a0,a0,a4
    464c:	0007a883          	lw	a7,0(a5)
    4650:	0047a703          	lw	a4,4(a5)
    4654:	00a8c533          	xor	a0,a7,a0
    4658:	01074733          	xor	a4,a4,a6
    465c:	00a7a023          	sw	a0,0(a5)
    4660:	00e7a223          	sw	a4,4(a5)
  for(i=pos;i<pos+inlen;i++)
    4664:	fad61ae3          	bne	a2,a3,4618 <keccak_absorb+0x11c>

  return i;
}
    4668:	01c12083          	lw	ra,28(sp)
    466c:	01812403          	lw	s0,24(sp)
    4670:	01412483          	lw	s1,20(sp)
    4674:	01012903          	lw	s2,16(sp)
    4678:	00098513          	mv	a0,s3
    467c:	00c12983          	lw	s3,12(sp)
    4680:	02010113          	addi	sp,sp,32
    4684:	00008067          	ret
    4688:	01c12083          	lw	ra,28(sp)
    468c:	01812403          	lw	s0,24(sp)
  for(i=pos;i<pos+inlen;i++)
    4690:	00058993          	mv	s3,a1
}
    4694:	01412483          	lw	s1,20(sp)
    4698:	01012903          	lw	s2,16(sp)
    469c:	00098513          	mv	a0,s3
    46a0:	00c12983          	lw	s3,12(sp)
    46a4:	02010113          	addi	sp,sp,32
    46a8:	00008067          	ret

000046ac <keccak_absorb_once.constprop.1>:
*              - unsigned int r: rate in bytes (e.g., 168 for SHAKE128)
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
*              - uint8_t p: domain-separation byte for different Keccak-derived functions
**************************************************/
static void keccak_absorb_once(uint64_t s[25],
    46ac:	fe010113          	addi	sp,sp,-32
    46b0:	01212823          	sw	s2,16(sp)
    46b4:	01612023          	sw	s6,0(sp)
    46b8:	00060913          	mv	s2,a2
    46bc:	00058b13          	mv	s6,a1
                               uint8_t p)
{
  unsigned int i;

  for(i=0;i<25;i++)
    s[i] = 0;
    46c0:	0c800613          	li	a2,200
    46c4:	00000593          	li	a1,0
static void keccak_absorb_once(uint64_t s[25],
    46c8:	00912a23          	sw	s1,20(sp)
    46cc:	01312623          	sw	s3,12(sp)
    46d0:	00112e23          	sw	ra,28(sp)
    46d4:	00812c23          	sw	s0,24(sp)
    46d8:	01412423          	sw	s4,8(sp)
    46dc:	01512223          	sw	s5,4(sp)
    46e0:	00050993          	mv	s3,a0
    46e4:	00068493          	mv	s1,a3
    s[i] = 0;
    46e8:	319020ef          	jal	ra,7200 <memset>

  while(inlen >= r) {
    46ec:	08700793          	li	a5,135
    46f0:	0b27f663          	bgeu	a5,s2,479c <keccak_absorb_once.constprop.1+0xf0>
    46f4:	088b0a93          	addi	s5,s6,136
    46f8:	000a8a13          	mv	s4,s5
    46fc:	08700413          	li	s0,135
    for(i=0;i<r/8;i++)
    4700:	000b0793          	mv	a5,s6
    4704:	00098693          	mv	a3,s3
    r |= (uint64_t)x[i] << 8*i;
    4708:	0017c703          	lbu	a4,1(a5)
    470c:	0027ce03          	lbu	t3,2(a5)
    4710:	0057c803          	lbu	a6,5(a5)
    4714:	0047cf03          	lbu	t5,4(a5)
    4718:	0067c503          	lbu	a0,6(a5)
    471c:	0007ce83          	lbu	t4,0(a5)
    4720:	0037c583          	lbu	a1,3(a5)
    4724:	0077c603          	lbu	a2,7(a5)
    4728:	00871713          	slli	a4,a4,0x8
    472c:	010e1e13          	slli	t3,t3,0x10
    4730:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    4734:	0006a303          	lw	t1,0(a3)
    4738:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    473c:	01c76733          	or	a4,a4,t3
    4740:	01e86833          	or	a6,a6,t5
    4744:	01051513          	slli	a0,a0,0x10
    4748:	01d76733          	or	a4,a4,t4
    474c:	01861613          	slli	a2,a2,0x18
    4750:	01859593          	slli	a1,a1,0x18
    4754:	01056533          	or	a0,a0,a6
    4758:	00e5e5b3          	or	a1,a1,a4
    475c:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    4760:	00e8c733          	xor	a4,a7,a4
    4764:	00b34633          	xor	a2,t1,a1
    4768:	00c6a023          	sw	a2,0(a3)
    476c:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    4770:	00878793          	addi	a5,a5,8
    4774:	00868693          	addi	a3,a3,8
    4778:	f94798e3          	bne	a5,s4,4708 <keccak_absorb_once.constprop.1+0x5c>
    in += r;
    inlen -= r;
    KeccakF1600_StatePermute(s);
    477c:	00098513          	mv	a0,s3
    inlen -= r;
    4780:	f7890913          	addi	s2,s2,-136
    in += r;
    4784:	000a8b13          	mv	s6,s5
    KeccakF1600_StatePermute(s);
    4788:	a69fd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    478c:	088a0a13          	addi	s4,s4,136
    4790:	01247663          	bgeu	s0,s2,479c <keccak_absorb_once.constprop.1+0xf0>
    4794:	088a8a93          	addi	s5,s5,136
    4798:	f69ff06f          	j	4700 <keccak_absorb_once.constprop.1+0x54>
  }

  for(i=0;i<inlen;i++)
    479c:	0e090c63          	beqz	s2,4894 <keccak_absorb_once.constprop.1+0x1e8>
    47a0:	00000693          	li	a3,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    47a4:	01f00893          	li	a7,31
    47a8:	02c0006f          	j	47d4 <keccak_absorb_once.constprop.1+0x128>
    47ac:	00072803          	lw	a6,0(a4)
    47b0:	00472583          	lw	a1,4(a4)
    47b4:	00c51633          	sll	a2,a0,a2
    47b8:	00000513          	li	a0,0
    47bc:	00a84533          	xor	a0,a6,a0
    47c0:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    47c4:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    47c8:	00a72023          	sw	a0,0(a4)
    47cc:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    47d0:	04d90a63          	beq	s2,a3,4824 <keccak_absorb_once.constprop.1+0x178>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    47d4:	0076f593          	andi	a1,a3,7
    47d8:	00359593          	slli	a1,a1,0x3
    47dc:	ff86f713          	andi	a4,a3,-8
    47e0:	00db0533          	add	a0,s6,a3
    47e4:	fe058613          	addi	a2,a1,-32
    47e8:	00054503          	lbu	a0,0(a0)
    47ec:	40b887b3          	sub	a5,a7,a1
    47f0:	00e98733          	add	a4,s3,a4
    47f4:	fa065ce3          	bgez	a2,47ac <keccak_absorb_once.constprop.1+0x100>
    47f8:	00072803          	lw	a6,0(a4)
    47fc:	00155613          	srli	a2,a0,0x1
    4800:	00b51533          	sll	a0,a0,a1
    4804:	00472583          	lw	a1,4(a4)
    4808:	00f65633          	srl	a2,a2,a5
    480c:	00a84533          	xor	a0,a6,a0
    4810:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    4814:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    4818:	00a72023          	sw	a0,0(a4)
    481c:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    4820:	fad91ae3          	bne	s2,a3,47d4 <keccak_absorb_once.constprop.1+0x128>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
    4824:	00797713          	andi	a4,s2,7
    4828:	ff897793          	andi	a5,s2,-8
    482c:	00371913          	slli	s2,a4,0x3
    4830:	fe090713          	addi	a4,s2,-32
    4834:	00f987b3          	add	a5,s3,a5
    4838:	06074063          	bltz	a4,4898 <keccak_absorb_once.constprop.1+0x1ec>
    483c:	00e49733          	sll	a4,s1,a4
    4840:	00000493          	li	s1,0
    4844:	0007a603          	lw	a2,0(a5)
    4848:	0047a683          	lw	a3,4(a5)
  s[(r-1)/8] ^= 1ULL << 63;
}
    484c:	01c12083          	lw	ra,28(sp)
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    4850:	00964633          	xor	a2,a2,s1
    4854:	00e6c733          	xor	a4,a3,a4
    4858:	00e7a223          	sw	a4,4(a5)
    485c:	00c7a023          	sw	a2,0(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    4860:	0849a783          	lw	a5,132(s3)
}
    4864:	01812403          	lw	s0,24(sp)
  s[(r-1)/8] ^= 1ULL << 63;
    4868:	80000737          	lui	a4,0x80000
    486c:	00e7c7b3          	xor	a5,a5,a4
    4870:	08f9a223          	sw	a5,132(s3)
}
    4874:	01412483          	lw	s1,20(sp)
    4878:	01012903          	lw	s2,16(sp)
    487c:	00c12983          	lw	s3,12(sp)
    4880:	00812a03          	lw	s4,8(sp)
    4884:	00412a83          	lw	s5,4(sp)
    4888:	00012b03          	lw	s6,0(sp)
    488c:	02010113          	addi	sp,sp,32
    4890:	00008067          	ret
  for(i=0;i<inlen;i++)
    4894:	00098793          	mv	a5,s3
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    4898:	01f00693          	li	a3,31
    489c:	0014d713          	srli	a4,s1,0x1
    48a0:	412686b3          	sub	a3,a3,s2
    48a4:	00d75733          	srl	a4,a4,a3
    48a8:	012494b3          	sll	s1,s1,s2
    48ac:	f99ff06f          	j	4844 <keccak_absorb_once.constprop.1+0x198>

000048b0 <keccak_absorb_once.constprop.2>:
static void keccak_absorb_once(uint64_t s[25],
    48b0:	fe010113          	addi	sp,sp,-32
    48b4:	00912a23          	sw	s1,20(sp)
    48b8:	01512223          	sw	s5,4(sp)
    48bc:	00060493          	mv	s1,a2
    48c0:	00058a93          	mv	s5,a1
    s[i] = 0;
    48c4:	0c800613          	li	a2,200
    48c8:	00000593          	li	a1,0
static void keccak_absorb_once(uint64_t s[25],
    48cc:	01212823          	sw	s2,16(sp)
    48d0:	00112e23          	sw	ra,28(sp)
    48d4:	00812c23          	sw	s0,24(sp)
    48d8:	01312623          	sw	s3,12(sp)
    48dc:	01412423          	sw	s4,8(sp)
    48e0:	00050913          	mv	s2,a0
    s[i] = 0;
    48e4:	11d020ef          	jal	ra,7200 <memset>
  while(inlen >= r) {
    48e8:	0a700793          	li	a5,167
    48ec:	0a97f663          	bgeu	a5,s1,4998 <keccak_absorb_once.constprop.2+0xe8>
    48f0:	0a8a8a13          	addi	s4,s5,168
    48f4:	000a0993          	mv	s3,s4
    48f8:	0a700413          	li	s0,167
    for(i=0;i<r/8;i++)
    48fc:	000a8793          	mv	a5,s5
    4900:	00090693          	mv	a3,s2
    r |= (uint64_t)x[i] << 8*i;
    4904:	0017c703          	lbu	a4,1(a5)
    4908:	0027ce03          	lbu	t3,2(a5)
    490c:	0057c803          	lbu	a6,5(a5)
    4910:	0047cf03          	lbu	t5,4(a5)
    4914:	0067c503          	lbu	a0,6(a5)
    4918:	0007ce83          	lbu	t4,0(a5)
    491c:	0037c583          	lbu	a1,3(a5)
    4920:	0077c603          	lbu	a2,7(a5)
    4924:	00871713          	slli	a4,a4,0x8
    4928:	010e1e13          	slli	t3,t3,0x10
    492c:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    4930:	0006a303          	lw	t1,0(a3)
    4934:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    4938:	01c76733          	or	a4,a4,t3
    493c:	01e86833          	or	a6,a6,t5
    4940:	01051513          	slli	a0,a0,0x10
    4944:	01d76733          	or	a4,a4,t4
    4948:	01861613          	slli	a2,a2,0x18
    494c:	01859593          	slli	a1,a1,0x18
    4950:	01056533          	or	a0,a0,a6
    4954:	00e5e5b3          	or	a1,a1,a4
    4958:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    495c:	00e8c733          	xor	a4,a7,a4
    4960:	00b34633          	xor	a2,t1,a1
    4964:	00c6a023          	sw	a2,0(a3)
    4968:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    496c:	00878793          	addi	a5,a5,8
    4970:	00868693          	addi	a3,a3,8
    4974:	f93798e3          	bne	a5,s3,4904 <keccak_absorb_once.constprop.2+0x54>
    KeccakF1600_StatePermute(s);
    4978:	00090513          	mv	a0,s2
    inlen -= r;
    497c:	f5848493          	addi	s1,s1,-168
    in += r;
    4980:	000a0a93          	mv	s5,s4
    KeccakF1600_StatePermute(s);
    4984:	86dfd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    4988:	0a898993          	addi	s3,s3,168
    498c:	00947663          	bgeu	s0,s1,4998 <keccak_absorb_once.constprop.2+0xe8>
    4990:	0a8a0a13          	addi	s4,s4,168
    4994:	f69ff06f          	j	48fc <keccak_absorb_once.constprop.2+0x4c>
  for(i=0;i<inlen;i++)
    4998:	10048863          	beqz	s1,4aa8 <keccak_absorb_once.constprop.2+0x1f8>
    499c:	00000693          	li	a3,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    49a0:	01f00893          	li	a7,31
    49a4:	02c0006f          	j	49d0 <keccak_absorb_once.constprop.2+0x120>
    49a8:	00072803          	lw	a6,0(a4) # 80000000 <_end_of_memory+0x7ffe0000>
    49ac:	00472583          	lw	a1,4(a4)
    49b0:	00c51633          	sll	a2,a0,a2
    49b4:	00000513          	li	a0,0
    49b8:	00a84533          	xor	a0,a6,a0
    49bc:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    49c0:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    49c4:	00a72023          	sw	a0,0(a4)
    49c8:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    49cc:	04d48a63          	beq	s1,a3,4a20 <keccak_absorb_once.constprop.2+0x170>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    49d0:	0076f593          	andi	a1,a3,7
    49d4:	00359593          	slli	a1,a1,0x3
    49d8:	ff86f713          	andi	a4,a3,-8
    49dc:	00da8533          	add	a0,s5,a3
    49e0:	fe058613          	addi	a2,a1,-32
    49e4:	00054503          	lbu	a0,0(a0)
    49e8:	40b887b3          	sub	a5,a7,a1
    49ec:	00e90733          	add	a4,s2,a4
    49f0:	fa065ce3          	bgez	a2,49a8 <keccak_absorb_once.constprop.2+0xf8>
    49f4:	00072803          	lw	a6,0(a4)
    49f8:	00155613          	srli	a2,a0,0x1
    49fc:	00b51533          	sll	a0,a0,a1
    4a00:	00472583          	lw	a1,4(a4)
    4a04:	00f65633          	srl	a2,a2,a5
    4a08:	00a84533          	xor	a0,a6,a0
    4a0c:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    4a10:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    4a14:	00a72023          	sw	a0,0(a4)
    4a18:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    4a1c:	fad49ae3          	bne	s1,a3,49d0 <keccak_absorb_once.constprop.2+0x120>
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    4a20:	0074f613          	andi	a2,s1,7
    4a24:	00361613          	slli	a2,a2,0x3
    4a28:	ff84f793          	andi	a5,s1,-8
    4a2c:	fe060693          	addi	a3,a2,-32
    4a30:	00f907b3          	add	a5,s2,a5
    4a34:	0406ce63          	bltz	a3,4a90 <keccak_absorb_once.constprop.2+0x1e0>
    4a38:	01f00713          	li	a4,31
    4a3c:	00d71733          	sll	a4,a4,a3
    4a40:	00000693          	li	a3,0
    4a44:	0007a583          	lw	a1,0(a5)
    4a48:	0047a603          	lw	a2,4(a5)
}
    4a4c:	01c12083          	lw	ra,28(sp)
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    4a50:	00d5c6b3          	xor	a3,a1,a3
    4a54:	00e64733          	xor	a4,a2,a4
    4a58:	00e7a223          	sw	a4,4(a5)
    4a5c:	00d7a023          	sw	a3,0(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    4a60:	0a492783          	lw	a5,164(s2)
}
    4a64:	01812403          	lw	s0,24(sp)
  s[(r-1)/8] ^= 1ULL << 63;
    4a68:	80000737          	lui	a4,0x80000
    4a6c:	00e7c7b3          	xor	a5,a5,a4
    4a70:	0af92223          	sw	a5,164(s2)
}
    4a74:	01412483          	lw	s1,20(sp)
    4a78:	01012903          	lw	s2,16(sp)
    4a7c:	00c12983          	lw	s3,12(sp)
    4a80:	00812a03          	lw	s4,8(sp)
    4a84:	00412a83          	lw	s5,4(sp)
    4a88:	02010113          	addi	sp,sp,32
    4a8c:	00008067          	ret
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    4a90:	01f00693          	li	a3,31
    4a94:	40c685b3          	sub	a1,a3,a2
    4a98:	00f00713          	li	a4,15
    4a9c:	00b75733          	srl	a4,a4,a1
    4aa0:	00c696b3          	sll	a3,a3,a2
    4aa4:	fa1ff06f          	j	4a44 <keccak_absorb_once.constprop.2+0x194>
  for(i=0;i<inlen;i++)
    4aa8:	00090793          	mv	a5,s2
    4aac:	01f00693          	li	a3,31
    4ab0:	00000713          	li	a4,0
    4ab4:	f91ff06f          	j	4a44 <keccak_absorb_once.constprop.2+0x194>

00004ab8 <pqcrystals_kyber_fips202_ref_shake128_init>:
* Description: Initilizes Keccak state for use as SHAKE128 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake128_init(keccak_state *state)
{
    4ab8:	ff010113          	addi	sp,sp,-16
    s[i] = 0;
    4abc:	0c800613          	li	a2,200
    4ac0:	00000593          	li	a1,0
{
    4ac4:	00812423          	sw	s0,8(sp)
    4ac8:	00112623          	sw	ra,12(sp)
    4acc:	00050413          	mv	s0,a0
    s[i] = 0;
    4ad0:	730020ef          	jal	ra,7200 <memset>
  keccak_init(state->s);
  state->pos = 0;
}
    4ad4:	00c12083          	lw	ra,12(sp)
  state->pos = 0;
    4ad8:	0c042423          	sw	zero,200(s0)
}
    4adc:	00812403          	lw	s0,8(sp)
    4ae0:	01010113          	addi	sp,sp,16
    4ae4:	00008067          	ret

00004ae8 <pqcrystals_kyber_fips202_ref_shake128_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
    4ae8:	00058693          	mv	a3,a1
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    4aec:	0c852583          	lw	a1,200(a0)
{
    4af0:	ff010113          	addi	sp,sp,-16
    4af4:	00060713          	mv	a4,a2
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    4af8:	0a800613          	li	a2,168
{
    4afc:	00812423          	sw	s0,8(sp)
    4b00:	00112623          	sw	ra,12(sp)
    4b04:	00050413          	mv	s0,a0
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    4b08:	9f5ff0ef          	jal	ra,44fc <keccak_absorb>
}
    4b0c:	00c12083          	lw	ra,12(sp)
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    4b10:	0ca42423          	sw	a0,200(s0)
}
    4b14:	00812403          	lw	s0,8(sp)
    4b18:	01010113          	addi	sp,sp,16
    4b1c:	00008067          	ret

00004b20 <pqcrystals_kyber_fips202_ref_shake128_finalize>:
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake128_finalize(keccak_state *state)
{
  keccak_finalize(state->s, state->pos, SHAKE128_RATE, 0x1F);
    4b20:	0c852783          	lw	a5,200(a0)
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    4b24:	0077f713          	andi	a4,a5,7
    4b28:	00371713          	slli	a4,a4,0x3
    4b2c:	ff87f793          	andi	a5,a5,-8
    4b30:	fe070693          	addi	a3,a4,-32 # 7fffffe0 <_end_of_memory+0x7ffdffe0>
    4b34:	00f507b3          	add	a5,a0,a5
    4b38:	0406c263          	bltz	a3,4b7c <pqcrystals_kyber_fips202_ref_shake128_finalize+0x5c>
    4b3c:	01f00613          	li	a2,31
    4b40:	00d61633          	sll	a2,a2,a3
    4b44:	00000593          	li	a1,0
    4b48:	0007a683          	lw	a3,0(a5)
    4b4c:	0047a703          	lw	a4,4(a5)
    4b50:	00b6c6b3          	xor	a3,a3,a1
    4b54:	00c74733          	xor	a4,a4,a2
    4b58:	00e7a223          	sw	a4,4(a5)
    4b5c:	00d7a023          	sw	a3,0(a5)
  s[r/8-1] ^= 1ULL << 63;
    4b60:	0a452783          	lw	a5,164(a0)
  state->pos = SHAKE128_RATE;
    4b64:	0a800713          	li	a4,168
    4b68:	0ce52423          	sw	a4,200(a0)
  s[r/8-1] ^= 1ULL << 63;
    4b6c:	80000737          	lui	a4,0x80000
    4b70:	00e7c7b3          	xor	a5,a5,a4
    4b74:	0af52223          	sw	a5,164(a0)
}
    4b78:	00008067          	ret
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    4b7c:	01f00593          	li	a1,31
    4b80:	40e586b3          	sub	a3,a1,a4
    4b84:	00f00613          	li	a2,15
    4b88:	00d65633          	srl	a2,a2,a3
    4b8c:	00e595b3          	sll	a1,a1,a4
    4b90:	fb9ff06f          	j	4b48 <pqcrystals_kyber_fips202_ref_shake128_finalize+0x28>

00004b94 <pqcrystals_kyber_fips202_ref_shake128_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
    4b94:	fe010113          	addi	sp,sp,-32
    4b98:	00912a23          	sw	s1,20(sp)
    4b9c:	00112e23          	sw	ra,28(sp)
    4ba0:	00812c23          	sw	s0,24(sp)
    4ba4:	01212823          	sw	s2,16(sp)
    4ba8:	01312623          	sw	s3,12(sp)
    4bac:	01412423          	sw	s4,8(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE128_RATE);
    4bb0:	0c862783          	lw	a5,200(a2)
{
    4bb4:	00060493          	mv	s1,a2
  while(outlen) {
    4bb8:	0a058e63          	beqz	a1,4c74 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0xe0>
    if(pos == r) {
    4bbc:	0a800713          	li	a4,168
    4bc0:	00058a13          	mv	s4,a1
    4bc4:	00050413          	mv	s0,a0
    4bc8:	0ce78863          	beq	a5,a4,4c98 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x104>
    for(i=pos;i < r && i < pos+outlen; i++)
    4bcc:	0a700713          	li	a4,167
    4bd0:	08f76c63          	bltu	a4,a5,4c68 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0xd4>
    4bd4:	00fa0633          	add	a2,s4,a5
    4bd8:	00060893          	mv	a7,a2
    4bdc:	fec7fce3          	bgeu	a5,a2,4bd4 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x40>
      *out++ = s[i/8] >> 8*(i%8);
    4be0:	01f00993          	li	s3,31
    for(i=pos;i < r && i < pos+outlen; i++)
    4be4:	0a700913          	li	s2,167
    4be8:	01c0006f          	j	4c04 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x70>
      *out++ = s[i/8] >> 8*(i%8);
    4bec:	00472703          	lw	a4,4(a4) # 80000004 <_end_of_memory+0x7ffe0004>
    for(i=pos;i < r && i < pos+outlen; i++)
    4bf0:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    4bf4:	00b75733          	srl	a4,a4,a1
    4bf8:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    4bfc:	04f96663          	bltu	s2,a5,4c48 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0xb4>
    4c00:	07178663          	beq	a5,a7,4c6c <pqcrystals_kyber_fips202_ref_shake128_squeeze+0xd8>
      *out++ = s[i/8] >> 8*(i%8);
    4c04:	0077f693          	andi	a3,a5,7
    4c08:	00369693          	slli	a3,a3,0x3
    4c0c:	ff87f713          	andi	a4,a5,-8
    4c10:	fe068593          	addi	a1,a3,-32
    4c14:	40d98833          	sub	a6,s3,a3
    4c18:	00e48733          	add	a4,s1,a4
    4c1c:	00140413          	addi	s0,s0,1
    4c20:	fc05d6e3          	bgez	a1,4bec <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x58>
    4c24:	00472583          	lw	a1,4(a4)
    4c28:	00072703          	lw	a4,0(a4)
    for(i=pos;i < r && i < pos+outlen; i++)
    4c2c:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    4c30:	00159593          	slli	a1,a1,0x1
    4c34:	010595b3          	sll	a1,a1,a6
    4c38:	00d75733          	srl	a4,a4,a3
    4c3c:	00e5e733          	or	a4,a1,a4
    4c40:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    4c44:	faf97ee3          	bgeu	s2,a5,4c00 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x6c>
    outlen -= i-pos;
    4c48:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    4c4c:	02f60463          	beq	a2,a5,4c74 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0xe0>
      KeccakF1600_StatePermute(s);
    4c50:	00048513          	mv	a0,s1
    4c54:	d9cfd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    4c58:	000a0893          	mv	a7,s4
      pos = 0;
    4c5c:	00000793          	li	a5,0
    4c60:	000a0613          	mv	a2,s4
    4c64:	fa1ff06f          	j	4c04 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x70>
  while(outlen) {
    4c68:	0000006f          	j	4c68 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0xd4>
    outlen -= i-pos;
    4c6c:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    4c70:	f6f612e3          	bne	a2,a5,4bd4 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x40>
}
    4c74:	01c12083          	lw	ra,28(sp)
    4c78:	01812403          	lw	s0,24(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE128_RATE);
    4c7c:	0cf4a423          	sw	a5,200(s1)
}
    4c80:	01012903          	lw	s2,16(sp)
    4c84:	01412483          	lw	s1,20(sp)
    4c88:	00c12983          	lw	s3,12(sp)
    4c8c:	00812a03          	lw	s4,8(sp)
    4c90:	02010113          	addi	sp,sp,32
    4c94:	00008067          	ret
      KeccakF1600_StatePermute(s);
    4c98:	00060513          	mv	a0,a2
    4c9c:	d54fd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    4ca0:	000a0893          	mv	a7,s4
      pos = 0;
    4ca4:	00000793          	li	a5,0
    4ca8:	000a0613          	mv	a2,s4
    4cac:	f35ff06f          	j	4be0 <pqcrystals_kyber_fips202_ref_shake128_squeeze+0x4c>

00004cb0 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
    4cb0:	ff010113          	addi	sp,sp,-16
    4cb4:	00812423          	sw	s0,8(sp)
    4cb8:	00112623          	sw	ra,12(sp)
    4cbc:	00050413          	mv	s0,a0
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    4cc0:	bf1ff0ef          	jal	ra,48b0 <keccak_absorb_once.constprop.2>
  state->pos = SHAKE128_RATE;
    4cc4:	0a800793          	li	a5,168
}
    4cc8:	00c12083          	lw	ra,12(sp)
  state->pos = SHAKE128_RATE;
    4ccc:	0cf42423          	sw	a5,200(s0)
}
    4cd0:	00812403          	lw	s0,8(sp)
    4cd4:	01010113          	addi	sp,sp,16
    4cd8:	00008067          	ret

00004cdc <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>:
  while(nblocks) {
    4cdc:	0c058463          	beqz	a1,4da4 <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks+0xc8>
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
    4ce0:	fe010113          	addi	sp,sp,-32
    4ce4:	01412423          	sw	s4,8(sp)
    4ce8:	0a850a13          	addi	s4,a0,168
    4cec:	00812c23          	sw	s0,24(sp)
    4cf0:	00912a23          	sw	s1,20(sp)
    4cf4:	01212823          	sw	s2,16(sp)
    4cf8:	01312623          	sw	s3,12(sp)
    4cfc:	00112e23          	sw	ra,28(sp)
    4d00:	00058993          	mv	s3,a1
    4d04:	00050413          	mv	s0,a0
    4d08:	00060913          	mv	s2,a2
    4d0c:	000a0493          	mv	s1,s4
    KeccakF1600_StatePermute(s);
    4d10:	00090513          	mv	a0,s2
    4d14:	cdcfd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    4d18:	00090613          	mv	a2,s2
    4d1c:	00040793          	mv	a5,s0
      store64(out+8*i, s[i]);
    4d20:	00062683          	lw	a3,0(a2)
    4d24:	00462703          	lw	a4,4(a2)
    for(i=0;i<r/8;i++)
    4d28:	00878793          	addi	a5,a5,8
    x[i] = u >> 8*i;
    4d2c:	0086de93          	srli	t4,a3,0x8
    4d30:	0106de13          	srli	t3,a3,0x10
    4d34:	0186d313          	srli	t1,a3,0x18
    4d38:	00875893          	srli	a7,a4,0x8
    4d3c:	01075813          	srli	a6,a4,0x10
    4d40:	01875593          	srli	a1,a4,0x18
    4d44:	ffd78ca3          	sb	t4,-7(a5)
    4d48:	ffc78d23          	sb	t3,-6(a5)
    4d4c:	fe678da3          	sb	t1,-5(a5)
    4d50:	ff178ea3          	sb	a7,-3(a5)
    4d54:	ff078f23          	sb	a6,-2(a5)
    4d58:	feb78fa3          	sb	a1,-1(a5)
    4d5c:	fed78c23          	sb	a3,-8(a5)
    4d60:	fee78e23          	sb	a4,-4(a5)
    for(i=0;i<r/8;i++)
    4d64:	00860613          	addi	a2,a2,8
    4d68:	faf49ce3          	bne	s1,a5,4d20 <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks+0x44>
    nblocks -= 1;
    4d6c:	fff98993          	addi	s3,s3,-1
    out += r;
    4d70:	000a0413          	mv	s0,s4
  while(nblocks) {
    4d74:	0a848493          	addi	s1,s1,168
    4d78:	00098663          	beqz	s3,4d84 <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks+0xa8>
    4d7c:	0a8a0a13          	addi	s4,s4,168
    4d80:	f91ff06f          	j	4d10 <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks+0x34>
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
}
    4d84:	01c12083          	lw	ra,28(sp)
    4d88:	01812403          	lw	s0,24(sp)
    4d8c:	01412483          	lw	s1,20(sp)
    4d90:	01012903          	lw	s2,16(sp)
    4d94:	00c12983          	lw	s3,12(sp)
    4d98:	00812a03          	lw	s4,8(sp)
    4d9c:	02010113          	addi	sp,sp,32
    4da0:	00008067          	ret
    4da4:	00008067          	ret

00004da8 <pqcrystals_kyber_fips202_ref_shake256_init>:
*
* Description: Initilizes Keccak state for use as SHAKE256 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake256_init(keccak_state *state)
    4da8:	ff010113          	addi	sp,sp,-16
    4dac:	0c800613          	li	a2,200
    4db0:	00000593          	li	a1,0
    4db4:	00812423          	sw	s0,8(sp)
    4db8:	00112623          	sw	ra,12(sp)
    4dbc:	00050413          	mv	s0,a0
    4dc0:	440020ef          	jal	ra,7200 <memset>
    4dc4:	00c12083          	lw	ra,12(sp)
    4dc8:	0c042423          	sw	zero,200(s0)
    4dcc:	00812403          	lw	s0,8(sp)
    4dd0:	01010113          	addi	sp,sp,16
    4dd4:	00008067          	ret

00004dd8 <pqcrystals_kyber_fips202_ref_shake256_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
    4dd8:	00058693          	mv	a3,a1
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    4ddc:	0c852583          	lw	a1,200(a0)
{
    4de0:	ff010113          	addi	sp,sp,-16
    4de4:	00060713          	mv	a4,a2
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    4de8:	08800613          	li	a2,136
{
    4dec:	00812423          	sw	s0,8(sp)
    4df0:	00112623          	sw	ra,12(sp)
    4df4:	00050413          	mv	s0,a0
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    4df8:	f04ff0ef          	jal	ra,44fc <keccak_absorb>
}
    4dfc:	00c12083          	lw	ra,12(sp)
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    4e00:	0ca42423          	sw	a0,200(s0)
}
    4e04:	00812403          	lw	s0,8(sp)
    4e08:	01010113          	addi	sp,sp,16
    4e0c:	00008067          	ret

00004e10 <pqcrystals_kyber_fips202_ref_shake256_finalize>:
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
  keccak_finalize(state->s, state->pos, SHAKE256_RATE, 0x1F);
    4e10:	0c852783          	lw	a5,200(a0)
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    4e14:	0077f713          	andi	a4,a5,7
    4e18:	00371713          	slli	a4,a4,0x3
    4e1c:	ff87f793          	andi	a5,a5,-8
    4e20:	fe070693          	addi	a3,a4,-32
    4e24:	00f507b3          	add	a5,a0,a5
    4e28:	0406c263          	bltz	a3,4e6c <pqcrystals_kyber_fips202_ref_shake256_finalize+0x5c>
    4e2c:	01f00613          	li	a2,31
    4e30:	00d61633          	sll	a2,a2,a3
    4e34:	00000593          	li	a1,0
    4e38:	0007a683          	lw	a3,0(a5)
    4e3c:	0047a703          	lw	a4,4(a5)
    4e40:	00b6c6b3          	xor	a3,a3,a1
    4e44:	00c74733          	xor	a4,a4,a2
    4e48:	00e7a223          	sw	a4,4(a5)
    4e4c:	00d7a023          	sw	a3,0(a5)
  s[r/8-1] ^= 1ULL << 63;
    4e50:	08452783          	lw	a5,132(a0)
  state->pos = SHAKE256_RATE;
    4e54:	08800713          	li	a4,136
    4e58:	0ce52423          	sw	a4,200(a0)
  s[r/8-1] ^= 1ULL << 63;
    4e5c:	80000737          	lui	a4,0x80000
    4e60:	00e7c7b3          	xor	a5,a5,a4
    4e64:	08f52223          	sw	a5,132(a0)
}
    4e68:	00008067          	ret
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    4e6c:	01f00593          	li	a1,31
    4e70:	40e586b3          	sub	a3,a1,a4
    4e74:	00f00613          	li	a2,15
    4e78:	00d65633          	srl	a2,a2,a3
    4e7c:	00e595b3          	sll	a1,a1,a4
    4e80:	fb9ff06f          	j	4e38 <pqcrystals_kyber_fips202_ref_shake256_finalize+0x28>

00004e84 <pqcrystals_kyber_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
    4e84:	fe010113          	addi	sp,sp,-32
    4e88:	00912a23          	sw	s1,20(sp)
    4e8c:	00112e23          	sw	ra,28(sp)
    4e90:	00812c23          	sw	s0,24(sp)
    4e94:	01212823          	sw	s2,16(sp)
    4e98:	01312623          	sw	s3,12(sp)
    4e9c:	01412423          	sw	s4,8(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
    4ea0:	0c862783          	lw	a5,200(a2)
{
    4ea4:	00060493          	mv	s1,a2
  while(outlen) {
    4ea8:	0a058e63          	beqz	a1,4f64 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0xe0>
    if(pos == r) {
    4eac:	08800713          	li	a4,136
    4eb0:	00058a13          	mv	s4,a1
    4eb4:	00050413          	mv	s0,a0
    4eb8:	0ce78863          	beq	a5,a4,4f88 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x104>
    for(i=pos;i < r && i < pos+outlen; i++)
    4ebc:	08700713          	li	a4,135
    4ec0:	08f76c63          	bltu	a4,a5,4f58 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0xd4>
    4ec4:	00fa0633          	add	a2,s4,a5
    4ec8:	00060893          	mv	a7,a2
    4ecc:	fec7fce3          	bgeu	a5,a2,4ec4 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x40>
      *out++ = s[i/8] >> 8*(i%8);
    4ed0:	01f00993          	li	s3,31
    for(i=pos;i < r && i < pos+outlen; i++)
    4ed4:	08700913          	li	s2,135
    4ed8:	01c0006f          	j	4ef4 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x70>
      *out++ = s[i/8] >> 8*(i%8);
    4edc:	00472703          	lw	a4,4(a4) # 80000004 <_end_of_memory+0x7ffe0004>
    for(i=pos;i < r && i < pos+outlen; i++)
    4ee0:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    4ee4:	00b75733          	srl	a4,a4,a1
    4ee8:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    4eec:	04f96663          	bltu	s2,a5,4f38 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0xb4>
    4ef0:	07178663          	beq	a5,a7,4f5c <pqcrystals_kyber_fips202_ref_shake256_squeeze+0xd8>
      *out++ = s[i/8] >> 8*(i%8);
    4ef4:	0077f693          	andi	a3,a5,7
    4ef8:	00369693          	slli	a3,a3,0x3
    4efc:	ff87f713          	andi	a4,a5,-8
    4f00:	fe068593          	addi	a1,a3,-32
    4f04:	40d98833          	sub	a6,s3,a3
    4f08:	00e48733          	add	a4,s1,a4
    4f0c:	00140413          	addi	s0,s0,1
    4f10:	fc05d6e3          	bgez	a1,4edc <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x58>
    4f14:	00472583          	lw	a1,4(a4)
    4f18:	00072703          	lw	a4,0(a4)
    for(i=pos;i < r && i < pos+outlen; i++)
    4f1c:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    4f20:	00159593          	slli	a1,a1,0x1
    4f24:	010595b3          	sll	a1,a1,a6
    4f28:	00d75733          	srl	a4,a4,a3
    4f2c:	00e5e733          	or	a4,a1,a4
    4f30:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    4f34:	faf97ee3          	bgeu	s2,a5,4ef0 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x6c>
    outlen -= i-pos;
    4f38:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    4f3c:	02f60463          	beq	a2,a5,4f64 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0xe0>
      KeccakF1600_StatePermute(s);
    4f40:	00048513          	mv	a0,s1
    4f44:	aacfd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    4f48:	000a0893          	mv	a7,s4
      pos = 0;
    4f4c:	00000793          	li	a5,0
    4f50:	000a0613          	mv	a2,s4
    4f54:	fa1ff06f          	j	4ef4 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x70>
  while(outlen) {
    4f58:	0000006f          	j	4f58 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0xd4>
    outlen -= i-pos;
    4f5c:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    4f60:	f6f612e3          	bne	a2,a5,4ec4 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x40>
}
    4f64:	01c12083          	lw	ra,28(sp)
    4f68:	01812403          	lw	s0,24(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
    4f6c:	0cf4a423          	sw	a5,200(s1)
}
    4f70:	01012903          	lw	s2,16(sp)
    4f74:	01412483          	lw	s1,20(sp)
    4f78:	00c12983          	lw	s3,12(sp)
    4f7c:	00812a03          	lw	s4,8(sp)
    4f80:	02010113          	addi	sp,sp,32
    4f84:	00008067          	ret
      KeccakF1600_StatePermute(s);
    4f88:	00060513          	mv	a0,a2
    4f8c:	a64fd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    4f90:	000a0893          	mv	a7,s4
      pos = 0;
    4f94:	00000793          	li	a5,0
    4f98:	000a0613          	mv	a2,s4
    4f9c:	f35ff06f          	j	4ed0 <pqcrystals_kyber_fips202_ref_shake256_squeeze+0x4c>

00004fa0 <pqcrystals_kyber_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
    4fa0:	ff010113          	addi	sp,sp,-16
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    4fa4:	01f00693          	li	a3,31
{
    4fa8:	00812423          	sw	s0,8(sp)
    4fac:	00112623          	sw	ra,12(sp)
    4fb0:	00050413          	mv	s0,a0
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    4fb4:	ef8ff0ef          	jal	ra,46ac <keccak_absorb_once.constprop.1>
  state->pos = SHAKE256_RATE;
    4fb8:	08800793          	li	a5,136
}
    4fbc:	00c12083          	lw	ra,12(sp)
  state->pos = SHAKE256_RATE;
    4fc0:	0cf42423          	sw	a5,200(s0)
}
    4fc4:	00812403          	lw	s0,8(sp)
    4fc8:	01010113          	addi	sp,sp,16
    4fcc:	00008067          	ret

00004fd0 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>:
  while(nblocks) {
    4fd0:	0c058463          	beqz	a1,5098 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks+0xc8>
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
    4fd4:	fe010113          	addi	sp,sp,-32
    4fd8:	01412423          	sw	s4,8(sp)
    4fdc:	08850a13          	addi	s4,a0,136
    4fe0:	00812c23          	sw	s0,24(sp)
    4fe4:	00912a23          	sw	s1,20(sp)
    4fe8:	01212823          	sw	s2,16(sp)
    4fec:	01312623          	sw	s3,12(sp)
    4ff0:	00112e23          	sw	ra,28(sp)
    4ff4:	00058993          	mv	s3,a1
    4ff8:	00050413          	mv	s0,a0
    4ffc:	00060913          	mv	s2,a2
    5000:	000a0493          	mv	s1,s4
    KeccakF1600_StatePermute(s);
    5004:	00090513          	mv	a0,s2
    5008:	9e8fd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    500c:	00090613          	mv	a2,s2
    5010:	00040793          	mv	a5,s0
      store64(out+8*i, s[i]);
    5014:	00062683          	lw	a3,0(a2)
    5018:	00462703          	lw	a4,4(a2)
    for(i=0;i<r/8;i++)
    501c:	00878793          	addi	a5,a5,8
    x[i] = u >> 8*i;
    5020:	0086de93          	srli	t4,a3,0x8
    5024:	0106de13          	srli	t3,a3,0x10
    5028:	0186d313          	srli	t1,a3,0x18
    502c:	00875893          	srli	a7,a4,0x8
    5030:	01075813          	srli	a6,a4,0x10
    5034:	01875593          	srli	a1,a4,0x18
    5038:	ffd78ca3          	sb	t4,-7(a5)
    503c:	ffc78d23          	sb	t3,-6(a5)
    5040:	fe678da3          	sb	t1,-5(a5)
    5044:	ff178ea3          	sb	a7,-3(a5)
    5048:	ff078f23          	sb	a6,-2(a5)
    504c:	feb78fa3          	sb	a1,-1(a5)
    5050:	fed78c23          	sb	a3,-8(a5)
    5054:	fee78e23          	sb	a4,-4(a5)
    for(i=0;i<r/8;i++)
    5058:	00860613          	addi	a2,a2,8
    505c:	faf49ce3          	bne	s1,a5,5014 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks+0x44>
    nblocks -= 1;
    5060:	fff98993          	addi	s3,s3,-1
    out += r;
    5064:	000a0413          	mv	s0,s4
  while(nblocks) {
    5068:	08848493          	addi	s1,s1,136
    506c:	00098663          	beqz	s3,5078 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks+0xa8>
    5070:	088a0a13          	addi	s4,s4,136
    5074:	f91ff06f          	j	5004 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks+0x34>
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
}
    5078:	01c12083          	lw	ra,28(sp)
    507c:	01812403          	lw	s0,24(sp)
    5080:	01412483          	lw	s1,20(sp)
    5084:	01012903          	lw	s2,16(sp)
    5088:	00c12983          	lw	s3,12(sp)
    508c:	00812a03          	lw	s4,8(sp)
    5090:	02010113          	addi	sp,sp,32
    5094:	00008067          	ret
    5098:	00008067          	ret

0000509c <pqcrystals_kyber_fips202_ref_shake128>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
    509c:	f1010113          	addi	sp,sp,-240
    50a0:	00060793          	mv	a5,a2
    50a4:	0e812423          	sw	s0,232(sp)
    50a8:	0e912223          	sw	s1,228(sp)
    50ac:	00050413          	mv	s0,a0
    50b0:	00058493          	mv	s1,a1
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    50b4:	00068613          	mv	a2,a3
    50b8:	00078593          	mv	a1,a5
    50bc:	00010513          	mv	a0,sp
{
    50c0:	0f212023          	sw	s2,224(sp)
    50c4:	0d312e23          	sw	s3,220(sp)
    50c8:	0d412c23          	sw	s4,216(sp)
    50cc:	0d512a23          	sw	s5,212(sp)
    50d0:	0e112623          	sw	ra,236(sp)
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    50d4:	fdcff0ef          	jal	ra,48b0 <keccak_absorb_once.constprop.2>
  state->pos = SHAKE128_RATE;
    50d8:	0a800793          	li	a5,168
  size_t nblocks;
  keccak_state state;

  shake128_absorb_once(&state, in, inlen);
  nblocks = outlen/SHAKE128_RATE;
    50dc:	02f4d933          	divu	s2,s1,a5
  state->pos = SHAKE128_RATE;
    50e0:	0cf12423          	sw	a5,200(sp)
  while(nblocks) {
    50e4:	0a700793          	li	a5,167
    50e8:	00040a93          	mv	s5,s0
    50ec:	0a810993          	addi	s3,sp,168
    50f0:	00090a13          	mv	s4,s2
    50f4:	0697f663          	bgeu	a5,s1,5160 <pqcrystals_kyber_fips202_ref_shake128+0xc4>
    KeccakF1600_StatePermute(s);
    50f8:	00010513          	mv	a0,sp
    50fc:	8f4fd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    5100:	00010713          	mv	a4,sp
    5104:	000a8793          	mv	a5,s5
      store64(out+8*i, s[i]);
    5108:	00072603          	lw	a2,0(a4)
    510c:	00472683          	lw	a3,4(a4)
    for(i=0;i<r/8;i++)
    5110:	00870713          	addi	a4,a4,8
    x[i] = u >> 8*i;
    5114:	00865e13          	srli	t3,a2,0x8
    5118:	01065313          	srli	t1,a2,0x10
    511c:	01865893          	srli	a7,a2,0x18
    5120:	0086d813          	srli	a6,a3,0x8
    5124:	0106d513          	srli	a0,a3,0x10
    5128:	0186d593          	srli	a1,a3,0x18
    512c:	00c78023          	sb	a2,0(a5)
    5130:	01c780a3          	sb	t3,1(a5)
    5134:	00678123          	sb	t1,2(a5)
    5138:	011781a3          	sb	a7,3(a5)
    513c:	00d78223          	sb	a3,4(a5)
    5140:	010782a3          	sb	a6,5(a5)
    5144:	00a78323          	sb	a0,6(a5)
    5148:	00b783a3          	sb	a1,7(a5)
    for(i=0;i<r/8;i++)
    514c:	00878793          	addi	a5,a5,8
    5150:	fae99ce3          	bne	s3,a4,5108 <pqcrystals_kyber_fips202_ref_shake128+0x6c>
    nblocks -= 1;
    5154:	fffa0a13          	addi	s4,s4,-1
    out += r;
    5158:	0a8a8a93          	addi	s5,s5,168
  while(nblocks) {
    515c:	f80a1ee3          	bnez	s4,50f8 <pqcrystals_kyber_fips202_ref_shake128+0x5c>
  shake128_squeezeblocks(out, nblocks, &state);
  outlen -= nblocks*SHAKE128_RATE;
    5160:	0a800793          	li	a5,168
    5164:	02f4f9b3          	remu	s3,s1,a5
    5168:	02f907b3          	mul	a5,s2,a5
  out += nblocks*SHAKE128_RATE;
    516c:	00f40433          	add	s0,s0,a5
  while(outlen) {
    5170:	0c098463          	beqz	s3,5238 <pqcrystals_kyber_fips202_ref_shake128+0x19c>
      KeccakF1600_StatePermute(s);
    5174:	00010513          	mv	a0,sp
    5178:	878fd0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
      *out++ = s[i/8] >> 8*(i%8);
    517c:	01f00493          	li	s1,31
      KeccakF1600_StatePermute(s);
    5180:	00098513          	mv	a0,s3
      pos = 0;
    5184:	00000813          	li	a6,0
    for(i=pos;i < r && i < pos+outlen; i++)
    5188:	0a800913          	li	s2,168
      pos = 0;
    518c:	00080713          	mv	a4,a6
    5190:	01c0006f          	j	51ac <pqcrystals_kyber_fips202_ref_shake128+0x110>
      *out++ = s[i/8] >> 8*(i%8);
    5194:	f347a783          	lw	a5,-204(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    5198:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    519c:	00c7d7b3          	srl	a5,a5,a2
    51a0:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    51a4:	05270863          	beq	a4,s2,51f4 <pqcrystals_kyber_fips202_ref_shake128+0x158>
    51a8:	06a70663          	beq	a4,a0,5214 <pqcrystals_kyber_fips202_ref_shake128+0x178>
      *out++ = s[i/8] >> 8*(i%8);
    51ac:	00777693          	andi	a3,a4,7
    51b0:	00369693          	slli	a3,a3,0x3
    51b4:	ff877793          	andi	a5,a4,-8
    51b8:	0d078793          	addi	a5,a5,208
    51bc:	fe068613          	addi	a2,a3,-32
    51c0:	40d485b3          	sub	a1,s1,a3
    51c4:	002787b3          	add	a5,a5,sp
    51c8:	00140413          	addi	s0,s0,1
    51cc:	fc0654e3          	bgez	a2,5194 <pqcrystals_kyber_fips202_ref_shake128+0xf8>
    51d0:	f347a603          	lw	a2,-204(a5)
    51d4:	f307a783          	lw	a5,-208(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    51d8:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    51dc:	00161613          	slli	a2,a2,0x1
    51e0:	00b61633          	sll	a2,a2,a1
    51e4:	00d7d7b3          	srl	a5,a5,a3
    51e8:	00f667b3          	or	a5,a2,a5
    51ec:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    51f0:	fb271ce3          	bne	a4,s2,51a8 <pqcrystals_kyber_fips202_ref_shake128+0x10c>
    outlen -= i-pos;
    51f4:	010989b3          	add	s3,s3,a6
    51f8:	f5898993          	addi	s3,s3,-168
  while(outlen) {
    51fc:	02098e63          	beqz	s3,5238 <pqcrystals_kyber_fips202_ref_shake128+0x19c>
      KeccakF1600_StatePermute(s);
    5200:	00010513          	mv	a0,sp
    5204:	fedfc0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    5208:	00098513          	mv	a0,s3
      pos = 0;
    520c:	00000813          	li	a6,0
    5210:	f7dff06f          	j	518c <pqcrystals_kyber_fips202_ref_shake128+0xf0>
    outlen -= i-pos;
    5214:	01098833          	add	a6,s3,a6
    5218:	40e809b3          	sub	s3,a6,a4
  while(outlen) {
    521c:	00e80e63          	beq	a6,a4,5238 <pqcrystals_kyber_fips202_ref_shake128+0x19c>
    5220:	01370533          	add	a0,a4,s3
    for(i=pos;i < r && i < pos+outlen; i++)
    5224:	00070813          	mv	a6,a4
    5228:	00050793          	mv	a5,a0
    522c:	f6f760e3          	bltu	a4,a5,518c <pqcrystals_kyber_fips202_ref_shake128+0xf0>
    5230:	f4f76ee3          	bltu	a4,a5,518c <pqcrystals_kyber_fips202_ref_shake128+0xf0>
    5234:	ff9ff06f          	j	522c <pqcrystals_kyber_fips202_ref_shake128+0x190>
  shake128_squeeze(out, outlen, &state);
}
    5238:	0ec12083          	lw	ra,236(sp)
    523c:	0e812403          	lw	s0,232(sp)
    5240:	0e412483          	lw	s1,228(sp)
    5244:	0e012903          	lw	s2,224(sp)
    5248:	0dc12983          	lw	s3,220(sp)
    524c:	0d812a03          	lw	s4,216(sp)
    5250:	0d412a83          	lw	s5,212(sp)
    5254:	0f010113          	addi	sp,sp,240
    5258:	00008067          	ret

0000525c <pqcrystals_kyber_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
    525c:	f1010113          	addi	sp,sp,-240
    5260:	00060793          	mv	a5,a2
    5264:	0e812423          	sw	s0,232(sp)
    5268:	0e912223          	sw	s1,228(sp)
    526c:	00068613          	mv	a2,a3
    5270:	00050413          	mv	s0,a0
    5274:	00058493          	mv	s1,a1
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    5278:	01f00693          	li	a3,31
    527c:	00078593          	mv	a1,a5
    5280:	00010513          	mv	a0,sp
{
    5284:	0f212023          	sw	s2,224(sp)
    5288:	0d312e23          	sw	s3,220(sp)
    528c:	0d412c23          	sw	s4,216(sp)
    5290:	0d512a23          	sw	s5,212(sp)
    5294:	0e112623          	sw	ra,236(sp)
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    5298:	c14ff0ef          	jal	ra,46ac <keccak_absorb_once.constprop.1>
  state->pos = SHAKE256_RATE;
    529c:	08800793          	li	a5,136
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
  nblocks = outlen/SHAKE256_RATE;
    52a0:	02f4d933          	divu	s2,s1,a5
  state->pos = SHAKE256_RATE;
    52a4:	0cf12423          	sw	a5,200(sp)
  while(nblocks) {
    52a8:	08700793          	li	a5,135
    52ac:	00040a93          	mv	s5,s0
    52b0:	08810993          	addi	s3,sp,136
    52b4:	00090a13          	mv	s4,s2
    52b8:	0697f663          	bgeu	a5,s1,5324 <pqcrystals_kyber_fips202_ref_shake256+0xc8>
    KeccakF1600_StatePermute(s);
    52bc:	00010513          	mv	a0,sp
    52c0:	f31fc0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    52c4:	00010713          	mv	a4,sp
    52c8:	000a8793          	mv	a5,s5
      store64(out+8*i, s[i]);
    52cc:	00072603          	lw	a2,0(a4)
    52d0:	00472683          	lw	a3,4(a4)
    for(i=0;i<r/8;i++)
    52d4:	00870713          	addi	a4,a4,8
    x[i] = u >> 8*i;
    52d8:	00865e13          	srli	t3,a2,0x8
    52dc:	01065313          	srli	t1,a2,0x10
    52e0:	01865893          	srli	a7,a2,0x18
    52e4:	0086d813          	srli	a6,a3,0x8
    52e8:	0106d513          	srli	a0,a3,0x10
    52ec:	0186d593          	srli	a1,a3,0x18
    52f0:	00c78023          	sb	a2,0(a5)
    52f4:	01c780a3          	sb	t3,1(a5)
    52f8:	00678123          	sb	t1,2(a5)
    52fc:	011781a3          	sb	a7,3(a5)
    5300:	00d78223          	sb	a3,4(a5)
    5304:	010782a3          	sb	a6,5(a5)
    5308:	00a78323          	sb	a0,6(a5)
    530c:	00b783a3          	sb	a1,7(a5)
    for(i=0;i<r/8;i++)
    5310:	00878793          	addi	a5,a5,8
    5314:	fae99ce3          	bne	s3,a4,52cc <pqcrystals_kyber_fips202_ref_shake256+0x70>
    nblocks -= 1;
    5318:	fffa0a13          	addi	s4,s4,-1
    out += r;
    531c:	088a8a93          	addi	s5,s5,136
  while(nblocks) {
    5320:	f80a1ee3          	bnez	s4,52bc <pqcrystals_kyber_fips202_ref_shake256+0x60>
  shake256_squeezeblocks(out, nblocks, &state);
  outlen -= nblocks*SHAKE256_RATE;
    5324:	08800993          	li	s3,136
    5328:	0334f9b3          	remu	s3,s1,s3
    532c:	00491793          	slli	a5,s2,0x4
    5330:	012787b3          	add	a5,a5,s2
    5334:	00379793          	slli	a5,a5,0x3
  out += nblocks*SHAKE256_RATE;
    5338:	00f40433          	add	s0,s0,a5
  while(outlen) {
    533c:	0c098463          	beqz	s3,5404 <pqcrystals_kyber_fips202_ref_shake256+0x1a8>
      KeccakF1600_StatePermute(s);
    5340:	00010513          	mv	a0,sp
    5344:	eadfc0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
      *out++ = s[i/8] >> 8*(i%8);
    5348:	01f00913          	li	s2,31
      KeccakF1600_StatePermute(s);
    534c:	00098513          	mv	a0,s3
      pos = 0;
    5350:	00000813          	li	a6,0
    for(i=pos;i < r && i < pos+outlen; i++)
    5354:	08800493          	li	s1,136
      pos = 0;
    5358:	00080713          	mv	a4,a6
    535c:	01c0006f          	j	5378 <pqcrystals_kyber_fips202_ref_shake256+0x11c>
      *out++ = s[i/8] >> 8*(i%8);
    5360:	f347a783          	lw	a5,-204(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    5364:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    5368:	00c7d7b3          	srl	a5,a5,a2
    536c:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    5370:	04970863          	beq	a4,s1,53c0 <pqcrystals_kyber_fips202_ref_shake256+0x164>
    5374:	06a70663          	beq	a4,a0,53e0 <pqcrystals_kyber_fips202_ref_shake256+0x184>
      *out++ = s[i/8] >> 8*(i%8);
    5378:	00777693          	andi	a3,a4,7
    537c:	00369693          	slli	a3,a3,0x3
    5380:	ff877793          	andi	a5,a4,-8
    5384:	0d078793          	addi	a5,a5,208
    5388:	fe068613          	addi	a2,a3,-32
    538c:	40d905b3          	sub	a1,s2,a3
    5390:	002787b3          	add	a5,a5,sp
    5394:	00140413          	addi	s0,s0,1
    5398:	fc0654e3          	bgez	a2,5360 <pqcrystals_kyber_fips202_ref_shake256+0x104>
    539c:	f347a603          	lw	a2,-204(a5)
    53a0:	f307a783          	lw	a5,-208(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    53a4:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    53a8:	00161613          	slli	a2,a2,0x1
    53ac:	00b61633          	sll	a2,a2,a1
    53b0:	00d7d7b3          	srl	a5,a5,a3
    53b4:	00f667b3          	or	a5,a2,a5
    53b8:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    53bc:	fa971ce3          	bne	a4,s1,5374 <pqcrystals_kyber_fips202_ref_shake256+0x118>
    outlen -= i-pos;
    53c0:	01098833          	add	a6,s3,a6
    53c4:	f7880993          	addi	s3,a6,-136
  while(outlen) {
    53c8:	02098e63          	beqz	s3,5404 <pqcrystals_kyber_fips202_ref_shake256+0x1a8>
      KeccakF1600_StatePermute(s);
    53cc:	00010513          	mv	a0,sp
    53d0:	e21fc0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
    53d4:	00098513          	mv	a0,s3
      pos = 0;
    53d8:	00000813          	li	a6,0
    53dc:	f7dff06f          	j	5358 <pqcrystals_kyber_fips202_ref_shake256+0xfc>
    outlen -= i-pos;
    53e0:	01098833          	add	a6,s3,a6
    53e4:	40e809b3          	sub	s3,a6,a4
  while(outlen) {
    53e8:	00e80e63          	beq	a6,a4,5404 <pqcrystals_kyber_fips202_ref_shake256+0x1a8>
    53ec:	01370533          	add	a0,a4,s3
    for(i=pos;i < r && i < pos+outlen; i++)
    53f0:	00070813          	mv	a6,a4
    53f4:	00050793          	mv	a5,a0
    53f8:	f6f760e3          	bltu	a4,a5,5358 <pqcrystals_kyber_fips202_ref_shake256+0xfc>
    53fc:	f4f76ee3          	bltu	a4,a5,5358 <pqcrystals_kyber_fips202_ref_shake256+0xfc>
    5400:	ff9ff06f          	j	53f8 <pqcrystals_kyber_fips202_ref_shake256+0x19c>
  shake256_squeeze(out, outlen, &state);
}
    5404:	0ec12083          	lw	ra,236(sp)
    5408:	0e812403          	lw	s0,232(sp)
    540c:	0e412483          	lw	s1,228(sp)
    5410:	0e012903          	lw	s2,224(sp)
    5414:	0dc12983          	lw	s3,220(sp)
    5418:	0d812a03          	lw	s4,216(sp)
    541c:	0d412a83          	lw	s5,212(sp)
    5420:	0f010113          	addi	sp,sp,240
    5424:	00008067          	ret

00005428 <pqcrystals_kyber_fips202_ref_sha3_256>:
* Arguments:   - uint8_t *h: pointer to output (32 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_256(uint8_t h[32], const uint8_t *in, size_t inlen)
{
    5428:	ef010113          	addi	sp,sp,-272
    542c:	10812423          	sw	s0,264(sp)
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    5430:	00600693          	li	a3,6
{
    5434:	00050413          	mv	s0,a0
  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    5438:	00810513          	addi	a0,sp,8
{
    543c:	10112623          	sw	ra,268(sp)
    5440:	10912223          	sw	s1,260(sp)
    5444:	11212023          	sw	s2,256(sp)
    5448:	0f312e23          	sw	s3,252(sp)
    544c:	0f412c23          	sw	s4,248(sp)
    5450:	0f512a23          	sw	s5,244(sp)
    5454:	0f612823          	sw	s6,240(sp)
    5458:	0f712623          	sw	s7,236(sp)
    545c:	0f812423          	sw	s8,232(sp)
    5460:	0f912223          	sw	s9,228(sp)
    5464:	0fa12023          	sw	s10,224(sp)
    5468:	0db12e23          	sw	s11,220(sp)
  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    546c:	a40ff0ef          	jal	ra,46ac <keccak_absorb_once.constprop.1>
  KeccakF1600_StatePermute(s);
    5470:	00810513          	addi	a0,sp,8
    5474:	d7dfc0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
  for(i=0;i<4;i++)
    store64(h+8*i,s[i]);
    5478:	00812883          	lw	a7,8(sp)
    547c:	00c12803          	lw	a6,12(sp)
    5480:	01012503          	lw	a0,16(sp)
    5484:	01412583          	lw	a1,20(sp)
    5488:	01812603          	lw	a2,24(sp)
    548c:	01c12683          	lw	a3,28(sp)
    5490:	02412783          	lw	a5,36(sp)
    5494:	02012703          	lw	a4,32(sp)
    x[i] = u >> 8*i;
    5498:	0088dd93          	srli	s11,a7,0x8
    549c:	0108dd13          	srli	s10,a7,0x10
    54a0:	0188dc93          	srli	s9,a7,0x18
    54a4:	00885c13          	srli	s8,a6,0x8
    54a8:	01085b93          	srli	s7,a6,0x10
    54ac:	01885b13          	srli	s6,a6,0x18
    54b0:	00855a93          	srli	s5,a0,0x8
    54b4:	01055a13          	srli	s4,a0,0x10
    54b8:	01855993          	srli	s3,a0,0x18
    54bc:	0085d913          	srli	s2,a1,0x8
    54c0:	0105d493          	srli	s1,a1,0x10
    54c4:	0185d393          	srli	t2,a1,0x18
    54c8:	00865293          	srli	t0,a2,0x8
    54cc:	01065f93          	srli	t6,a2,0x10
    54d0:	01865f13          	srli	t5,a2,0x18
    54d4:	0086de93          	srli	t4,a3,0x8
    54d8:	0106de13          	srli	t3,a3,0x10
    54dc:	0186d313          	srli	t1,a3,0x18
    54e0:	01140023          	sb	a7,0(s0)
    54e4:	01b400a3          	sb	s11,1(s0)
    54e8:	01a40123          	sb	s10,2(s0)
    54ec:	019401a3          	sb	s9,3(s0)
    54f0:	01040223          	sb	a6,4(s0)
    54f4:	018402a3          	sb	s8,5(s0)
    54f8:	01740323          	sb	s7,6(s0)
    54fc:	016403a3          	sb	s6,7(s0)
    5500:	00a40423          	sb	a0,8(s0)
    5504:	015404a3          	sb	s5,9(s0)
    5508:	01440523          	sb	s4,10(s0)
    550c:	013405a3          	sb	s3,11(s0)
    5510:	00b40623          	sb	a1,12(s0)
    5514:	012406a3          	sb	s2,13(s0)
    5518:	00940723          	sb	s1,14(s0)
    551c:	00c40823          	sb	a2,16(s0)
    5520:	00d40a23          	sb	a3,20(s0)
    5524:	007407a3          	sb	t2,15(s0)
    5528:	005408a3          	sb	t0,17(s0)
    552c:	01f40923          	sb	t6,18(s0)
    5530:	01e409a3          	sb	t5,19(s0)
    5534:	01d40aa3          	sb	t4,21(s0)
    5538:	01c40b23          	sb	t3,22(s0)
    553c:	00640ba3          	sb	t1,23(s0)
    5540:	00875893          	srli	a7,a4,0x8
    5544:	01075813          	srli	a6,a4,0x10
    5548:	01875513          	srli	a0,a4,0x18
    554c:	0087d593          	srli	a1,a5,0x8
    5550:	0107d613          	srli	a2,a5,0x10
    5554:	0187d693          	srli	a3,a5,0x18
    5558:	00e40c23          	sb	a4,24(s0)
    555c:	01140ca3          	sb	a7,25(s0)
    5560:	01040d23          	sb	a6,26(s0)
    5564:	00a40da3          	sb	a0,27(s0)
    5568:	00f40e23          	sb	a5,28(s0)
    556c:	00b40ea3          	sb	a1,29(s0)
    5570:	00c40f23          	sb	a2,30(s0)
    5574:	00d40fa3          	sb	a3,31(s0)
}
    5578:	10c12083          	lw	ra,268(sp)
    557c:	10812403          	lw	s0,264(sp)
    5580:	10412483          	lw	s1,260(sp)
    5584:	10012903          	lw	s2,256(sp)
    5588:	0fc12983          	lw	s3,252(sp)
    558c:	0f812a03          	lw	s4,248(sp)
    5590:	0f412a83          	lw	s5,244(sp)
    5594:	0f012b03          	lw	s6,240(sp)
    5598:	0ec12b83          	lw	s7,236(sp)
    559c:	0e812c03          	lw	s8,232(sp)
    55a0:	0e412c83          	lw	s9,228(sp)
    55a4:	0e012d03          	lw	s10,224(sp)
    55a8:	0dc12d83          	lw	s11,220(sp)
    55ac:	11010113          	addi	sp,sp,272
    55b0:	00008067          	ret

000055b4 <pqcrystals_kyber_fips202_ref_sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
    55b4:	ef010113          	addi	sp,sp,-272
    55b8:	10912223          	sw	s1,260(sp)
    55bc:	11212023          	sw	s2,256(sp)
    55c0:	0f512a23          	sw	s5,244(sp)
    55c4:	00050493          	mv	s1,a0
    55c8:	00058a93          	mv	s5,a1
    55cc:	00060913          	mv	s2,a2
    s[i] = 0;
    55d0:	00000593          	li	a1,0
    55d4:	0c800613          	li	a2,200
    55d8:	00810513          	addi	a0,sp,8
{
    55dc:	10112623          	sw	ra,268(sp)
    55e0:	10812423          	sw	s0,264(sp)
    55e4:	0f312e23          	sw	s3,252(sp)
    55e8:	0f412c23          	sw	s4,248(sp)
    55ec:	0f612823          	sw	s6,240(sp)
    55f0:	0f712623          	sw	s7,236(sp)
    55f4:	0f812423          	sw	s8,232(sp)
    55f8:	0f912223          	sw	s9,228(sp)
    55fc:	0fa12023          	sw	s10,224(sp)
    5600:	0db12e23          	sw	s11,220(sp)
    s[i] = 0;
    5604:	3fd010ef          	jal	ra,7200 <memset>
  while(inlen >= r) {
    5608:	04700793          	li	a5,71
    560c:	0b27f663          	bgeu	a5,s2,56b8 <pqcrystals_kyber_fips202_ref_sha3_512+0x104>
    5610:	048a8a13          	addi	s4,s5,72
    5614:	000a0993          	mv	s3,s4
    5618:	04700413          	li	s0,71
    for(i=0;i<r/8;i++)
    561c:	000a8793          	mv	a5,s5
    5620:	00810693          	addi	a3,sp,8
    r |= (uint64_t)x[i] << 8*i;
    5624:	0017c703          	lbu	a4,1(a5)
    5628:	0027ce03          	lbu	t3,2(a5)
    562c:	0057c803          	lbu	a6,5(a5)
    5630:	0047cf03          	lbu	t5,4(a5)
    5634:	0067c503          	lbu	a0,6(a5)
    5638:	0007ce83          	lbu	t4,0(a5)
    563c:	0037c583          	lbu	a1,3(a5)
    5640:	0077c603          	lbu	a2,7(a5)
    5644:	00871713          	slli	a4,a4,0x8
    5648:	010e1e13          	slli	t3,t3,0x10
    564c:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    5650:	0006a303          	lw	t1,0(a3)
    5654:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    5658:	01c76733          	or	a4,a4,t3
    565c:	01e86833          	or	a6,a6,t5
    5660:	01051513          	slli	a0,a0,0x10
    5664:	01d76733          	or	a4,a4,t4
    5668:	01861613          	slli	a2,a2,0x18
    566c:	01859593          	slli	a1,a1,0x18
    5670:	01056533          	or	a0,a0,a6
    5674:	00e5e5b3          	or	a1,a1,a4
    5678:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    567c:	00e8c733          	xor	a4,a7,a4
    5680:	00b34633          	xor	a2,t1,a1
    5684:	00c6a023          	sw	a2,0(a3)
    5688:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    568c:	00878793          	addi	a5,a5,8
    5690:	00868693          	addi	a3,a3,8
    5694:	f8f998e3          	bne	s3,a5,5624 <pqcrystals_kyber_fips202_ref_sha3_512+0x70>
    KeccakF1600_StatePermute(s);
    5698:	00810513          	addi	a0,sp,8
    inlen -= r;
    569c:	fb890913          	addi	s2,s2,-72
    in += r;
    56a0:	000a0a93          	mv	s5,s4
    KeccakF1600_StatePermute(s);
    56a4:	b4dfc0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    56a8:	04898993          	addi	s3,s3,72
    56ac:	01247663          	bgeu	s0,s2,56b8 <pqcrystals_kyber_fips202_ref_sha3_512+0x104>
    56b0:	048a0a13          	addi	s4,s4,72
    56b4:	f69ff06f          	j	561c <pqcrystals_kyber_fips202_ref_sha3_512+0x68>
  for(i=0;i<inlen;i++)
    56b8:	32090e63          	beqz	s2,59f4 <pqcrystals_kyber_fips202_ref_sha3_512+0x440>
    56bc:	00000613          	li	a2,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    56c0:	01f00893          	li	a7,31
    56c4:	02c0006f          	j	56f0 <pqcrystals_kyber_fips202_ref_sha3_512+0x13c>
    56c8:	00072803          	lw	a6,0(a4)
    56cc:	00472503          	lw	a0,4(a4)
    56d0:	00000693          	li	a3,0
    56d4:	00b795b3          	sll	a1,a5,a1
    56d8:	00d84833          	xor	a6,a6,a3
    56dc:	00b546b3          	xor	a3,a0,a1
  for(i=0;i<inlen;i++)
    56e0:	00160613          	addi	a2,a2,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    56e4:	01072023          	sw	a6,0(a4)
    56e8:	00d72223          	sw	a3,4(a4)
  for(i=0;i<inlen;i++)
    56ec:	04c90c63          	beq	s2,a2,5744 <pqcrystals_kyber_fips202_ref_sha3_512+0x190>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    56f0:	00767693          	andi	a3,a2,7
    56f4:	00369693          	slli	a3,a3,0x3
    56f8:	00810793          	addi	a5,sp,8
    56fc:	ff867713          	andi	a4,a2,-8
    5700:	00ca8533          	add	a0,s5,a2
    5704:	fe068593          	addi	a1,a3,-32
    5708:	00e78733          	add	a4,a5,a4
    570c:	40d88833          	sub	a6,a7,a3
    5710:	00054783          	lbu	a5,0(a0)
    5714:	fa05dae3          	bgez	a1,56c8 <pqcrystals_kyber_fips202_ref_sha3_512+0x114>
    5718:	0017d593          	srli	a1,a5,0x1
    571c:	00472503          	lw	a0,4(a4)
    5720:	0105d5b3          	srl	a1,a1,a6
    5724:	00072803          	lw	a6,0(a4)
    5728:	00d796b3          	sll	a3,a5,a3
  for(i=0;i<inlen;i++)
    572c:	00160613          	addi	a2,a2,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5730:	00d84833          	xor	a6,a6,a3
    5734:	00b546b3          	xor	a3,a0,a1
    5738:	01072023          	sw	a6,0(a4)
    573c:	00d72223          	sw	a3,4(a4)
  for(i=0;i<inlen;i++)
    5740:	fac918e3          	bne	s2,a2,56f0 <pqcrystals_kyber_fips202_ref_sha3_512+0x13c>
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    5744:	00797613          	andi	a2,s2,7
    5748:	00361613          	slli	a2,a2,0x3
    574c:	ff897793          	andi	a5,s2,-8
    5750:	00810713          	addi	a4,sp,8
    5754:	fe060693          	addi	a3,a2,-32
    5758:	00f707b3          	add	a5,a4,a5
    575c:	2606ce63          	bltz	a3,59d8 <pqcrystals_kyber_fips202_ref_sha3_512+0x424>
    5760:	00600713          	li	a4,6
    5764:	00d71733          	sll	a4,a4,a3
    5768:	00000693          	li	a3,0
    576c:	0007a583          	lw	a1,0(a5)
    5770:	0047a603          	lw	a2,4(a5)
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
  KeccakF1600_StatePermute(s);
    5774:	00810513          	addi	a0,sp,8
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    5778:	00d5c6b3          	xor	a3,a1,a3
    577c:	00e64733          	xor	a4,a2,a4
    5780:	00d7a023          	sw	a3,0(a5)
    5784:	00e7a223          	sw	a4,4(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    5788:	04c12783          	lw	a5,76(sp)
    578c:	80000737          	lui	a4,0x80000
    5790:	00e7c7b3          	xor	a5,a5,a4
    5794:	04f12623          	sw	a5,76(sp)
  KeccakF1600_StatePermute(s);
    5798:	a59fc0ef          	jal	ra,21f0 <KeccakF1600_StatePermute>
  for(i=0;i<8;i++)
    store64(h+8*i,s[i]);
    579c:	00812803          	lw	a6,8(sp)
    57a0:	00c12503          	lw	a0,12(sp)
    57a4:	01012583          	lw	a1,16(sp)
    57a8:	01412603          	lw	a2,20(sp)
    57ac:	01812683          	lw	a3,24(sp)
    57b0:	01c12783          	lw	a5,28(sp)
    57b4:	02012703          	lw	a4,32(sp)
    x[i] = u >> 8*i;
    57b8:	00885d13          	srli	s10,a6,0x8
    57bc:	01085c93          	srli	s9,a6,0x10
    57c0:	01885c13          	srli	s8,a6,0x18
    57c4:	00855b93          	srli	s7,a0,0x8
    57c8:	01055b13          	srli	s6,a0,0x10
    57cc:	01855a93          	srli	s5,a0,0x18
    57d0:	0085da13          	srli	s4,a1,0x8
    57d4:	0105d993          	srli	s3,a1,0x10
    57d8:	0185d913          	srli	s2,a1,0x18
    57dc:	00865413          	srli	s0,a2,0x8
    57e0:	01065393          	srli	t2,a2,0x10
    57e4:	01865293          	srli	t0,a2,0x18
    57e8:	0086df93          	srli	t6,a3,0x8
    57ec:	0106df13          	srli	t5,a3,0x10
    57f0:	0186de93          	srli	t4,a3,0x18
    57f4:	0087de13          	srli	t3,a5,0x8
    57f8:	0107d313          	srli	t1,a5,0x10
    57fc:	0187d893          	srli	a7,a5,0x18
    5800:	01048023          	sb	a6,0(s1)
    5804:	01a480a3          	sb	s10,1(s1)
    5808:	01948123          	sb	s9,2(s1)
    580c:	018481a3          	sb	s8,3(s1)
    5810:	00a48223          	sb	a0,4(s1)
    5814:	017482a3          	sb	s7,5(s1)
    5818:	01648323          	sb	s6,6(s1)
    581c:	015483a3          	sb	s5,7(s1)
    5820:	00b48423          	sb	a1,8(s1)
    5824:	014484a3          	sb	s4,9(s1)
    5828:	01348523          	sb	s3,10(s1)
    582c:	012485a3          	sb	s2,11(s1)
    5830:	00c48623          	sb	a2,12(s1)
    5834:	008486a3          	sb	s0,13(s1)
    5838:	00748723          	sb	t2,14(s1)
    583c:	005487a3          	sb	t0,15(s1)
    5840:	00d48823          	sb	a3,16(s1)
    5844:	01f488a3          	sb	t6,17(s1)
    5848:	01e48923          	sb	t5,18(s1)
    584c:	01d489a3          	sb	t4,19(s1)
    5850:	00f48a23          	sb	a5,20(s1)
    5854:	01c48aa3          	sb	t3,21(s1)
    5858:	00648b23          	sb	t1,22(s1)
    585c:	01148ba3          	sb	a7,23(s1)
    store64(h+8*i,s[i]);
    5860:	02412803          	lw	a6,36(sp)
    x[i] = u >> 8*i;
    5864:	00e48c23          	sb	a4,24(s1)
    store64(h+8*i,s[i]);
    5868:	02812503          	lw	a0,40(sp)
    586c:	02c12583          	lw	a1,44(sp)
    5870:	03012603          	lw	a2,48(sp)
    5874:	03412683          	lw	a3,52(sp)
    5878:	03812783          	lw	a5,56(sp)
    x[i] = u >> 8*i;
    587c:	00875d13          	srli	s10,a4,0x8
    5880:	01075c93          	srli	s9,a4,0x10
    5884:	00885d93          	srli	s11,a6,0x8
    5888:	01085c13          	srli	s8,a6,0x10
    588c:	01885b93          	srli	s7,a6,0x18
    5890:	00855b13          	srli	s6,a0,0x8
    5894:	01055a93          	srli	s5,a0,0x10
    5898:	01855a13          	srli	s4,a0,0x18
    589c:	0085d993          	srli	s3,a1,0x8
    58a0:	0105d913          	srli	s2,a1,0x10
    58a4:	0185d413          	srli	s0,a1,0x18
    58a8:	0086df13          	srli	t5,a3,0x8
    58ac:	0106de93          	srli	t4,a3,0x10
    58b0:	0186de13          	srli	t3,a3,0x18
    58b4:	0087d313          	srli	t1,a5,0x8
    58b8:	0107d893          	srli	a7,a5,0x10
    58bc:	01875713          	srli	a4,a4,0x18
    58c0:	00865393          	srli	t2,a2,0x8
    58c4:	01065293          	srli	t0,a2,0x10
    58c8:	01865f93          	srli	t6,a2,0x18
    58cc:	01a48ca3          	sb	s10,25(s1)
    58d0:	01948d23          	sb	s9,26(s1)
    58d4:	00e48da3          	sb	a4,27(s1)
    58d8:	01048e23          	sb	a6,28(s1)
    58dc:	01b48ea3          	sb	s11,29(s1)
    58e0:	01848f23          	sb	s8,30(s1)
    58e4:	01748fa3          	sb	s7,31(s1)
    58e8:	02a48023          	sb	a0,32(s1)
    58ec:	036480a3          	sb	s6,33(s1)
    58f0:	03548123          	sb	s5,34(s1)
    58f4:	034481a3          	sb	s4,35(s1)
    58f8:	02b48223          	sb	a1,36(s1)
    58fc:	033482a3          	sb	s3,37(s1)
    5900:	03248323          	sb	s2,38(s1)
    5904:	028483a3          	sb	s0,39(s1)
    5908:	02c48423          	sb	a2,40(s1)
    590c:	02d48623          	sb	a3,44(s1)
    5910:	03e486a3          	sb	t5,45(s1)
    5914:	03d48723          	sb	t4,46(s1)
    5918:	03c487a3          	sb	t3,47(s1)
    591c:	02f48823          	sb	a5,48(s1)
    5920:	026488a3          	sb	t1,49(s1)
    5924:	03148923          	sb	a7,50(s1)
    5928:	027484a3          	sb	t2,41(s1)
    592c:	02548523          	sb	t0,42(s1)
    5930:	03f485a3          	sb	t6,43(s1)
    5934:	0187d793          	srli	a5,a5,0x18
    store64(h+8*i,s[i]);
    5938:	03c12683          	lw	a3,60(sp)
    x[i] = u >> 8*i;
    593c:	02f489a3          	sb	a5,51(s1)
    store64(h+8*i,s[i]);
    5940:	04012703          	lw	a4,64(sp)
    5944:	04412783          	lw	a5,68(sp)
    x[i] = u >> 8*i;
    5948:	0086df13          	srli	t5,a3,0x8
    594c:	0106de93          	srli	t4,a3,0x10
    5950:	0186de13          	srli	t3,a3,0x18
    5954:	00875313          	srli	t1,a4,0x8
    5958:	01075893          	srli	a7,a4,0x10
    595c:	01875813          	srli	a6,a4,0x18
    5960:	0087d513          	srli	a0,a5,0x8
    5964:	0107d593          	srli	a1,a5,0x10
    5968:	0187d613          	srli	a2,a5,0x18
    596c:	02d48a23          	sb	a3,52(s1)
    5970:	03e48aa3          	sb	t5,53(s1)
    5974:	03d48b23          	sb	t4,54(s1)
    5978:	03c48ba3          	sb	t3,55(s1)
    597c:	02e48c23          	sb	a4,56(s1)
    5980:	02648ca3          	sb	t1,57(s1)
    5984:	03148d23          	sb	a7,58(s1)
    5988:	03048da3          	sb	a6,59(s1)
    598c:	02f48e23          	sb	a5,60(s1)
    5990:	02a48ea3          	sb	a0,61(s1)
    5994:	02b48f23          	sb	a1,62(s1)
    5998:	02c48fa3          	sb	a2,63(s1)
}
    599c:	10c12083          	lw	ra,268(sp)
    59a0:	10812403          	lw	s0,264(sp)
    59a4:	10412483          	lw	s1,260(sp)
    59a8:	10012903          	lw	s2,256(sp)
    59ac:	0fc12983          	lw	s3,252(sp)
    59b0:	0f812a03          	lw	s4,248(sp)
    59b4:	0f412a83          	lw	s5,244(sp)
    59b8:	0f012b03          	lw	s6,240(sp)
    59bc:	0ec12b83          	lw	s7,236(sp)
    59c0:	0e812c03          	lw	s8,232(sp)
    59c4:	0e412c83          	lw	s9,228(sp)
    59c8:	0e012d03          	lw	s10,224(sp)
    59cc:	0dc12d83          	lw	s11,220(sp)
    59d0:	11010113          	addi	sp,sp,272
    59d4:	00008067          	ret
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    59d8:	01f00693          	li	a3,31
    59dc:	40c686b3          	sub	a3,a3,a2
    59e0:	00300713          	li	a4,3
    59e4:	00d75733          	srl	a4,a4,a3
    59e8:	00600693          	li	a3,6
    59ec:	00c696b3          	sll	a3,a3,a2
    59f0:	d7dff06f          	j	576c <pqcrystals_kyber_fips202_ref_sha3_512+0x1b8>
  for(i=0;i<inlen;i++)
    59f4:	00600693          	li	a3,6
    59f8:	00000713          	li	a4,0
    59fc:	00810793          	addi	a5,sp,8
    5a00:	d6dff06f          	j	576c <pqcrystals_kyber_fips202_ref_sha3_512+0x1b8>

00005a04 <pqcrystals_kyber512_ref_kyber_shake128_absorb>:
**************************************************/
void kyber_shake128_absorb(keccak_state *state,
                           const uint8_t seed[KYBER_SYMBYTES],
                           uint8_t x,
                           uint8_t y)
{
    5a04:	fc010113          	addi	sp,sp,-64
    5a08:	02812c23          	sw	s0,56(sp)
    5a0c:	02912a23          	sw	s1,52(sp)
    5a10:	03212823          	sw	s2,48(sp)
    5a14:	00068493          	mv	s1,a3
    5a18:	00050913          	mv	s2,a0
    5a1c:	00060413          	mv	s0,a2
  uint8_t extseed[KYBER_SYMBYTES+2];

  memcpy(extseed, seed, KYBER_SYMBYTES);
    5a20:	00c10513          	addi	a0,sp,12
    5a24:	02000613          	li	a2,32
{
    5a28:	02112e23          	sw	ra,60(sp)
  extseed[KYBER_SYMBYTES+0] = x;
    5a2c:	00849493          	slli	s1,s1,0x8
  memcpy(extseed, seed, KYBER_SYMBYTES);
    5a30:	18d010ef          	jal	ra,73bc <memcpy>
  extseed[KYBER_SYMBYTES+0] = x;
    5a34:	00946433          	or	s0,s0,s1
  extseed[KYBER_SYMBYTES+1] = y;

  shake128_absorb_once(state, extseed, sizeof(extseed));
    5a38:	00c10593          	addi	a1,sp,12
    5a3c:	00090513          	mv	a0,s2
    5a40:	02200613          	li	a2,34
  extseed[KYBER_SYMBYTES+0] = x;
    5a44:	02811623          	sh	s0,44(sp)
  shake128_absorb_once(state, extseed, sizeof(extseed));
    5a48:	a68ff0ef          	jal	ra,4cb0 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>
}
    5a4c:	03c12083          	lw	ra,60(sp)
    5a50:	03812403          	lw	s0,56(sp)
    5a54:	03412483          	lw	s1,52(sp)
    5a58:	03012903          	lw	s2,48(sp)
    5a5c:	04010113          	addi	sp,sp,64
    5a60:	00008067          	ret

00005a64 <pqcrystals_kyber512_ref_kyber_shake256_prf>:
*              - size_t outlen: number of requested output bytes
*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
*              - uint8_t nonce: single-byte nonce (public PRF input)
**************************************************/
void kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce)
{
    5a64:	fc010113          	addi	sp,sp,-64
    5a68:	00060793          	mv	a5,a2
    5a6c:	02912a23          	sw	s1,52(sp)
    5a70:	03212823          	sw	s2,48(sp)
    5a74:	00050493          	mv	s1,a0
    5a78:	00058913          	mv	s2,a1
  uint8_t extkey[KYBER_SYMBYTES+1];

  memcpy(extkey, key, KYBER_SYMBYTES);
    5a7c:	02000613          	li	a2,32
    5a80:	00078593          	mv	a1,a5
    5a84:	00c10513          	addi	a0,sp,12
{
    5a88:	02112e23          	sw	ra,60(sp)
    5a8c:	02812c23          	sw	s0,56(sp)
    5a90:	00068413          	mv	s0,a3
  memcpy(extkey, key, KYBER_SYMBYTES);
    5a94:	129010ef          	jal	ra,73bc <memcpy>
  extkey[KYBER_SYMBYTES] = nonce;

  shake256(out, outlen, extkey, sizeof(extkey));
    5a98:	00c10613          	addi	a2,sp,12
    5a9c:	00090593          	mv	a1,s2
    5aa0:	00048513          	mv	a0,s1
    5aa4:	02100693          	li	a3,33
  extkey[KYBER_SYMBYTES] = nonce;
    5aa8:	02810623          	sb	s0,44(sp)
  shake256(out, outlen, extkey, sizeof(extkey));
    5aac:	fb0ff0ef          	jal	ra,525c <pqcrystals_kyber_fips202_ref_shake256>
}
    5ab0:	03c12083          	lw	ra,60(sp)
    5ab4:	03812403          	lw	s0,56(sp)
    5ab8:	03412483          	lw	s1,52(sp)
    5abc:	03012903          	lw	s2,48(sp)
    5ac0:	04010113          	addi	sp,sp,64
    5ac4:	00008067          	ret

00005ac8 <randombytes>:
  }
}

void randombytes(uint8_t *x,size_t xlen)
{
  while (xlen > 0) {
    5ac8:	40058e63          	beqz	a1,5ee4 <randombytes+0x41c>
{
    5acc:	f8010113          	addi	sp,sp,-128
    5ad0:	07312823          	sw	s3,112(sp)
    5ad4:	00009997          	auipc	s3,0x9
    5ad8:	d6898993          	addi	s3,s3,-664 # e83c <in>
    5adc:	0089a683          	lw	a3,8(s3)
  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
    5ae0:	0109ae83          	lw	t4,16(s3)
    5ae4:	0149ae03          	lw	t3,20(s3)
    5ae8:	0189a303          	lw	t1,24(s3)
    5aec:	01c9a883          	lw	a7,28(s3)
    5af0:	0209a803          	lw	a6,32(s3)
    5af4:	0289a603          	lw	a2,40(s3)
{
    5af8:	05b12823          	sw	s11,80(sp)
    5afc:	00d12c23          	sw	a3,24(sp)
    5b00:	00050d93          	mv	s11,a0
    5b04:	00c9a683          	lw	a3,12(s3)
  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
    5b08:	0249a503          	lw	a0,36(s3)
    5b0c:	002ece93          	xori	t4,t4,2
    5b10:	003e4e13          	xori	t3,t3,3
    5b14:	00834313          	xori	t1,t1,8
    5b18:	0048c893          	xori	a7,a7,4
    5b1c:	00684813          	xori	a6,a6,6
{
    5b20:	07212a23          	sw	s2,116(sp)
    5b24:	00d12e23          	sw	a3,28(sp)
  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
    5b28:	00664613          	xori	a2,a2,6
{
    5b2c:	06812e23          	sw	s0,124(sp)
    5b30:	06912c23          	sw	s1,120(sp)
    5b34:	07412623          	sw	s4,108(sp)
    5b38:	07512423          	sw	s5,104(sp)
    5b3c:	07612223          	sw	s6,100(sp)
    5b40:	07712023          	sw	s7,96(sp)
    5b44:	05812e23          	sw	s8,92(sp)
    5b48:	05912c23          	sw	s9,88(sp)
    5b4c:	05a12a23          	sw	s10,84(sp)
    5b50:	00009697          	auipc	a3,0x9
    5b54:	cc468693          	addi	a3,a3,-828 # e814 <outleft>
  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
    5b58:	03d12023          	sw	t4,32(sp)
    5b5c:	03c12223          	sw	t3,36(sp)
    5b60:	02612423          	sw	t1,40(sp)
    5b64:	03112623          	sw	a7,44(sp)
    5b68:	03012823          	sw	a6,48(sp)
    5b6c:	00254513          	xori	a0,a0,2
    5b70:	02c9a783          	lw	a5,44(s3)
    5b74:	0009a383          	lw	t2,0(s3)
    5b78:	0049a703          	lw	a4,4(s3)
    5b7c:	0006a683          	lw	a3,0(a3)
    5b80:	02a12a23          	sw	a0,52(sp)
    5b84:	02c12c23          	sw	a2,56(sp)
    5b88:	e377a637          	lui	a2,0xe377a
    5b8c:	b9060613          	addi	a2,a2,-1136 # e3779b90 <_end_of_memory+0xe3759b90>
    5b90:	04c12023          	sw	a2,64(sp)
    5b94:	1c886637          	lui	a2,0x1c886
    5b98:	47060613          	addi	a2,a2,1136 # 1c886470 <_end_of_memory+0x1c866470>
    5b9c:	00c12423          	sw	a2,8(sp)
    5ba0:	c6ef3637          	lui	a2,0xc6ef3
    5ba4:	0047c793          	xori	a5,a5,4
      sum += 0x9e3779b9;
    5ba8:	9e378937          	lui	s2,0x9e378
    5bac:	72060613          	addi	a2,a2,1824 # c6ef3720 <_end_of_memory+0xc6ed3720>
  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
    5bb0:	02f12e23          	sw	a5,60(sp)
    5bb4:	04012623          	sw	zero,76(sp)
    5bb8:	00bd87b3          	add	a5,s11,a1
    5bbc:	04012423          	sw	zero,72(sp)
    5bc0:	04012223          	sw	zero,68(sp)
    5bc4:	00000593          	li	a1,0
      sum += 0x9e3779b9;
    5bc8:	9b990913          	addi	s2,s2,-1607 # 9e3779b9 <_end_of_memory+0x9e3579b9>
    5bcc:	00c12623          	sw	a2,12(sp)
    if (!outleft) {
    5bd0:	08068c63          	beqz	a3,5c68 <randombytes+0x1a0>
      if (!++in[0]) if (!++in[1]) if (!++in[2]) ++in[3];
      surf();
      outleft = 8;
    }
    *x = out[--outleft];
    5bd4:	fff68693          	addi	a3,a3,-1
    5bd8:	00269613          	slli	a2,a3,0x2
    5bdc:	00c98633          	add	a2,s3,a2
    5be0:	03062403          	lw	s0,48(a2)
    5be4:	008d8023          	sb	s0,0(s11)
    //printf("%02x", *x);
    ++x;
    5be8:	001d8d93          	addi	s11,s11,1
  while (xlen > 0) {
    5bec:	fefd92e3          	bne	s11,a5,5bd0 <randombytes+0x108>
    5bf0:	00009797          	auipc	a5,0x9
    5bf4:	c2478793          	addi	a5,a5,-988 # e814 <outleft>
    5bf8:	00d7a023          	sw	a3,0(a5)
    5bfc:	04c12783          	lw	a5,76(sp)
    5c00:	00078663          	beqz	a5,5c0c <randombytes+0x144>
    5c04:	01c12783          	lw	a5,28(sp)
    5c08:	00f9a623          	sw	a5,12(s3)
    5c0c:	04812783          	lw	a5,72(sp)
    5c10:	00078663          	beqz	a5,5c1c <randombytes+0x154>
    5c14:	01812783          	lw	a5,24(sp)
    5c18:	00f9a423          	sw	a5,8(s3)
    5c1c:	04412783          	lw	a5,68(sp)
    5c20:	00078463          	beqz	a5,5c28 <randombytes+0x160>
    5c24:	00e9a223          	sw	a4,4(s3)
    5c28:	00058463          	beqz	a1,5c30 <randombytes+0x168>
    5c2c:	0079a023          	sw	t2,0(s3)
    --xlen;
  }
  //printf("\n");
}
    5c30:	07c12403          	lw	s0,124(sp)
    5c34:	07812483          	lw	s1,120(sp)
    5c38:	07412903          	lw	s2,116(sp)
    5c3c:	07012983          	lw	s3,112(sp)
    5c40:	06c12a03          	lw	s4,108(sp)
    5c44:	06812a83          	lw	s5,104(sp)
    5c48:	06412b03          	lw	s6,100(sp)
    5c4c:	06012b83          	lw	s7,96(sp)
    5c50:	05c12c03          	lw	s8,92(sp)
    5c54:	05812c83          	lw	s9,88(sp)
    5c58:	05412d03          	lw	s10,84(sp)
    5c5c:	05012d83          	lw	s11,80(sp)
    5c60:	08010113          	addi	sp,sp,128
    5c64:	00008067          	ret
      if (!++in[0]) if (!++in[1]) if (!++in[2]) ++in[3];
    5c68:	00138393          	addi	t2,t2,1
    5c6c:	04039063          	bnez	t2,5cac <randombytes+0x1e4>
    5c70:	00100693          	li	a3,1
    5c74:	00170713          	addi	a4,a4,1 # 80000001 <_end_of_memory+0x7ffe0001>
    5c78:	04d12223          	sw	a3,68(sp)
    5c7c:	02071863          	bnez	a4,5cac <randombytes+0x1e4>
    5c80:	01812683          	lw	a3,24(sp)
    5c84:	00100613          	li	a2,1
    5c88:	04c12423          	sw	a2,72(sp)
    5c8c:	00168693          	addi	a3,a3,1
    5c90:	00d12c23          	sw	a3,24(sp)
    5c94:	00069c63          	bnez	a3,5cac <randombytes+0x1e4>
    5c98:	01c12683          	lw	a3,28(sp)
    5c9c:	00168693          	addi	a3,a3,1
    5ca0:	00d12e23          	sw	a3,28(sp)
    5ca4:	00100693          	li	a3,1
    5ca8:	04d12623          	sw	a3,76(sp)
  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
    5cac:	01812683          	lw	a3,24(sp)
    5cb0:	03812e03          	lw	t3,56(sp)
    5cb4:	03412303          	lw	t1,52(sp)
    5cb8:	0096cf13          	xori	t5,a3,9
    5cbc:	01c12683          	lw	a3,28(sp)
    5cc0:	03012883          	lw	a7,48(sp)
    5cc4:	02c12803          	lw	a6,44(sp)
    5cc8:	0036ce93          	xori	t4,a3,3
    5ccc:	02812503          	lw	a0,40(sp)
    5cd0:	02412583          	lw	a1,36(sp)
    5cd4:	02012603          	lw	a2,32(sp)
  x = t[11];
    5cd8:	03c12683          	lw	a3,60(sp)
  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
    5cdc:	04012483          	lw	s1,64(sp)
    5ce0:	0093c293          	xori	t0,t2,9
    5ce4:	00774f93          	xori	t6,a4,7
    5ce8:	00500413          	li	s0,5
    5cec:	00900d13          	li	s10,9
    5cf0:	00700a13          	li	s4,7
    5cf4:	00200a93          	li	s5,2
    5cf8:	00300b13          	li	s6,3
    5cfc:	00800b93          	li	s7,8
    5d00:	00300c13          	li	s8,3
    5d04:	00300c93          	li	s9,3
    5d08:	00e12823          	sw	a4,16(sp)
    5d0c:	00f12a23          	sw	a5,20(sp)
    5d10:	00812783          	lw	a5,8(sp)
    5d14:	01712023          	sw	s7,0(sp)
    5d18:	01912223          	sw	s9,4(sp)
    5d1c:	00f487b3          	add	a5,s1,a5
      sum += 0x9e3779b9;
    5d20:	012787b3          	add	a5,a5,s2
      MUSH(0,5) MUSH(1,7) MUSH(2,9) MUSH(3,13)
    5d24:	01b6dc93          	srli	s9,a3,0x1b
    5d28:	0036c713          	xori	a4,a3,3
    5d2c:	00569b93          	slli	s7,a3,0x5
    5d30:	019bebb3          	or	s7,s7,s9
    5d34:	00f70733          	add	a4,a4,a5
    5d38:	01774733          	xor	a4,a4,s7
    5d3c:	00e282b3          	add	t0,t0,a4
    5d40:	0192dc93          	srli	s9,t0,0x19
    5d44:	0012c713          	xori	a4,t0,1
    5d48:	00729b93          	slli	s7,t0,0x7
    5d4c:	019bebb3          	or	s7,s7,s9
    5d50:	00f70733          	add	a4,a4,a5
    5d54:	01774733          	xor	a4,a4,s7
    5d58:	00ef8fb3          	add	t6,t6,a4
    5d5c:	017fdc93          	srli	s9,t6,0x17
    5d60:	004fc713          	xori	a4,t6,4
    5d64:	009f9b93          	slli	s7,t6,0x9
    5d68:	019bebb3          	or	s7,s7,s9
    5d6c:	00f70733          	add	a4,a4,a5
    5d70:	01774733          	xor	a4,a4,s7
    5d74:	00ef0f33          	add	t5,t5,a4
    5d78:	013f5c93          	srli	s9,t5,0x13
    5d7c:	001f4713          	xori	a4,t5,1
    5d80:	00df1b93          	slli	s7,t5,0xd
    5d84:	019bebb3          	or	s7,s7,s9
    5d88:	00f70733          	add	a4,a4,a5
    5d8c:	01774733          	xor	a4,a4,s7
    5d90:	00ee8eb3          	add	t4,t4,a4
      MUSH(4,5) MUSH(5,7) MUSH(6,9) MUSH(7,13)
    5d94:	01bedc93          	srli	s9,t4,0x1b
    5d98:	005ec713          	xori	a4,t4,5
    5d9c:	005e9b93          	slli	s7,t4,0x5
    5da0:	019bebb3          	or	s7,s7,s9
    5da4:	00f70733          	add	a4,a4,a5
    5da8:	01774733          	xor	a4,a4,s7
    5dac:	00e60633          	add	a2,a2,a4
    5db0:	01965c93          	srli	s9,a2,0x19
    5db4:	00964713          	xori	a4,a2,9
    5db8:	00761b93          	slli	s7,a2,0x7
    5dbc:	019bebb3          	or	s7,s7,s9
    5dc0:	00f70733          	add	a4,a4,a5
    5dc4:	01774733          	xor	a4,a4,s7
    5dc8:	00e585b3          	add	a1,a1,a4
    5dcc:	0175dc93          	srli	s9,a1,0x17
    5dd0:	0025c713          	xori	a4,a1,2
    5dd4:	00959b93          	slli	s7,a1,0x9
    5dd8:	019bebb3          	or	s7,s7,s9
    5ddc:	00f70733          	add	a4,a4,a5
    5de0:	01774733          	xor	a4,a4,s7
    5de4:	00e50533          	add	a0,a0,a4
    5de8:	01355c93          	srli	s9,a0,0x13
    5dec:	00654713          	xori	a4,a0,6
    5df0:	00d51b93          	slli	s7,a0,0xd
    5df4:	019bebb3          	or	s7,s7,s9
    5df8:	00f70733          	add	a4,a4,a5
    5dfc:	01774733          	xor	a4,a4,s7
    5e00:	00e80833          	add	a6,a6,a4
      MUSH(8,5) MUSH(9,7) MUSH(10,9) MUSH(11,13)
    5e04:	01b85c93          	srli	s9,a6,0x1b
    5e08:	00584713          	xori	a4,a6,5
    5e0c:	00581b93          	slli	s7,a6,0x5
    5e10:	019bebb3          	or	s7,s7,s9
    5e14:	00f70733          	add	a4,a4,a5
    5e18:	01774733          	xor	a4,a4,s7
    5e1c:	00e888b3          	add	a7,a7,a4
    5e20:	0198dc93          	srli	s9,a7,0x19
    5e24:	0038c713          	xori	a4,a7,3
    5e28:	00789b93          	slli	s7,a7,0x7
    5e2c:	019bebb3          	or	s7,s7,s9
    5e30:	00f70733          	add	a4,a4,a5
    5e34:	01774733          	xor	a4,a4,s7
    5e38:	00e30333          	add	t1,t1,a4
    5e3c:	01735c93          	srli	s9,t1,0x17
    5e40:	00534713          	xori	a4,t1,5
    5e44:	00931b93          	slli	s7,t1,0x9
    5e48:	019bebb3          	or	s7,s7,s9
    5e4c:	00f70733          	add	a4,a4,a5
    5e50:	01774733          	xor	a4,a4,s7
    5e54:	00ee0e33          	add	t3,t3,a4
    5e58:	008e4713          	xori	a4,t3,8
    5e5c:	00de1b93          	slli	s7,t3,0xd
    5e60:	013e5c93          	srli	s9,t3,0x13
    5e64:	00f70733          	add	a4,a4,a5
    5e68:	019bebb3          	or	s7,s7,s9
    5e6c:	01774733          	xor	a4,a4,s7
    5e70:	00e686b3          	add	a3,a3,a4
    for (r = 0;r < 16;++r) {
    5e74:	ea9796e3          	bne	a5,s1,5d20 <randombytes+0x258>
    for (i = 0;i < 8;++i) out[i] ^= t[i + 4];
    5e78:	00012b83          	lw	s7,0(sp)
    5e7c:	00412c83          	lw	s9,4(sp)
  for (loop = 0;loop < 2;++loop) {
    5e80:	00c12783          	lw	a5,12(sp)
    for (i = 0;i < 8;++i) out[i] ^= t[i + 4];
    5e84:	00bc4c33          	xor	s8,s8,a1
    5e88:	00ccccb3          	xor	s9,s9,a2
    5e8c:	00abcbb3          	xor	s7,s7,a0
    5e90:	010b4b33          	xor	s6,s6,a6
    5e94:	011acab3          	xor	s5,s5,a7
    5e98:	006a4a33          	xor	s4,s4,t1
    5e9c:	01cd4d33          	xor	s10,s10,t3
    5ea0:	00d44433          	xor	s0,s0,a3
  for (loop = 0;loop < 2;++loop) {
    5ea4:	00f48663          	beq	s1,a5,5eb0 <randombytes+0x3e8>
    5ea8:	00078493          	mv	s1,a5
    5eac:	e65ff06f          	j	5d10 <randombytes+0x248>
    5eb0:	01012703          	lw	a4,16(sp)
    5eb4:	01412783          	lw	a5,20(sp)
    5eb8:	0399a823          	sw	s9,48(s3)
    5ebc:	0389aa23          	sw	s8,52(s3)
    5ec0:	0379ac23          	sw	s7,56(s3)
    5ec4:	0369ae23          	sw	s6,60(s3)
    5ec8:	0559a023          	sw	s5,64(s3)
    5ecc:	0549a223          	sw	s4,68(s3)
    5ed0:	05a9a423          	sw	s10,72(s3)
    5ed4:	0489a623          	sw	s0,76(s3)
    5ed8:	00700693          	li	a3,7
    5edc:	00100593          	li	a1,1
    5ee0:	d05ff06f          	j	5be4 <randombytes+0x11c>
    5ee4:	00008067          	ret

00005ee8 <test_keys>:
#ifdef UART
#include "uart.h"
#endif

static int test_keys(unsigned int i)
{
    5ee8:	81010113          	addi	sp,sp,-2032
    5eec:	7e112623          	sw	ra,2028(sp)
    5ef0:	7e812423          	sw	s0,2024(sp)
    5ef4:	7e912223          	sw	s1,2020(sp)
    5ef8:	7f212023          	sw	s2,2016(sp)
    5efc:	7d312e23          	sw	s3,2012(sp)
    5f00:	7d412c23          	sw	s4,2008(sp)
    5f04:	7d512a23          	sw	s5,2004(sp)
    5f08:	7d612823          	sw	s6,2000(sp)
    5f0c:	7d712623          	sw	s7,1996(sp)
    5f10:	7d812423          	sw	s8,1992(sp)
    5f14:	7d912223          	sw	s9,1988(sp)
    5f18:	7da12023          	sw	s10,1984(sp)
    5f1c:	7bb12e23          	sw	s11,1980(sp)
    5f20:	00050c93          	mv	s9,a0
    5f24:	ae010113          	addi	sp,sp,-1312
  static float enc_avg  = 0;
  static float dec_avg  = 0;
#endif

#ifdef UART
  uart_send_string("\n\rCreate initial keys");
    5f28:	00009517          	auipc	a0,0x9
    5f2c:	80c50513          	addi	a0,a0,-2036 # e734 <__clz_tab+0x138>
    5f30:	a84fc0ef          	jal	ra,21b4 <uart_send_string>
#endif

#ifdef PROFILING_STAGES
  asm("csrrs s2, "TICKS_REGISTER", zero");
    5f34:	c0102973          	rdtime	s2
#endif
  //Alice generates a public key
  crypto_kem_keypair(pk, sk);
    5f38:	fffff437          	lui	s0,0xfffff
    5f3c:	000017b7          	lui	a5,0x1
    5f40:	68040613          	addi	a2,s0,1664 # fffff680 <_end_of_memory+0xfffdf680>
    5f44:	cc078713          	addi	a4,a5,-832 # cc0 <pqcrystals_kyber512_ref_polyvec_compress+0x8>
    5f48:	00c70733          	add	a4,a4,a2
    5f4c:	01010793          	addi	a5,sp,16
    5f50:	00f70633          	add	a2,a4,a5
    5f54:	67010593          	addi	a1,sp,1648
    5f58:	00060513          	mv	a0,a2
    5f5c:	00c12623          	sw	a2,12(sp)
    5f60:	b44fa0ef          	jal	ra,2a4 <pqcrystals_kyber512_ref_keypair>
#ifdef PROFILING_STAGES
  asm("csrrs s3, "TICKS_REGISTER", zero");
    5f64:	c01029f3          	rdtime	s3
  print_runtime(cycle_start, cycle_end);
    5f68:	00098593          	mv	a1,s3
    5f6c:	00090513          	mv	a0,s2
    5f70:	fd1fb0ef          	jal	ra,1f40 <print_runtime>
  keys_avg = ((cycle_end - cycle_start) + i*keys_avg) / (i+1); // obtaining average per new sample
    5f74:	000c8513          	mv	a0,s9
    5f78:	07c010ef          	jal	ra,6ff4 <__floatunsisf>
    5f7c:	00050c13          	mv	s8,a0
    5f80:	001c8513          	addi	a0,s9,1
    5f84:	070010ef          	jal	ra,6ff4 <__floatunsisf>
    5f88:	00050493          	mv	s1,a0
    5f8c:	41298533          	sub	a0,s3,s2
    5f90:	064010ef          	jal	ra,6ff4 <__floatunsisf>
    5f94:	00009917          	auipc	s2,0x9
    5f98:	88c90913          	addi	s2,s2,-1908 # e820 <keys_avg.2>
    5f9c:	00092583          	lw	a1,0(s2)
    5fa0:	00050993          	mv	s3,a0
    5fa4:	000c0513          	mv	a0,s8
    5fa8:	489000ef          	jal	ra,6c30 <__mulsf3>
    5fac:	00050593          	mv	a1,a0
    5fb0:	00098513          	mv	a0,s3
    5fb4:	484000ef          	jal	ra,6438 <__addsf3>
    5fb8:	00048593          	mv	a1,s1
    5fbc:	0ed000ef          	jal	ra,68a8 <__divsf3>
    5fc0:	00050793          	mv	a5,a0
#endif

#ifdef UART
  uart_send_string("\nEncode, create key b");
    5fc4:	00008517          	auipc	a0,0x8
    5fc8:	78850513          	addi	a0,a0,1928 # e74c <__clz_tab+0x150>
  keys_avg = ((cycle_end - cycle_start) + i*keys_avg) / (i+1); // obtaining average per new sample
    5fcc:	00f92023          	sw	a5,0(s2)
  uart_send_string("\nEncode, create key b");
    5fd0:	9e4fc0ef          	jal	ra,21b4 <uart_send_string>
#endif

#ifdef PROFILING_STAGES
  asm("csrrs s4, "TICKS_REGISTER", zero");
    5fd4:	c0102a73          	rdtime	s4
#endif
  //Bob derives a secret key and creates a response
  crypto_kem_enc(ct, key_b, pk);
    5fd8:	000017b7          	lui	a5,0x1
    5fdc:	36040d13          	addi	s10,s0,864
    5fe0:	cc078713          	addi	a4,a5,-832 # cc0 <pqcrystals_kyber512_ref_polyvec_compress+0x8>
    5fe4:	01010693          	addi	a3,sp,16
    5fe8:	01a70733          	add	a4,a4,s10
    5fec:	00d70d33          	add	s10,a4,a3
    5ff0:	38040d93          	addi	s11,s0,896
    5ff4:	cc078713          	addi	a4,a5,-832
    5ff8:	01b70733          	add	a4,a4,s11
    5ffc:	00c12603          	lw	a2,12(sp)
    6000:	00d70db3          	add	s11,a4,a3
    6004:	000d0593          	mv	a1,s10
    6008:	000d8513          	mv	a0,s11
    600c:	b44fa0ef          	jal	ra,350 <pqcrystals_kyber512_ref_enc>
#ifdef PROFILING_STAGES
  asm("csrrs s5, "TICKS_REGISTER", zero");
    6010:	c0102af3          	rdtime	s5
  print_runtime(cycle_start2, cycle_end2);
    6014:	000a8593          	mv	a1,s5
    6018:	000a0513          	mv	a0,s4
    601c:	f25fb0ef          	jal	ra,1f40 <print_runtime>
  enc_avg = ((cycle_end2 - cycle_start2) + i*enc_avg) / (i+1);
    6020:	414a8533          	sub	a0,s5,s4
    6024:	7d1000ef          	jal	ra,6ff4 <__floatunsisf>
    6028:	00008997          	auipc	s3,0x8
    602c:	7f498993          	addi	s3,s3,2036 # e81c <enc_avg.1>
    6030:	0009a583          	lw	a1,0(s3)
    6034:	00050a13          	mv	s4,a0
    6038:	000c0513          	mv	a0,s8
    603c:	3f5000ef          	jal	ra,6c30 <__mulsf3>
    6040:	00050593          	mv	a1,a0
    6044:	000a0513          	mv	a0,s4
    6048:	3f0000ef          	jal	ra,6438 <__addsf3>
    604c:	00048593          	mv	a1,s1
    6050:	059000ef          	jal	ra,68a8 <__divsf3>
    6054:	00050793          	mv	a5,a0
#endif

#ifdef UART
  uart_send_string("\nDecode, create key a");
    6058:	00008517          	auipc	a0,0x8
    605c:	70c50513          	addi	a0,a0,1804 # e764 <__clz_tab+0x168>
  enc_avg = ((cycle_end2 - cycle_start2) + i*enc_avg) / (i+1);
    6060:	00f9a023          	sw	a5,0(s3)
  uart_send_string("\nDecode, create key a");
    6064:	950fc0ef          	jal	ra,21b4 <uart_send_string>
#endif

#ifdef PROFILING_STAGES
  asm("csrrs s6, "TICKS_REGISTER", zero");
    6068:	c0102b73          	rdtime	s6
#endif
  //Alice uses Bobs response to get her shared key
  crypto_kem_dec(key_a, ct, sk);
    606c:	000017b7          	lui	a5,0x1
    6070:	34040413          	addi	s0,s0,832
    6074:	cc078793          	addi	a5,a5,-832 # cc0 <pqcrystals_kyber512_ref_polyvec_compress+0x8>
    6078:	008787b3          	add	a5,a5,s0
    607c:	01010713          	addi	a4,sp,16
    6080:	00e78433          	add	s0,a5,a4
    6084:	67010613          	addi	a2,sp,1648
    6088:	000d8593          	mv	a1,s11
    608c:	00040513          	mv	a0,s0
    6090:	bb0fa0ef          	jal	ra,440 <pqcrystals_kyber512_ref_dec>
#ifdef PROFILING_STAGES
  asm("csrrs s7, "TICKS_REGISTER", zero");
    6094:	c0102bf3          	rdtime	s7
  print_runtime(cycle_start3, cycle_end3);
    6098:	000b8593          	mv	a1,s7
    609c:	000b0513          	mv	a0,s6
    60a0:	ea1fb0ef          	jal	ra,1f40 <print_runtime>
  dec_avg = ((cycle_end3 - cycle_start3) + i*dec_avg) / (i+1);
    60a4:	416b8533          	sub	a0,s7,s6
    60a8:	74d000ef          	jal	ra,6ff4 <__floatunsisf>
    60ac:	00008a97          	auipc	s5,0x8
    60b0:	76ca8a93          	addi	s5,s5,1900 # e818 <dec_avg.0>
    60b4:	000aa583          	lw	a1,0(s5)
    60b8:	00050a13          	mv	s4,a0
    60bc:	000c0513          	mv	a0,s8
    60c0:	371000ef          	jal	ra,6c30 <__mulsf3>
    60c4:	00050593          	mv	a1,a0
    60c8:	000a0513          	mv	a0,s4
    60cc:	36c000ef          	jal	ra,6438 <__addsf3>
    60d0:	00048593          	mv	a1,s1
    60d4:	7d4000ef          	jal	ra,68a8 <__divsf3>
    60d8:	00050793          	mv	a5,a0
#endif

  if(memcmp(key_a, key_b, CRYPTO_BYTES)) {
    60dc:	02000613          	li	a2,32
    60e0:	000d0593          	mv	a1,s10
    60e4:	00040513          	mv	a0,s0
  dec_avg = ((cycle_end3 - cycle_start3) + i*dec_avg) / (i+1);
    60e8:	00faa023          	sw	a5,0(s5)
  if(memcmp(key_a, key_b, CRYPTO_BYTES)) {
    60ec:	258010ef          	jal	ra,7344 <memcmp>
    60f0:	04051c63          	bnez	a0,6148 <test_keys+0x260>
    return 1;
  }

#ifdef PROFILING_STAGES
  // print average runtimes
  if (i == NTESTS - 1)
    60f4:	000027b7          	lui	a5,0x2
    60f8:	70f78793          	addi	a5,a5,1807 # 270f <KeccakF1600_StatePermute+0x51f>
    60fc:	00050413          	mv	s0,a0
    6100:	04fc8e63          	beq	s9,a5,615c <test_keys+0x274>
    uart_send_string(str);
  }
#endif

  return 0;
}
    6104:	52010113          	addi	sp,sp,1312
    6108:	7ec12083          	lw	ra,2028(sp)
    610c:	00040513          	mv	a0,s0
    6110:	7e412483          	lw	s1,2020(sp)
    6114:	7e812403          	lw	s0,2024(sp)
    6118:	7e012903          	lw	s2,2016(sp)
    611c:	7dc12983          	lw	s3,2012(sp)
    6120:	7d812a03          	lw	s4,2008(sp)
    6124:	7d412a83          	lw	s5,2004(sp)
    6128:	7d012b03          	lw	s6,2000(sp)
    612c:	7cc12b83          	lw	s7,1996(sp)
    6130:	7c812c03          	lw	s8,1992(sp)
    6134:	7c412c83          	lw	s9,1988(sp)
    6138:	7c012d03          	lw	s10,1984(sp)
    613c:	7bc12d83          	lw	s11,1980(sp)
    6140:	7f010113          	addi	sp,sp,2032
    6144:	00008067          	ret
    uart_send_string("\n\rERROR keys");
    6148:	00008517          	auipc	a0,0x8
    614c:	63450513          	addi	a0,a0,1588 # e77c <__clz_tab+0x180>
    6150:	864fc0ef          	jal	ra,21b4 <uart_send_string>
    return 1;
    6154:	00100413          	li	s0,1
    6158:	fadff06f          	j	6104 <test_keys+0x21c>
    itoa(pbuf, (unsigned int)keys_avg, 10);
    615c:	00092503          	lw	a0,0(s2)
    6160:	00008497          	auipc	s1,0x8
    6164:	69848493          	addi	s1,s1,1688 # e7f8 <pbuf>
    6168:	62d000ef          	jal	ra,6f94 <__fixunssfsi>
    616c:	00050593          	mv	a1,a0
    6170:	0004a503          	lw	a0,0(s1)
    6174:	00a00613          	li	a2,10
    6178:	d69fb0ef          	jal	ra,1ee0 <itoa>
    uart_send_string("\n\rKeys average: ");
    617c:	00008517          	auipc	a0,0x8
    6180:	61050513          	addi	a0,a0,1552 # e78c <__clz_tab+0x190>
    6184:	830fc0ef          	jal	ra,21b4 <uart_send_string>
    uart_send_string(str);
    6188:	00008517          	auipc	a0,0x8
    618c:	69c50513          	addi	a0,a0,1692 # e824 <str>
    6190:	824fc0ef          	jal	ra,21b4 <uart_send_string>
    itoa(pbuf, (unsigned int)enc_avg, 10);
    6194:	0009a503          	lw	a0,0(s3)
    6198:	5fd000ef          	jal	ra,6f94 <__fixunssfsi>
    619c:	00050593          	mv	a1,a0
    61a0:	0004a503          	lw	a0,0(s1)
    61a4:	00a00613          	li	a2,10
    61a8:	d39fb0ef          	jal	ra,1ee0 <itoa>
    uart_send_string("\nEncode average: ");
    61ac:	00008517          	auipc	a0,0x8
    61b0:	5f450513          	addi	a0,a0,1524 # e7a0 <__clz_tab+0x1a4>
    61b4:	800fc0ef          	jal	ra,21b4 <uart_send_string>
    uart_send_string(str);
    61b8:	00008517          	auipc	a0,0x8
    61bc:	66c50513          	addi	a0,a0,1644 # e824 <str>
    61c0:	ff5fb0ef          	jal	ra,21b4 <uart_send_string>
    itoa(pbuf, (unsigned int)dec_avg, 10);
    61c4:	000aa503          	lw	a0,0(s5)
    61c8:	5cd000ef          	jal	ra,6f94 <__fixunssfsi>
    61cc:	00050593          	mv	a1,a0
    61d0:	0004a503          	lw	a0,0(s1)
    61d4:	00a00613          	li	a2,10
    61d8:	d09fb0ef          	jal	ra,1ee0 <itoa>
    uart_send_string("\nDecode average: ");
    61dc:	00008517          	auipc	a0,0x8
    61e0:	5d850513          	addi	a0,a0,1496 # e7b4 <__clz_tab+0x1b8>
    61e4:	fd1fb0ef          	jal	ra,21b4 <uart_send_string>
    uart_send_string(str);
    61e8:	00008517          	auipc	a0,0x8
    61ec:	63c50513          	addi	a0,a0,1596 # e824 <str>
    61f0:	fc5fb0ef          	jal	ra,21b4 <uart_send_string>
    61f4:	f11ff06f          	j	6104 <test_keys+0x21c>

000061f8 <test_invalid_sk_a>:

static int test_invalid_sk_a()
{
    61f8:	81010113          	addi	sp,sp,-2032
    61fc:	7e812423          	sw	s0,2024(sp)
    6200:	7d412c23          	sw	s4,2008(sp)
  uint8_t ct[CRYPTO_CIPHERTEXTBYTES];
  uint8_t key_a[CRYPTO_BYTES];
  uint8_t key_b[CRYPTO_BYTES];

  //Alice generates a public key
  crypto_kem_keypair(pk, sk);
    6204:	fffff437          	lui	s0,0xfffff
    6208:	00001a37          	lui	s4,0x1
{
    620c:	7d312e23          	sw	s3,2012(sp)
  crypto_kem_keypair(pk, sk);
    6210:	cc0a0793          	addi	a5,s4,-832 # cc0 <pqcrystals_kyber512_ref_polyvec_compress+0x8>
    6214:	68040993          	addi	s3,s0,1664 # fffff680 <_end_of_memory+0xfffdf680>
{
    6218:	7e112623          	sw	ra,2028(sp)
    621c:	7e912223          	sw	s1,2020(sp)
    6220:	7f212023          	sw	s2,2016(sp)
  crypto_kem_keypair(pk, sk);
    6224:	013787b3          	add	a5,a5,s3
{
    6228:	b1010113          	addi	sp,sp,-1264
  crypto_kem_keypair(pk, sk);
    622c:	002789b3          	add	s3,a5,sp
    6230:	66010593          	addi	a1,sp,1632
    6234:	00098513          	mv	a0,s3
    6238:	86cfa0ef          	jal	ra,2a4 <pqcrystals_kyber512_ref_keypair>

  //Bob derives a secret key and creates a response
  crypto_kem_enc(ct, key_b, pk);
    623c:	36040493          	addi	s1,s0,864
    6240:	cc0a0793          	addi	a5,s4,-832
    6244:	009787b3          	add	a5,a5,s1
    6248:	38040913          	addi	s2,s0,896
    624c:	002784b3          	add	s1,a5,sp
    6250:	cc0a0793          	addi	a5,s4,-832
    6254:	012787b3          	add	a5,a5,s2
    6258:	00278933          	add	s2,a5,sp
    625c:	00098613          	mv	a2,s3
    6260:	00048593          	mv	a1,s1
    6264:	00090513          	mv	a0,s2
    6268:	8e8fa0ef          	jal	ra,350 <pqcrystals_kyber512_ref_enc>

  //Replace secret key with random values
  randombytes(sk, CRYPTO_SECRETKEYBYTES);
    626c:	66000593          	li	a1,1632
    6270:	66010513          	addi	a0,sp,1632
    6274:	855ff0ef          	jal	ra,5ac8 <randombytes>

  //Alice uses Bobs response to get her shared key
  crypto_kem_dec(key_a, ct, sk);
    6278:	34040413          	addi	s0,s0,832
    627c:	cc0a0793          	addi	a5,s4,-832
    6280:	008787b3          	add	a5,a5,s0
    6284:	00278433          	add	s0,a5,sp
    6288:	66010613          	addi	a2,sp,1632
    628c:	00090593          	mv	a1,s2
    6290:	00040513          	mv	a0,s0
    6294:	9acfa0ef          	jal	ra,440 <pqcrystals_kyber512_ref_dec>

  if(!memcmp(key_a, key_b, CRYPTO_BYTES)) {
    6298:	02000613          	li	a2,32
    629c:	00048593          	mv	a1,s1
    62a0:	00040513          	mv	a0,s0
    62a4:	0a0010ef          	jal	ra,7344 <memcmp>
    62a8:	00000793          	li	a5,0
    62ac:	02050663          	beqz	a0,62d8 <test_invalid_sk_a+0xe0>
    uart_send_string("ERROR invalid sk\n");
    return 1;
  }

  return 0;
}
    62b0:	4f010113          	addi	sp,sp,1264
    62b4:	7ec12083          	lw	ra,2028(sp)
    62b8:	7e812403          	lw	s0,2024(sp)
    62bc:	7e412483          	lw	s1,2020(sp)
    62c0:	7e012903          	lw	s2,2016(sp)
    62c4:	7dc12983          	lw	s3,2012(sp)
    62c8:	7d812a03          	lw	s4,2008(sp)
    62cc:	00078513          	mv	a0,a5
    62d0:	7f010113          	addi	sp,sp,2032
    62d4:	00008067          	ret
    uart_send_string("ERROR invalid sk\n");
    62d8:	00008517          	auipc	a0,0x8
    62dc:	4f050513          	addi	a0,a0,1264 # e7c8 <__clz_tab+0x1cc>
    62e0:	ed5fb0ef          	jal	ra,21b4 <uart_send_string>
    return 1;
    62e4:	00100793          	li	a5,1
    62e8:	fc9ff06f          	j	62b0 <test_invalid_sk_a+0xb8>

000062ec <test_invalid_ciphertext>:

static int test_invalid_ciphertext()
{
    62ec:	81010113          	addi	sp,sp,-2032
    62f0:	7e812423          	sw	s0,2024(sp)
  uint8_t key_b[CRYPTO_BYTES];
  uint8_t b;
  size_t pos;

  do {
    randombytes(&b, sizeof(uint8_t));
    62f4:	000017b7          	lui	a5,0x1
    62f8:	fffff437          	lui	s0,0xfffff
{
    62fc:	7e912223          	sw	s1,2020(sp)
    randombytes(&b, sizeof(uint8_t));
    6300:	cd078793          	addi	a5,a5,-816 # cd0 <pqcrystals_kyber512_ref_polyvec_compress+0x18>
    6304:	33b40493          	addi	s1,s0,827 # fffff33b <_end_of_memory+0xfffdf33b>
{
    6308:	7e112623          	sw	ra,2028(sp)
    630c:	7f212023          	sw	s2,2016(sp)
    6310:	7d312e23          	sw	s3,2012(sp)
    6314:	7d412c23          	sw	s4,2008(sp)
    randombytes(&b, sizeof(uint8_t));
    6318:	009787b3          	add	a5,a5,s1
{
    631c:	b0010113          	addi	sp,sp,-1280
    randombytes(&b, sizeof(uint8_t));
    6320:	002784b3          	add	s1,a5,sp
    6324:	00100593          	li	a1,1
    6328:	00048513          	mv	a0,s1
    632c:	f9cff0ef          	jal	ra,5ac8 <randombytes>
  } while(!b);
    6330:	00b14783          	lbu	a5,11(sp)
    6334:	fe0788e3          	beqz	a5,6324 <test_invalid_ciphertext+0x38>
  randombytes((uint8_t *)&pos, sizeof(size_t));
    6338:	00001a37          	lui	s4,0x1
    633c:	33c40513          	addi	a0,s0,828
    6340:	cd0a0793          	addi	a5,s4,-816 # cd0 <pqcrystals_kyber512_ref_polyvec_compress+0x18>
    6344:	00a787b3          	add	a5,a5,a0
    6348:	00278533          	add	a0,a5,sp
    634c:	00400593          	li	a1,4
    6350:	f78ff0ef          	jal	ra,5ac8 <randombytes>

  //Alice generates a public key
  crypto_kem_keypair(pk, sk);
    6354:	68040993          	addi	s3,s0,1664
    6358:	cd0a0793          	addi	a5,s4,-816
    635c:	013787b3          	add	a5,a5,s3
    6360:	002789b3          	add	s3,a5,sp
    6364:	67010593          	addi	a1,sp,1648
    6368:	00098513          	mv	a0,s3
    636c:	f39f90ef          	jal	ra,2a4 <pqcrystals_kyber512_ref_keypair>

  //Bob derives a secret key and creates a response
  crypto_kem_enc(ct, key_b, pk);
    6370:	36040493          	addi	s1,s0,864
    6374:	cd0a0793          	addi	a5,s4,-816
    6378:	009787b3          	add	a5,a5,s1
    637c:	38040913          	addi	s2,s0,896
    6380:	002784b3          	add	s1,a5,sp
    6384:	cd0a0793          	addi	a5,s4,-816
    6388:	012787b3          	add	a5,a5,s2
    638c:	00278933          	add	s2,a5,sp
    6390:	00098613          	mv	a2,s3
    6394:	00048593          	mv	a1,s1
    6398:	00090513          	mv	a0,s2
    639c:	fb5f90ef          	jal	ra,350 <pqcrystals_kyber512_ref_enc>

  //Change some byte in the ciphertext (i.e., encapsulated key)
  ct[pos % CRYPTO_CIPHERTEXTBYTES] ^= b;
    63a0:	00c12783          	lw	a5,12(sp)
    63a4:	30000713          	li	a4,768

  //Alice uses Bobs response to get her shared key
  crypto_kem_dec(key_a, ct, sk);
    63a8:	34040413          	addi	s0,s0,832
  ct[pos % CRYPTO_CIPHERTEXTBYTES] ^= b;
    63ac:	02e7f7b3          	remu	a5,a5,a4
  crypto_kem_dec(key_a, ct, sk);
    63b0:	cd0a0713          	addi	a4,s4,-816
    63b4:	00870733          	add	a4,a4,s0
    63b8:	00270433          	add	s0,a4,sp
  ct[pos % CRYPTO_CIPHERTEXTBYTES] ^= b;
    63bc:	cd010713          	addi	a4,sp,-816
    63c0:	00b14683          	lbu	a3,11(sp)
  crypto_kem_dec(key_a, ct, sk);
    63c4:	67010613          	addi	a2,sp,1648
    63c8:	00090593          	mv	a1,s2
    63cc:	00040513          	mv	a0,s0
  ct[pos % CRYPTO_CIPHERTEXTBYTES] ^= b;
    63d0:	00f707b3          	add	a5,a4,a5
    63d4:	3807c703          	lbu	a4,896(a5)
    63d8:	00d74733          	xor	a4,a4,a3
    63dc:	38e78023          	sb	a4,896(a5)
  crypto_kem_dec(key_a, ct, sk);
    63e0:	860fa0ef          	jal	ra,440 <pqcrystals_kyber512_ref_dec>

  if(!memcmp(key_a, key_b, CRYPTO_BYTES)) {
    63e4:	02000613          	li	a2,32
    63e8:	00048593          	mv	a1,s1
    63ec:	00040513          	mv	a0,s0
    63f0:	755000ef          	jal	ra,7344 <memcmp>
    uart_send_string("ERROR invalid ciphertext\n");
    return 1;
  }

  return 0;
    63f4:	00000793          	li	a5,0
  if(!memcmp(key_a, key_b, CRYPTO_BYTES)) {
    63f8:	02050663          	beqz	a0,6424 <test_invalid_ciphertext+0x138>
}
    63fc:	50010113          	addi	sp,sp,1280
    6400:	7ec12083          	lw	ra,2028(sp)
    6404:	7e812403          	lw	s0,2024(sp)
    6408:	7e412483          	lw	s1,2020(sp)
    640c:	7e012903          	lw	s2,2016(sp)
    6410:	7dc12983          	lw	s3,2012(sp)
    6414:	7d812a03          	lw	s4,2008(sp)
    6418:	00078513          	mv	a0,a5
    641c:	7f010113          	addi	sp,sp,2032
    6420:	00008067          	ret
    uart_send_string("ERROR invalid ciphertext\n");
    6424:	00008517          	auipc	a0,0x8
    6428:	3b850513          	addi	a0,a0,952 # e7dc <__clz_tab+0x1e0>
    642c:	d89fb0ef          	jal	ra,21b4 <uart_send_string>
    return 1;
    6430:	00100793          	li	a5,1
    6434:	fc9ff06f          	j	63fc <test_invalid_ciphertext+0x110>

00006438 <__addsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__addsf3 (SFtype a, SFtype b)
{
    6438:	ff010113          	addi	sp,sp,-16
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_SEMIRAW_S (A, a);
    643c:	00800737          	lui	a4,0x800
    6440:	fff70713          	addi	a4,a4,-1 # 7fffff <_end_of_memory+0x7dffff>
  FP_UNPACK_SEMIRAW_S (B, b);
    6444:	0175d613          	srli	a2,a1,0x17
{
    6448:	00812423          	sw	s0,8(sp)
  FP_UNPACK_SEMIRAW_S (A, a);
    644c:	01755413          	srli	s0,a0,0x17
    6450:	00a777b3          	and	a5,a4,a0
{
    6454:	01212023          	sw	s2,0(sp)
  FP_UNPACK_SEMIRAW_S (B, b);
    6458:	00b77733          	and	a4,a4,a1
  FP_UNPACK_SEMIRAW_S (A, a);
    645c:	0ff47413          	zext.b	s0,s0
  FP_UNPACK_SEMIRAW_S (B, b);
    6460:	0ff67613          	zext.b	a2,a2
{
    6464:	00112623          	sw	ra,12(sp)
    6468:	00912223          	sw	s1,4(sp)
  FP_UNPACK_SEMIRAW_S (A, a);
    646c:	01f55913          	srli	s2,a0,0x1f
  FP_UNPACK_SEMIRAW_S (B, b);
    6470:	01f5d593          	srli	a1,a1,0x1f
  FP_UNPACK_SEMIRAW_S (A, a);
    6474:	00379793          	slli	a5,a5,0x3
  FP_UNPACK_SEMIRAW_S (B, b);
    6478:	00371713          	slli	a4,a4,0x3
  FP_ADD_S (R, A, B);
    647c:	40c406b3          	sub	a3,s0,a2
    6480:	20b91863          	bne	s2,a1,6690 <__addsf3+0x258>
    6484:	12d05863          	blez	a3,65b4 <__addsf3+0x17c>
    6488:	02061e63          	bnez	a2,64c4 <__addsf3+0x8c>
    648c:	1e070e63          	beqz	a4,6688 <__addsf3+0x250>
    6490:	fff68613          	addi	a2,a3,-1
    6494:	02061063          	bnez	a2,64b4 <__addsf3+0x7c>
    6498:	00e787b3          	add	a5,a5,a4
    649c:	04000737          	lui	a4,0x4000
    64a0:	00e7f733          	and	a4,a5,a4
    64a4:	00200413          	li	s0,2
    64a8:	0e071863          	bnez	a4,6598 <__addsf3+0x160>
    64ac:	00100413          	li	s0,1
    64b0:	0340006f          	j	64e4 <__addsf3+0xac>
    64b4:	0ff00593          	li	a1,255
    64b8:	02b69063          	bne	a3,a1,64d8 <__addsf3+0xa0>
    64bc:	0ff00413          	li	s0,255
    64c0:	0240006f          	j	64e4 <__addsf3+0xac>
    64c4:	0ff00613          	li	a2,255
    64c8:	00c40e63          	beq	s0,a2,64e4 <__addsf3+0xac>
    64cc:	04000637          	lui	a2,0x4000
    64d0:	00c76733          	or	a4,a4,a2
    64d4:	00068613          	mv	a2,a3
    64d8:	01b00693          	li	a3,27
    64dc:	08c6d263          	bge	a3,a2,6560 <__addsf3+0x128>
    64e0:	00178793          	addi	a5,a5,1
  FP_PACK_SEMIRAW_S (r, R);
    64e4:	0077f713          	andi	a4,a5,7
    64e8:	00070a63          	beqz	a4,64fc <__addsf3+0xc4>
    64ec:	00f7f713          	andi	a4,a5,15
    64f0:	00400693          	li	a3,4
    64f4:	00d70463          	beq	a4,a3,64fc <__addsf3+0xc4>
    64f8:	00478793          	addi	a5,a5,4
    64fc:	04000737          	lui	a4,0x4000
    6500:	00e7f733          	and	a4,a5,a4
    6504:	38070063          	beqz	a4,6884 <__addsf3+0x44c>
    6508:	00140413          	addi	s0,s0,1
    650c:	0ff00713          	li	a4,255
    6510:	00000493          	li	s1,0
    6514:	00e40a63          	beq	s0,a4,6528 <__addsf3+0xf0>
    6518:	0037d493          	srli	s1,a5,0x3
    651c:	1f8007b7          	lui	a5,0x1f800
    6520:	fff78793          	addi	a5,a5,-1 # 1f7fffff <_end_of_memory+0x1f7dffff>
    6524:	00f4f4b3          	and	s1,s1,a5
    6528:	01741413          	slli	s0,s0,0x17
    652c:	7f8007b7          	lui	a5,0x7f800
    6530:	00949493          	slli	s1,s1,0x9
    6534:	0094d493          	srli	s1,s1,0x9
    6538:	00f47433          	and	s0,s0,a5
    653c:	00946433          	or	s0,s0,s1
    6540:	01f91513          	slli	a0,s2,0x1f
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    6544:	00c12083          	lw	ra,12(sp)
    6548:	00a46533          	or	a0,s0,a0
    654c:	00812403          	lw	s0,8(sp)
    6550:	00412483          	lw	s1,4(sp)
    6554:	00012903          	lw	s2,0(sp)
    6558:	01010113          	addi	sp,sp,16
    655c:	00008067          	ret
  FP_ADD_S (R, A, B);
    6560:	02000693          	li	a3,32
    6564:	40c686b3          	sub	a3,a3,a2
    6568:	00c755b3          	srl	a1,a4,a2
    656c:	00d71733          	sll	a4,a4,a3
    6570:	00e03733          	snez	a4,a4
    6574:	00e5e733          	or	a4,a1,a4
    6578:	00e787b3          	add	a5,a5,a4
    657c:	04000737          	lui	a4,0x4000
    6580:	00e7f733          	and	a4,a5,a4
    6584:	f60700e3          	beqz	a4,64e4 <__addsf3+0xac>
    6588:	00140413          	addi	s0,s0,1
    658c:	0ff00713          	li	a4,255
  FP_PACK_SEMIRAW_S (r, R);
    6590:	00000493          	li	s1,0
  FP_ADD_S (R, A, B);
    6594:	f8e40ae3          	beq	s0,a4,6528 <__addsf3+0xf0>
    6598:	7e000737          	lui	a4,0x7e000
    659c:	0017f693          	andi	a3,a5,1
    65a0:	fff70713          	addi	a4,a4,-1 # 7dffffff <_end_of_memory+0x7dfdffff>
    65a4:	0017d793          	srli	a5,a5,0x1
    65a8:	00e7f7b3          	and	a5,a5,a4
    65ac:	00d7e7b3          	or	a5,a5,a3
    65b0:	f35ff06f          	j	64e4 <__addsf3+0xac>
    65b4:	06068a63          	beqz	a3,6628 <__addsf3+0x1f0>
    65b8:	408606b3          	sub	a3,a2,s0
    65bc:	02041063          	bnez	s0,65dc <__addsf3+0x1a4>
    65c0:	2a078263          	beqz	a5,6864 <__addsf3+0x42c>
    65c4:	fff68593          	addi	a1,a3,-1
    65c8:	ec0588e3          	beqz	a1,6498 <__addsf3+0x60>
    65cc:	0ff00513          	li	a0,255
    65d0:	02a69063          	bne	a3,a0,65f0 <__addsf3+0x1b8>
  FP_UNPACK_SEMIRAW_S (B, b);
    65d4:	00070793          	mv	a5,a4
    65d8:	ee5ff06f          	j	64bc <__addsf3+0x84>
  FP_ADD_S (R, A, B);
    65dc:	0ff00593          	li	a1,255
    65e0:	feb60ae3          	beq	a2,a1,65d4 <__addsf3+0x19c>
    65e4:	040005b7          	lui	a1,0x4000
    65e8:	00b7e7b3          	or	a5,a5,a1
    65ec:	00068593          	mv	a1,a3
    65f0:	01b00693          	li	a3,27
    65f4:	00b6d863          	bge	a3,a1,6604 <__addsf3+0x1cc>
    65f8:	00170793          	addi	a5,a4,1
  FP_UNPACK_SEMIRAW_S (B, b);
    65fc:	00060413          	mv	s0,a2
    6600:	ee5ff06f          	j	64e4 <__addsf3+0xac>
  FP_ADD_S (R, A, B);
    6604:	02000693          	li	a3,32
    6608:	40b686b3          	sub	a3,a3,a1
    660c:	00b7d533          	srl	a0,a5,a1
    6610:	00d797b3          	sll	a5,a5,a3
    6614:	00f037b3          	snez	a5,a5
    6618:	00f567b3          	or	a5,a0,a5
    661c:	00e787b3          	add	a5,a5,a4
  FP_UNPACK_SEMIRAW_S (B, b);
    6620:	00060413          	mv	s0,a2
    6624:	f59ff06f          	j	657c <__addsf3+0x144>
  FP_ADD_S (R, A, B);
    6628:	00140693          	addi	a3,s0,1
    662c:	0fe6f613          	andi	a2,a3,254
    6630:	04061463          	bnez	a2,6678 <__addsf3+0x240>
    6634:	02041663          	bnez	s0,6660 <__addsf3+0x228>
    6638:	22078a63          	beqz	a5,686c <__addsf3+0x434>
    663c:	ea0704e3          	beqz	a4,64e4 <__addsf3+0xac>
    6640:	00e787b3          	add	a5,a5,a4
    6644:	04000737          	lui	a4,0x4000
    6648:	00e7f733          	and	a4,a5,a4
    664c:	e8070ce3          	beqz	a4,64e4 <__addsf3+0xac>
    6650:	fc000737          	lui	a4,0xfc000
    6654:	fff70713          	addi	a4,a4,-1 # fbffffff <_end_of_memory+0xfbfdffff>
    6658:	00e7f7b3          	and	a5,a5,a4
    665c:	e51ff06f          	j	64ac <__addsf3+0x74>
    6660:	f6078ae3          	beqz	a5,65d4 <__addsf3+0x19c>
    6664:	e4070ce3          	beqz	a4,64bc <__addsf3+0x84>
  FP_PACK_SEMIRAW_S (r, R);
    6668:	00000913          	li	s2,0
    666c:	0ff00413          	li	s0,255
    6670:	004004b7          	lui	s1,0x400
    6674:	eb5ff06f          	j	6528 <__addsf3+0xf0>
  FP_ADD_S (R, A, B);
    6678:	0ff00613          	li	a2,255
    667c:	22c68063          	beq	a3,a2,689c <__addsf3+0x464>
    6680:	00e78733          	add	a4,a5,a4
    6684:	00175793          	srli	a5,a4,0x1
  FP_UNPACK_SEMIRAW_S (A, a);
    6688:	00068413          	mv	s0,a3
    668c:	e59ff06f          	j	64e4 <__addsf3+0xac>
  FP_ADD_S (R, A, B);
    6690:	08d05063          	blez	a3,6710 <__addsf3+0x2d8>
    6694:	06061263          	bnez	a2,66f8 <__addsf3+0x2c0>
    6698:	fe0708e3          	beqz	a4,6688 <__addsf3+0x250>
    669c:	fff68613          	addi	a2,a3,-1
    66a0:	00061863          	bnez	a2,66b0 <__addsf3+0x278>
    66a4:	40e787b3          	sub	a5,a5,a4
  FP_UNPACK_SEMIRAW_S (B, b);
    66a8:	00100413          	li	s0,1
  FP_ADD_S (R, A, B);
    66ac:	0340006f          	j	66e0 <__addsf3+0x2a8>
    66b0:	0ff00593          	li	a1,255
    66b4:	e0b684e3          	beq	a3,a1,64bc <__addsf3+0x84>
    66b8:	01b00593          	li	a1,27
    66bc:	00100693          	li	a3,1
    66c0:	00c5ce63          	blt	a1,a2,66dc <__addsf3+0x2a4>
    66c4:	02000693          	li	a3,32
    66c8:	40c686b3          	sub	a3,a3,a2
    66cc:	00c755b3          	srl	a1,a4,a2
    66d0:	00d71733          	sll	a4,a4,a3
    66d4:	00e03733          	snez	a4,a4
    66d8:	00e5e6b3          	or	a3,a1,a4
    66dc:	40d787b3          	sub	a5,a5,a3
    66e0:	040004b7          	lui	s1,0x4000
    66e4:	0097f733          	and	a4,a5,s1
    66e8:	de070ee3          	beqz	a4,64e4 <__addsf3+0xac>
    66ec:	fff48493          	addi	s1,s1,-1 # 3ffffff <_end_of_memory+0x3fdffff>
    66f0:	0097f4b3          	and	s1,a5,s1
    66f4:	1140006f          	j	6808 <__addsf3+0x3d0>
    66f8:	0ff00613          	li	a2,255
    66fc:	dec404e3          	beq	s0,a2,64e4 <__addsf3+0xac>
    6700:	04000637          	lui	a2,0x4000
    6704:	00c76733          	or	a4,a4,a2
    6708:	00068613          	mv	a2,a3
    670c:	fadff06f          	j	66b8 <__addsf3+0x280>
    6710:	08068063          	beqz	a3,6790 <__addsf3+0x358>
    6714:	408606b3          	sub	a3,a2,s0
    6718:	02041863          	bnez	s0,6748 <__addsf3+0x310>
    671c:	14078c63          	beqz	a5,6874 <__addsf3+0x43c>
    6720:	fff68513          	addi	a0,a3,-1
    6724:	00051863          	bnez	a0,6734 <__addsf3+0x2fc>
    6728:	40f707b3          	sub	a5,a4,a5
    672c:	00058913          	mv	s2,a1
    6730:	f79ff06f          	j	66a8 <__addsf3+0x270>
    6734:	0ff00813          	li	a6,255
    6738:	03069263          	bne	a3,a6,675c <__addsf3+0x324>
  FP_UNPACK_SEMIRAW_S (B, b);
    673c:	00070793          	mv	a5,a4
  FP_ADD_S (R, A, B);
    6740:	0ff00413          	li	s0,255
    6744:	1380006f          	j	687c <__addsf3+0x444>
    6748:	0ff00513          	li	a0,255
    674c:	fea608e3          	beq	a2,a0,673c <__addsf3+0x304>
    6750:	04000537          	lui	a0,0x4000
    6754:	00a7e7b3          	or	a5,a5,a0
    6758:	00068513          	mv	a0,a3
    675c:	01b00813          	li	a6,27
    6760:	00100693          	li	a3,1
    6764:	00a84e63          	blt	a6,a0,6780 <__addsf3+0x348>
    6768:	02000693          	li	a3,32
    676c:	40a686b3          	sub	a3,a3,a0
    6770:	00a7d833          	srl	a6,a5,a0
    6774:	00d797b3          	sll	a5,a5,a3
    6778:	00f037b3          	snez	a5,a5
    677c:	00f866b3          	or	a3,a6,a5
    6780:	40d707b3          	sub	a5,a4,a3
  FP_UNPACK_SEMIRAW_S (B, b);
    6784:	00060413          	mv	s0,a2
    6788:	00058913          	mv	s2,a1
    678c:	f55ff06f          	j	66e0 <__addsf3+0x2a8>
  FP_ADD_S (R, A, B);
    6790:	00140693          	addi	a3,s0,1
    6794:	0fe6f693          	andi	a3,a3,254
    6798:	04069c63          	bnez	a3,67f0 <__addsf3+0x3b8>
    679c:	04041063          	bnez	s0,67dc <__addsf3+0x3a4>
    67a0:	00079a63          	bnez	a5,67b4 <__addsf3+0x37c>
    67a4:	00070793          	mv	a5,a4
    67a8:	0c071a63          	bnez	a4,687c <__addsf3+0x444>
  FP_PACK_SEMIRAW_S (r, R);
    67ac:	00000493          	li	s1,0
    67b0:	0240006f          	j	67d4 <__addsf3+0x39c>
  FP_ADD_S (R, A, B);
    67b4:	d20708e3          	beqz	a4,64e4 <__addsf3+0xac>
    67b8:	40e784b3          	sub	s1,a5,a4
    67bc:	040006b7          	lui	a3,0x4000
    67c0:	00d4f6b3          	and	a3,s1,a3
    67c4:	40f707b3          	sub	a5,a4,a5
    67c8:	0a069a63          	bnez	a3,687c <__addsf3+0x444>
    67cc:	00048793          	mv	a5,s1
    67d0:	d0049ae3          	bnez	s1,64e4 <__addsf3+0xac>
    67d4:	00000913          	li	s2,0
    67d8:	d51ff06f          	j	6528 <__addsf3+0xf0>
    67dc:	e80794e3          	bnez	a5,6664 <__addsf3+0x22c>
    67e0:	e80704e3          	beqz	a4,6668 <__addsf3+0x230>
    67e4:	00070793          	mv	a5,a4
    67e8:	00058913          	mv	s2,a1
    67ec:	cd1ff06f          	j	64bc <__addsf3+0x84>
    67f0:	40e784b3          	sub	s1,a5,a4
    67f4:	040006b7          	lui	a3,0x4000
    67f8:	00d4f6b3          	and	a3,s1,a3
    67fc:	04068463          	beqz	a3,6844 <__addsf3+0x40c>
    6800:	40f704b3          	sub	s1,a4,a5
    6804:	00058913          	mv	s2,a1
    6808:	00048513          	mv	a0,s1
    680c:	1a9000ef          	jal	ra,71b4 <__clzsi2>
    6810:	ffb50513          	addi	a0,a0,-5 # 3fffffb <_end_of_memory+0x3fdfffb>
    6814:	00a494b3          	sll	s1,s1,a0
    6818:	02854c63          	blt	a0,s0,6850 <__addsf3+0x418>
    681c:	40850533          	sub	a0,a0,s0
    6820:	00150513          	addi	a0,a0,1
    6824:	02000713          	li	a4,32
    6828:	40a70733          	sub	a4,a4,a0
    682c:	00a4d7b3          	srl	a5,s1,a0
    6830:	00e494b3          	sll	s1,s1,a4
    6834:	009034b3          	snez	s1,s1
    6838:	0097e7b3          	or	a5,a5,s1
    683c:	00000413          	li	s0,0
    6840:	ca5ff06f          	j	64e4 <__addsf3+0xac>
    6844:	fc0492e3          	bnez	s1,6808 <__addsf3+0x3d0>
    6848:	00000413          	li	s0,0
    684c:	f89ff06f          	j	67d4 <__addsf3+0x39c>
    6850:	fc0007b7          	lui	a5,0xfc000
    6854:	fff78793          	addi	a5,a5,-1 # fbffffff <_end_of_memory+0xfbfdffff>
    6858:	40a40433          	sub	s0,s0,a0
    685c:	00f4f7b3          	and	a5,s1,a5
    6860:	c85ff06f          	j	64e4 <__addsf3+0xac>
  FP_UNPACK_SEMIRAW_S (B, b);
    6864:	00070793          	mv	a5,a4
    6868:	e21ff06f          	j	6688 <__addsf3+0x250>
    686c:	00070793          	mv	a5,a4
    6870:	c75ff06f          	j	64e4 <__addsf3+0xac>
    6874:	00070793          	mv	a5,a4
    6878:	00068413          	mv	s0,a3
    687c:	00058913          	mv	s2,a1
    6880:	c65ff06f          	j	64e4 <__addsf3+0xac>
  FP_PACK_SEMIRAW_S (r, R);
    6884:	0037d493          	srli	s1,a5,0x3
    6888:	0ff00793          	li	a5,255
    688c:	c8f41ee3          	bne	s0,a5,6528 <__addsf3+0xf0>
    6890:	c8048ce3          	beqz	s1,6528 <__addsf3+0xf0>
    6894:	004004b7          	lui	s1,0x400
    6898:	f3dff06f          	j	67d4 <__addsf3+0x39c>
    689c:	0ff00413          	li	s0,255
    68a0:	00000493          	li	s1,0
    68a4:	c85ff06f          	j	6528 <__addsf3+0xf0>

000068a8 <__divsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__divsf3 (SFtype a, SFtype b)
{
    68a8:	fd010113          	addi	sp,sp,-48
    68ac:	02912223          	sw	s1,36(sp)
    68b0:	01755493          	srli	s1,a0,0x17
    68b4:	03212023          	sw	s2,32(sp)
    68b8:	01512a23          	sw	s5,20(sp)
    68bc:	01612823          	sw	s6,16(sp)
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_S (A, a);
    68c0:	00951a93          	slli	s5,a0,0x9
{
    68c4:	02112623          	sw	ra,44(sp)
    68c8:	02812423          	sw	s0,40(sp)
    68cc:	01312e23          	sw	s3,28(sp)
    68d0:	01412c23          	sw	s4,24(sp)
    68d4:	01712623          	sw	s7,12(sp)
    68d8:	01812423          	sw	s8,8(sp)
    68dc:	0ff4f493          	zext.b	s1,s1
    68e0:	00058b13          	mv	s6,a1
  FP_UNPACK_S (A, a);
    68e4:	009ada93          	srli	s5,s5,0x9
    68e8:	01f55913          	srli	s2,a0,0x1f
    68ec:	08048463          	beqz	s1,6974 <__divsf3+0xcc>
    68f0:	0ff00793          	li	a5,255
    68f4:	0af48063          	beq	s1,a5,6994 <__divsf3+0xec>
    68f8:	003a9a93          	slli	s5,s5,0x3
    68fc:	040007b7          	lui	a5,0x4000
    6900:	00faeab3          	or	s5,s5,a5
    6904:	f8148493          	addi	s1,s1,-127 # 3fff81 <_end_of_memory+0x3dff81>
    6908:	00000b93          	li	s7,0
  FP_UNPACK_S (B, b);
    690c:	017b5793          	srli	a5,s6,0x17
    6910:	009b1413          	slli	s0,s6,0x9
    6914:	0ff7f793          	zext.b	a5,a5
    6918:	00945413          	srli	s0,s0,0x9
    691c:	01fb5b13          	srli	s6,s6,0x1f
    6920:	08078a63          	beqz	a5,69b4 <__divsf3+0x10c>
    6924:	0ff00713          	li	a4,255
    6928:	0ae78663          	beq	a5,a4,69d4 <__divsf3+0x12c>
    692c:	00341413          	slli	s0,s0,0x3
    6930:	04000737          	lui	a4,0x4000
    6934:	00e46433          	or	s0,s0,a4
    6938:	f8178793          	addi	a5,a5,-127 # 3ffff81 <_end_of_memory+0x3fdff81>
    693c:	00000713          	li	a4,0
  FP_DIV_S (R, A, B);
    6940:	40f48a33          	sub	s4,s1,a5
    6944:	002b9793          	slli	a5,s7,0x2
    6948:	00e7e7b3          	or	a5,a5,a4
    694c:	fff78793          	addi	a5,a5,-1
    6950:	00e00693          	li	a3,14
    6954:	016949b3          	xor	s3,s2,s6
    6958:	0cf6e663          	bltu	a3,a5,6a24 <__divsf3+0x17c>
    695c:	0000e6b7          	lui	a3,0xe
    6960:	00279793          	slli	a5,a5,0x2
    6964:	5c068693          	addi	a3,a3,1472 # e5c0 <KeccakF_RoundConstants+0xc0>
    6968:	00d787b3          	add	a5,a5,a3
    696c:	0007a783          	lw	a5,0(a5)
    6970:	00078067          	jr	a5
  FP_UNPACK_S (A, a);
    6974:	020a8a63          	beqz	s5,69a8 <__divsf3+0x100>
    6978:	000a8513          	mv	a0,s5
    697c:	039000ef          	jal	ra,71b4 <__clzsi2>
    6980:	ffb50793          	addi	a5,a0,-5
    6984:	f8a00493          	li	s1,-118
    6988:	00fa9ab3          	sll	s5,s5,a5
    698c:	40a484b3          	sub	s1,s1,a0
    6990:	f79ff06f          	j	6908 <__divsf3+0x60>
    6994:	0ff00493          	li	s1,255
    6998:	00300b93          	li	s7,3
    699c:	f60a98e3          	bnez	s5,690c <__divsf3+0x64>
    69a0:	00200b93          	li	s7,2
    69a4:	f69ff06f          	j	690c <__divsf3+0x64>
    69a8:	00000493          	li	s1,0
    69ac:	00100b93          	li	s7,1
    69b0:	f5dff06f          	j	690c <__divsf3+0x64>
  FP_UNPACK_S (B, b);
    69b4:	02040a63          	beqz	s0,69e8 <__divsf3+0x140>
    69b8:	00040513          	mv	a0,s0
    69bc:	7f8000ef          	jal	ra,71b4 <__clzsi2>
    69c0:	ffb50793          	addi	a5,a0,-5
    69c4:	00f41433          	sll	s0,s0,a5
    69c8:	f8a00793          	li	a5,-118
    69cc:	40a787b3          	sub	a5,a5,a0
    69d0:	f6dff06f          	j	693c <__divsf3+0x94>
    69d4:	0ff00793          	li	a5,255
    69d8:	00300713          	li	a4,3
    69dc:	f60412e3          	bnez	s0,6940 <__divsf3+0x98>
    69e0:	00200713          	li	a4,2
    69e4:	f5dff06f          	j	6940 <__divsf3+0x98>
    69e8:	00000793          	li	a5,0
    69ec:	00100713          	li	a4,1
    69f0:	f51ff06f          	j	6940 <__divsf3+0x98>
  FP_UNPACK_S (A, a);
    69f4:	00090993          	mv	s3,s2
    69f8:	000a8413          	mv	s0,s5
  FP_DIV_S (R, A, B);
    69fc:	000b8713          	mv	a4,s7
  FP_PACK_S (r, R);
    6a00:	00200793          	li	a5,2
    6a04:	22f70063          	beq	a4,a5,6c24 <__divsf3+0x37c>
    6a08:	00300793          	li	a5,3
    6a0c:	20f70463          	beq	a4,a5,6c14 <__divsf3+0x36c>
    6a10:	00100793          	li	a5,1
    6a14:	0ef71c63          	bne	a4,a5,6b0c <__divsf3+0x264>
    6a18:	00000793          	li	a5,0
    6a1c:	00000713          	li	a4,0
    6a20:	1340006f          	j	6b54 <__divsf3+0x2ac>
  FP_DIV_S (R, A, B);
    6a24:	00541c13          	slli	s8,s0,0x5
    6a28:	168afa63          	bgeu	s5,s0,6b9c <__divsf3+0x2f4>
    6a2c:	fffa0a13          	addi	s4,s4,-1
    6a30:	00000413          	li	s0,0
    6a34:	010c5b13          	srli	s6,s8,0x10
    6a38:	00010937          	lui	s2,0x10
    6a3c:	000b0593          	mv	a1,s6
    6a40:	fff90913          	addi	s2,s2,-1 # ffff <_gp+0x1007>
    6a44:	000a8513          	mv	a0,s5
    6a48:	6c0000ef          	jal	ra,7108 <__hidden___udivsi3>
    6a4c:	012c7933          	and	s2,s8,s2
    6a50:	00050593          	mv	a1,a0
    6a54:	00050b93          	mv	s7,a0
    6a58:	00090513          	mv	a0,s2
    6a5c:	680000ef          	jal	ra,70dc <__mulsi3>
    6a60:	00050493          	mv	s1,a0
    6a64:	000b0593          	mv	a1,s6
    6a68:	000a8513          	mv	a0,s5
    6a6c:	6e4000ef          	jal	ra,7150 <__umodsi3>
    6a70:	01045793          	srli	a5,s0,0x10
    6a74:	01051513          	slli	a0,a0,0x10
    6a78:	00a7e7b3          	or	a5,a5,a0
    6a7c:	000b8413          	mv	s0,s7
    6a80:	0097fe63          	bgeu	a5,s1,6a9c <__divsf3+0x1f4>
    6a84:	00fc07b3          	add	a5,s8,a5
    6a88:	fffb8413          	addi	s0,s7,-1
    6a8c:	0187e863          	bltu	a5,s8,6a9c <__divsf3+0x1f4>
    6a90:	0097f663          	bgeu	a5,s1,6a9c <__divsf3+0x1f4>
    6a94:	ffeb8413          	addi	s0,s7,-2
    6a98:	018787b3          	add	a5,a5,s8
    6a9c:	409784b3          	sub	s1,a5,s1
    6aa0:	000b0593          	mv	a1,s6
    6aa4:	00048513          	mv	a0,s1
    6aa8:	660000ef          	jal	ra,7108 <__hidden___udivsi3>
    6aac:	00050593          	mv	a1,a0
    6ab0:	00050a93          	mv	s5,a0
    6ab4:	00090513          	mv	a0,s2
    6ab8:	624000ef          	jal	ra,70dc <__mulsi3>
    6abc:	00050913          	mv	s2,a0
    6ac0:	000b0593          	mv	a1,s6
    6ac4:	00048513          	mv	a0,s1
    6ac8:	688000ef          	jal	ra,7150 <__umodsi3>
    6acc:	01051793          	slli	a5,a0,0x10
    6ad0:	000a8713          	mv	a4,s5
    6ad4:	0327f263          	bgeu	a5,s2,6af8 <__divsf3+0x250>
    6ad8:	018786b3          	add	a3,a5,s8
    6adc:	00f6b633          	sltu	a2,a3,a5
    6ae0:	fffa8713          	addi	a4,s5,-1
    6ae4:	00068793          	mv	a5,a3
    6ae8:	00061863          	bnez	a2,6af8 <__divsf3+0x250>
    6aec:	0126f663          	bgeu	a3,s2,6af8 <__divsf3+0x250>
    6af0:	ffea8713          	addi	a4,s5,-2
    6af4:	018687b3          	add	a5,a3,s8
    6af8:	01041413          	slli	s0,s0,0x10
    6afc:	412787b3          	sub	a5,a5,s2
    6b00:	00e46433          	or	s0,s0,a4
    6b04:	00f037b3          	snez	a5,a5
    6b08:	00f46433          	or	s0,s0,a5
  FP_PACK_S (r, R);
    6b0c:	07fa0713          	addi	a4,s4,127
    6b10:	0ae05063          	blez	a4,6bb0 <__divsf3+0x308>
    6b14:	00747793          	andi	a5,s0,7
    6b18:	00078a63          	beqz	a5,6b2c <__divsf3+0x284>
    6b1c:	00f47793          	andi	a5,s0,15
    6b20:	00400693          	li	a3,4
    6b24:	00d78463          	beq	a5,a3,6b2c <__divsf3+0x284>
    6b28:	00440413          	addi	s0,s0,4
    6b2c:	080007b7          	lui	a5,0x8000
    6b30:	00f477b3          	and	a5,s0,a5
    6b34:	00078a63          	beqz	a5,6b48 <__divsf3+0x2a0>
    6b38:	f80007b7          	lui	a5,0xf8000
    6b3c:	fff78793          	addi	a5,a5,-1 # f7ffffff <_end_of_memory+0xf7fdffff>
    6b40:	00f47433          	and	s0,s0,a5
    6b44:	080a0713          	addi	a4,s4,128
    6b48:	0fe00793          	li	a5,254
    6b4c:	0ce7cc63          	blt	a5,a4,6c24 <__divsf3+0x37c>
    6b50:	00345793          	srli	a5,s0,0x3
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    6b54:	02c12083          	lw	ra,44(sp)
    6b58:	02812403          	lw	s0,40(sp)
  FP_PACK_S (r, R);
    6b5c:	00979793          	slli	a5,a5,0x9
    6b60:	01771713          	slli	a4,a4,0x17
    6b64:	0097d793          	srli	a5,a5,0x9
    6b68:	01f99513          	slli	a0,s3,0x1f
    6b6c:	00f76733          	or	a4,a4,a5
}
    6b70:	02412483          	lw	s1,36(sp)
    6b74:	02012903          	lw	s2,32(sp)
    6b78:	01c12983          	lw	s3,28(sp)
    6b7c:	01812a03          	lw	s4,24(sp)
    6b80:	01412a83          	lw	s5,20(sp)
    6b84:	01012b03          	lw	s6,16(sp)
    6b88:	00c12b83          	lw	s7,12(sp)
    6b8c:	00812c03          	lw	s8,8(sp)
    6b90:	00a76533          	or	a0,a4,a0
    6b94:	03010113          	addi	sp,sp,48
    6b98:	00008067          	ret
  FP_DIV_S (R, A, B);
    6b9c:	01fa9413          	slli	s0,s5,0x1f
    6ba0:	001ada93          	srli	s5,s5,0x1
    6ba4:	e91ff06f          	j	6a34 <__divsf3+0x18c>
  FP_UNPACK_S (B, b);
    6ba8:	000b0993          	mv	s3,s6
  FP_DIV_S (R, A, B);
    6bac:	e55ff06f          	j	6a00 <__divsf3+0x158>
  FP_PACK_S (r, R);
    6bb0:	00100693          	li	a3,1
    6bb4:	00070c63          	beqz	a4,6bcc <__divsf3+0x324>
    6bb8:	40e686b3          	sub	a3,a3,a4
    6bbc:	01b00613          	li	a2,27
    6bc0:	00000793          	li	a5,0
    6bc4:	00000713          	li	a4,0
    6bc8:	f8d646e3          	blt	a2,a3,6b54 <__divsf3+0x2ac>
    6bcc:	09ea0493          	addi	s1,s4,158
    6bd0:	00d456b3          	srl	a3,s0,a3
    6bd4:	00941433          	sll	s0,s0,s1
    6bd8:	00803433          	snez	s0,s0
    6bdc:	0086e7b3          	or	a5,a3,s0
    6be0:	0077f713          	andi	a4,a5,7
    6be4:	00070a63          	beqz	a4,6bf8 <__divsf3+0x350>
    6be8:	00f7f713          	andi	a4,a5,15
    6bec:	00400693          	li	a3,4
    6bf0:	00d70463          	beq	a4,a3,6bf8 <__divsf3+0x350>
    6bf4:	00478793          	addi	a5,a5,4
    6bf8:	04000737          	lui	a4,0x4000
    6bfc:	00e7f733          	and	a4,a5,a4
    6c00:	0037d793          	srli	a5,a5,0x3
    6c04:	f40708e3          	beqz	a4,6b54 <__divsf3+0x2ac>
    6c08:	00000793          	li	a5,0
    6c0c:	00100713          	li	a4,1
    6c10:	f45ff06f          	j	6b54 <__divsf3+0x2ac>
    6c14:	004007b7          	lui	a5,0x400
    6c18:	0ff00713          	li	a4,255
    6c1c:	00000993          	li	s3,0
    6c20:	f35ff06f          	j	6b54 <__divsf3+0x2ac>
    6c24:	00000793          	li	a5,0
    6c28:	0ff00713          	li	a4,255
    6c2c:	f29ff06f          	j	6b54 <__divsf3+0x2ac>

00006c30 <__mulsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__mulsf3 (SFtype a, SFtype b)
{
    6c30:	fe010113          	addi	sp,sp,-32
    6c34:	01212823          	sw	s2,16(sp)
    6c38:	01755913          	srli	s2,a0,0x17
    6c3c:	00912a23          	sw	s1,20(sp)
    6c40:	01312623          	sw	s3,12(sp)
    6c44:	01512223          	sw	s5,4(sp)
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_S (A, a);
    6c48:	00951493          	slli	s1,a0,0x9
{
    6c4c:	00112e23          	sw	ra,28(sp)
    6c50:	00812c23          	sw	s0,24(sp)
    6c54:	01412423          	sw	s4,8(sp)
    6c58:	0ff97913          	zext.b	s2,s2
    6c5c:	00058a93          	mv	s5,a1
  FP_UNPACK_S (A, a);
    6c60:	0094d493          	srli	s1,s1,0x9
    6c64:	01f55993          	srli	s3,a0,0x1f
    6c68:	1a090e63          	beqz	s2,6e24 <__mulsf3+0x1f4>
    6c6c:	0ff00793          	li	a5,255
    6c70:	1cf90a63          	beq	s2,a5,6e44 <__mulsf3+0x214>
    6c74:	00349493          	slli	s1,s1,0x3
    6c78:	040007b7          	lui	a5,0x4000
    6c7c:	00f4e4b3          	or	s1,s1,a5
    6c80:	f8190913          	addi	s2,s2,-127
    6c84:	00000a13          	li	s4,0
  FP_UNPACK_S (B, b);
    6c88:	017ad793          	srli	a5,s5,0x17
    6c8c:	009a9413          	slli	s0,s5,0x9
    6c90:	0ff7f793          	zext.b	a5,a5
    6c94:	00945413          	srli	s0,s0,0x9
    6c98:	01fada93          	srli	s5,s5,0x1f
    6c9c:	1c078463          	beqz	a5,6e64 <__mulsf3+0x234>
    6ca0:	0ff00713          	li	a4,255
    6ca4:	1ee78063          	beq	a5,a4,6e84 <__mulsf3+0x254>
    6ca8:	00341413          	slli	s0,s0,0x3
    6cac:	04000737          	lui	a4,0x4000
    6cb0:	00e46433          	or	s0,s0,a4
    6cb4:	f8178793          	addi	a5,a5,-127 # 3ffff81 <_end_of_memory+0x3fdff81>
    6cb8:	00000713          	li	a4,0
  FP_MUL_S (R, A, B);
    6cbc:	00f90933          	add	s2,s2,a5
    6cc0:	002a1793          	slli	a5,s4,0x2
    6cc4:	00e7e7b3          	or	a5,a5,a4
    6cc8:	00a00693          	li	a3,10
    6ccc:	0159c833          	xor	a6,s3,s5
    6cd0:	00190893          	addi	a7,s2,1
    6cd4:	20f6cc63          	blt	a3,a5,6eec <__mulsf3+0x2bc>
    6cd8:	00200693          	li	a3,2
    6cdc:	1cf6c463          	blt	a3,a5,6ea4 <__mulsf3+0x274>
    6ce0:	fff78793          	addi	a5,a5,-1
    6ce4:	00100693          	li	a3,1
    6ce8:	1ef6f063          	bgeu	a3,a5,6ec8 <__mulsf3+0x298>
    6cec:	00010eb7          	lui	t4,0x10
    6cf0:	fffe8313          	addi	t1,t4,-1 # ffff <_gp+0x1007>
    6cf4:	0104df93          	srli	t6,s1,0x10
    6cf8:	01045f13          	srli	t5,s0,0x10
    6cfc:	0064f4b3          	and	s1,s1,t1
    6d00:	00647433          	and	s0,s0,t1
    6d04:	00048513          	mv	a0,s1
    6d08:	00040593          	mv	a1,s0
    6d0c:	3d0000ef          	jal	ra,70dc <__mulsi3>
    6d10:	00050713          	mv	a4,a0
    6d14:	000f0593          	mv	a1,t5
    6d18:	00048513          	mv	a0,s1
    6d1c:	3c0000ef          	jal	ra,70dc <__mulsi3>
    6d20:	00050793          	mv	a5,a0
    6d24:	00040593          	mv	a1,s0
    6d28:	000f8513          	mv	a0,t6
    6d2c:	3b0000ef          	jal	ra,70dc <__mulsi3>
    6d30:	00050e13          	mv	t3,a0
    6d34:	000f0593          	mv	a1,t5
    6d38:	000f8513          	mv	a0,t6
    6d3c:	3a0000ef          	jal	ra,70dc <__mulsi3>
    6d40:	01075413          	srli	s0,a4,0x10
    6d44:	01c787b3          	add	a5,a5,t3
    6d48:	00f40433          	add	s0,s0,a5
    6d4c:	00050693          	mv	a3,a0
    6d50:	01c47463          	bgeu	s0,t3,6d58 <__mulsf3+0x128>
    6d54:	01d506b3          	add	a3,a0,t4
    6d58:	006477b3          	and	a5,s0,t1
    6d5c:	00677733          	and	a4,a4,t1
    6d60:	01079793          	slli	a5,a5,0x10
    6d64:	00e787b3          	add	a5,a5,a4
    6d68:	00679713          	slli	a4,a5,0x6
    6d6c:	01045413          	srli	s0,s0,0x10
    6d70:	00e03733          	snez	a4,a4
    6d74:	01a7d793          	srli	a5,a5,0x1a
    6d78:	00d40433          	add	s0,s0,a3
    6d7c:	00f767b3          	or	a5,a4,a5
    6d80:	00641413          	slli	s0,s0,0x6
    6d84:	00f46433          	or	s0,s0,a5
    6d88:	080007b7          	lui	a5,0x8000
    6d8c:	00f477b3          	and	a5,s0,a5
    6d90:	16078e63          	beqz	a5,6f0c <__mulsf3+0x2dc>
    6d94:	00145793          	srli	a5,s0,0x1
    6d98:	00147413          	andi	s0,s0,1
    6d9c:	0087e433          	or	s0,a5,s0
  FP_PACK_S (r, R);
    6da0:	07f88513          	addi	a0,a7,127
    6da4:	16a05863          	blez	a0,6f14 <__mulsf3+0x2e4>
    6da8:	00747793          	andi	a5,s0,7
    6dac:	00078a63          	beqz	a5,6dc0 <__mulsf3+0x190>
    6db0:	00f47793          	andi	a5,s0,15
    6db4:	00400713          	li	a4,4
    6db8:	00e78463          	beq	a5,a4,6dc0 <__mulsf3+0x190>
    6dbc:	00440413          	addi	s0,s0,4
    6dc0:	080007b7          	lui	a5,0x8000
    6dc4:	00f477b3          	and	a5,s0,a5
    6dc8:	00078a63          	beqz	a5,6ddc <__mulsf3+0x1ac>
    6dcc:	f80007b7          	lui	a5,0xf8000
    6dd0:	fff78793          	addi	a5,a5,-1 # f7ffffff <_end_of_memory+0xf7fdffff>
    6dd4:	00f47433          	and	s0,s0,a5
    6dd8:	08088513          	addi	a0,a7,128
    6ddc:	0fe00793          	li	a5,254
    6de0:	1aa7c463          	blt	a5,a0,6f88 <__mulsf3+0x358>
    6de4:	00345793          	srli	a5,s0,0x3
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    6de8:	01c12083          	lw	ra,28(sp)
    6dec:	01812403          	lw	s0,24(sp)
  FP_PACK_S (r, R);
    6df0:	00979793          	slli	a5,a5,0x9
    6df4:	01751513          	slli	a0,a0,0x17
    6df8:	0097d793          	srli	a5,a5,0x9
    6dfc:	00f56533          	or	a0,a0,a5
    6e00:	01f81813          	slli	a6,a6,0x1f
}
    6e04:	01412483          	lw	s1,20(sp)
    6e08:	01012903          	lw	s2,16(sp)
    6e0c:	00c12983          	lw	s3,12(sp)
    6e10:	00812a03          	lw	s4,8(sp)
    6e14:	00412a83          	lw	s5,4(sp)
    6e18:	01056533          	or	a0,a0,a6
    6e1c:	02010113          	addi	sp,sp,32
    6e20:	00008067          	ret
  FP_UNPACK_S (A, a);
    6e24:	02048a63          	beqz	s1,6e58 <__mulsf3+0x228>
    6e28:	00048513          	mv	a0,s1
    6e2c:	388000ef          	jal	ra,71b4 <__clzsi2>
    6e30:	ffb50793          	addi	a5,a0,-5
    6e34:	f8a00913          	li	s2,-118
    6e38:	00f494b3          	sll	s1,s1,a5
    6e3c:	40a90933          	sub	s2,s2,a0
    6e40:	e45ff06f          	j	6c84 <__mulsf3+0x54>
    6e44:	0ff00913          	li	s2,255
    6e48:	00300a13          	li	s4,3
    6e4c:	e2049ee3          	bnez	s1,6c88 <__mulsf3+0x58>
    6e50:	00200a13          	li	s4,2
    6e54:	e35ff06f          	j	6c88 <__mulsf3+0x58>
    6e58:	00000913          	li	s2,0
    6e5c:	00100a13          	li	s4,1
    6e60:	e29ff06f          	j	6c88 <__mulsf3+0x58>
  FP_UNPACK_S (B, b);
    6e64:	02040a63          	beqz	s0,6e98 <__mulsf3+0x268>
    6e68:	00040513          	mv	a0,s0
    6e6c:	348000ef          	jal	ra,71b4 <__clzsi2>
    6e70:	ffb50793          	addi	a5,a0,-5
    6e74:	00f41433          	sll	s0,s0,a5
    6e78:	f8a00793          	li	a5,-118
    6e7c:	40a787b3          	sub	a5,a5,a0
    6e80:	e39ff06f          	j	6cb8 <__mulsf3+0x88>
    6e84:	0ff00793          	li	a5,255
    6e88:	00300713          	li	a4,3
    6e8c:	e20418e3          	bnez	s0,6cbc <__mulsf3+0x8c>
    6e90:	00200713          	li	a4,2
    6e94:	e29ff06f          	j	6cbc <__mulsf3+0x8c>
    6e98:	00000793          	li	a5,0
    6e9c:	00100713          	li	a4,1
    6ea0:	e1dff06f          	j	6cbc <__mulsf3+0x8c>
    6ea4:	00100693          	li	a3,1
    6ea8:	00f697b3          	sll	a5,a3,a5
  FP_MUL_S (R, A, B);
    6eac:	5307f693          	andi	a3,a5,1328
    6eb0:	04069863          	bnez	a3,6f00 <__mulsf3+0x2d0>
    6eb4:	2407f693          	andi	a3,a5,576
    6eb8:	0c069063          	bnez	a3,6f78 <__mulsf3+0x348>
    6ebc:	0887f793          	andi	a5,a5,136
    6ec0:	e20786e3          	beqz	a5,6cec <__mulsf3+0xbc>
  FP_UNPACK_S (B, b);
    6ec4:	000a8813          	mv	a6,s5
  FP_PACK_S (r, R);
    6ec8:	00200793          	li	a5,2
    6ecc:	0af70e63          	beq	a4,a5,6f88 <__mulsf3+0x358>
    6ed0:	00300793          	li	a5,3
    6ed4:	0af70263          	beq	a4,a5,6f78 <__mulsf3+0x348>
    6ed8:	00100793          	li	a5,1
    6edc:	ecf712e3          	bne	a4,a5,6da0 <__mulsf3+0x170>
    6ee0:	00000793          	li	a5,0
    6ee4:	00000513          	li	a0,0
    6ee8:	f01ff06f          	j	6de8 <__mulsf3+0x1b8>
  FP_MUL_S (R, A, B);
    6eec:	00f00693          	li	a3,15
    6ef0:	08d78463          	beq	a5,a3,6f78 <__mulsf3+0x348>
    6ef4:	00b00693          	li	a3,11
  FP_UNPACK_S (A, a);
    6ef8:	00098813          	mv	a6,s3
  FP_MUL_S (R, A, B);
    6efc:	fcd784e3          	beq	a5,a3,6ec4 <__mulsf3+0x294>
    6f00:	00048413          	mv	s0,s1
    6f04:	000a0713          	mv	a4,s4
    6f08:	fc1ff06f          	j	6ec8 <__mulsf3+0x298>
    6f0c:	00090893          	mv	a7,s2
    6f10:	e91ff06f          	j	6da0 <__mulsf3+0x170>
  FP_PACK_S (r, R);
    6f14:	00100713          	li	a4,1
    6f18:	00050c63          	beqz	a0,6f30 <__mulsf3+0x300>
    6f1c:	40a70733          	sub	a4,a4,a0
    6f20:	01b00693          	li	a3,27
    6f24:	00000793          	li	a5,0
    6f28:	00000513          	li	a0,0
    6f2c:	eae6cee3          	blt	a3,a4,6de8 <__mulsf3+0x1b8>
    6f30:	09e88893          	addi	a7,a7,158
    6f34:	00e45733          	srl	a4,s0,a4
    6f38:	01141433          	sll	s0,s0,a7
    6f3c:	00803433          	snez	s0,s0
    6f40:	008767b3          	or	a5,a4,s0
    6f44:	0077f713          	andi	a4,a5,7
    6f48:	00070a63          	beqz	a4,6f5c <__mulsf3+0x32c>
    6f4c:	00f7f713          	andi	a4,a5,15
    6f50:	00400693          	li	a3,4
    6f54:	00d70463          	beq	a4,a3,6f5c <__mulsf3+0x32c>
    6f58:	00478793          	addi	a5,a5,4
    6f5c:	04000737          	lui	a4,0x4000
    6f60:	00e7f733          	and	a4,a5,a4
    6f64:	0037d793          	srli	a5,a5,0x3
    6f68:	f6070ee3          	beqz	a4,6ee4 <__mulsf3+0x2b4>
    6f6c:	00000793          	li	a5,0
    6f70:	00100513          	li	a0,1
    6f74:	e75ff06f          	j	6de8 <__mulsf3+0x1b8>
    6f78:	004007b7          	lui	a5,0x400
    6f7c:	0ff00513          	li	a0,255
    6f80:	00000813          	li	a6,0
    6f84:	e65ff06f          	j	6de8 <__mulsf3+0x1b8>
    6f88:	00000793          	li	a5,0
    6f8c:	0ff00513          	li	a0,255
    6f90:	e59ff06f          	j	6de8 <__mulsf3+0x1b8>

00006f94 <__fixunssfsi>:
  FP_DECL_EX;
  FP_DECL_S (A);
  USItype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_S (A, a);
    6f94:	01755793          	srli	a5,a0,0x17
    6f98:	00800637          	lui	a2,0x800
    6f9c:	fff60693          	addi	a3,a2,-1 # 7fffff <_end_of_memory+0x7dffff>
    6fa0:	0ff7f793          	zext.b	a5,a5
  FP_TO_INT_S (r, A, SI_BITS, 0);
    6fa4:	07e00593          	li	a1,126
  FP_UNPACK_RAW_S (A, a);
    6fa8:	00a6f6b3          	and	a3,a3,a0
    6fac:	01f55713          	srli	a4,a0,0x1f
  FP_TO_INT_S (r, A, SI_BITS, 0);
    6fb0:	00000513          	li	a0,0
    6fb4:	02f5de63          	bge	a1,a5,6ff0 <__fixunssfsi+0x5c>
    6fb8:	02071c63          	bnez	a4,6ff0 <__fixunssfsi+0x5c>
    6fbc:	09e00713          	li	a4,158
    6fc0:	fff00513          	li	a0,-1
    6fc4:	02f74663          	blt	a4,a5,6ff0 <__fixunssfsi+0x5c>
    6fc8:	09500713          	li	a4,149
    6fcc:	00c6e533          	or	a0,a3,a2
    6fd0:	00f75863          	bge	a4,a5,6fe0 <__fixunssfsi+0x4c>
    6fd4:	f6a78793          	addi	a5,a5,-150 # 3fff6a <_end_of_memory+0x3dff6a>
    6fd8:	00f51533          	sll	a0,a0,a5
    6fdc:	00008067          	ret
    6fe0:	09600713          	li	a4,150
    6fe4:	40f707b3          	sub	a5,a4,a5
    6fe8:	00f55533          	srl	a0,a0,a5
    6fec:	00008067          	ret
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    6ff0:	00008067          	ret

00006ff4 <__floatunsisf>:
#include "soft-fp.h"
#include "single.h"

SFtype
__floatunsisf (USItype i)
{
    6ff4:	ff010113          	addi	sp,sp,-16
    6ff8:	00812423          	sw	s0,8(sp)
    6ffc:	00112623          	sw	ra,12(sp)
    7000:	00050413          	mv	s0,a0
  FP_DECL_EX;
  FP_DECL_S (A);
  SFtype a;

  FP_INIT_ROUNDMODE;
  FP_FROM_INT_S (A, i, SI_BITS, USItype);
    7004:	00000793          	li	a5,0
    7008:	02050463          	beqz	a0,7030 <__floatunsisf+0x3c>
    700c:	1a8000ef          	jal	ra,71b4 <__clzsi2>
    7010:	09e00793          	li	a5,158
    7014:	40a787b3          	sub	a5,a5,a0
    7018:	09600713          	li	a4,150
    701c:	02f74a63          	blt	a4,a5,7050 <__floatunsisf+0x5c>
    7020:	00800713          	li	a4,8
    7024:	0ae50863          	beq	a0,a4,70d4 <__floatunsisf+0xe0>
    7028:	ff850513          	addi	a0,a0,-8
    702c:	00a41433          	sll	s0,s0,a0
  FP_PACK_RAW_S (a, A);
    7030:	00941413          	slli	s0,s0,0x9
    7034:	00945413          	srli	s0,s0,0x9
    7038:	01779513          	slli	a0,a5,0x17
  FP_HANDLE_EXCEPTIONS;

  return a;
}
    703c:	00c12083          	lw	ra,12(sp)
    7040:	00856533          	or	a0,a0,s0
    7044:	00812403          	lw	s0,8(sp)
    7048:	01010113          	addi	sp,sp,16
    704c:	00008067          	ret
  FP_FROM_INT_S (A, i, SI_BITS, USItype);
    7050:	09900713          	li	a4,153
    7054:	06f75663          	bge	a4,a5,70c0 <__floatunsisf+0xcc>
    7058:	01b50713          	addi	a4,a0,27
    705c:	00500693          	li	a3,5
    7060:	00e41733          	sll	a4,s0,a4
    7064:	40a686b3          	sub	a3,a3,a0
    7068:	00e03733          	snez	a4,a4
    706c:	00d45433          	srl	s0,s0,a3
    7070:	00876433          	or	s0,a4,s0
    7074:	fc000737          	lui	a4,0xfc000
    7078:	fff70713          	addi	a4,a4,-1 # fbffffff <_end_of_memory+0xfbfdffff>
    707c:	00747693          	andi	a3,s0,7
    7080:	00e47733          	and	a4,s0,a4
    7084:	00068a63          	beqz	a3,7098 <__floatunsisf+0xa4>
    7088:	00f47413          	andi	s0,s0,15
    708c:	00400693          	li	a3,4
    7090:	00d40463          	beq	s0,a3,7098 <__floatunsisf+0xa4>
    7094:	00470713          	addi	a4,a4,4
    7098:	040006b7          	lui	a3,0x4000
    709c:	00d776b3          	and	a3,a4,a3
    70a0:	00068c63          	beqz	a3,70b8 <__floatunsisf+0xc4>
    70a4:	fc0007b7          	lui	a5,0xfc000
    70a8:	fff78793          	addi	a5,a5,-1 # fbffffff <_end_of_memory+0xfbfdffff>
    70ac:	00f77733          	and	a4,a4,a5
    70b0:	09f00793          	li	a5,159
    70b4:	40a787b3          	sub	a5,a5,a0
    70b8:	00375413          	srli	s0,a4,0x3
    70bc:	f75ff06f          	j	7030 <__floatunsisf+0x3c>
    70c0:	00500693          	li	a3,5
    70c4:	ffb50713          	addi	a4,a0,-5
    70c8:	fad506e3          	beq	a0,a3,7074 <__floatunsisf+0x80>
    70cc:	00e41433          	sll	s0,s0,a4
    70d0:	fa5ff06f          	j	7074 <__floatunsisf+0x80>
    70d4:	09600793          	li	a5,150
    70d8:	f59ff06f          	j	7030 <__floatunsisf+0x3c>

000070dc <__mulsi3>:
/* Our RV64 64-bit routine is equivalent to our RV32 32-bit routine.  */
# define __muldi3 __mulsi3
#endif

FUNC_BEGIN (__muldi3)
  mv     a2, a0
    70dc:	00050613          	mv	a2,a0
  li     a0, 0
    70e0:	00000513          	li	a0,0
.L1:
  andi   a3, a1, 1
    70e4:	0015f693          	andi	a3,a1,1
  beqz   a3, .L2
    70e8:	00068463          	beqz	a3,70f0 <__mulsi3+0x14>
  add    a0, a0, a2
    70ec:	00c50533          	add	a0,a0,a2
.L2:
  srli   a1, a1, 1
    70f0:	0015d593          	srli	a1,a1,0x1
  slli   a2, a2, 1
    70f4:	00161613          	slli	a2,a2,0x1
  bnez   a1, .L1
    70f8:	fe0596e3          	bnez	a1,70e4 <__mulsi3+0x8>
  ret
    70fc:	00008067          	ret

00007100 <__divsi3>:
  li    t0, -1
  beq   a1, t0, .L20
#endif

FUNC_BEGIN (__divdi3)
  bltz  a0, .L10
    7100:	06054063          	bltz	a0,7160 <__umodsi3+0x10>
  bltz  a1, .L11
    7104:	0605c663          	bltz	a1,7170 <__umodsi3+0x20>

00007108 <__hidden___udivsi3>:
  /* Since the quotient is positive, fall into __udivdi3.  */

FUNC_BEGIN (__udivdi3)
  mv    a2, a1
    7108:	00058613          	mv	a2,a1
  mv    a1, a0
    710c:	00050593          	mv	a1,a0
  li    a0, -1
    7110:	fff00513          	li	a0,-1
  beqz  a2, .L5
    7114:	02060c63          	beqz	a2,714c <__hidden___udivsi3+0x44>
  li    a3, 1
    7118:	00100693          	li	a3,1
  bgeu  a2, a1, .L2
    711c:	00b67a63          	bgeu	a2,a1,7130 <__hidden___udivsi3+0x28>
.L1:
  blez  a2, .L2
    7120:	00c05863          	blez	a2,7130 <__hidden___udivsi3+0x28>
  slli  a2, a2, 1
    7124:	00161613          	slli	a2,a2,0x1
  slli  a3, a3, 1
    7128:	00169693          	slli	a3,a3,0x1
  bgtu  a1, a2, .L1
    712c:	feb66ae3          	bltu	a2,a1,7120 <__hidden___udivsi3+0x18>
.L2:
  li    a0, 0
    7130:	00000513          	li	a0,0
.L3:
  bltu  a1, a2, .L4
    7134:	00c5e663          	bltu	a1,a2,7140 <__hidden___udivsi3+0x38>
  sub   a1, a1, a2
    7138:	40c585b3          	sub	a1,a1,a2
  or    a0, a0, a3
    713c:	00d56533          	or	a0,a0,a3
.L4:
  srli  a3, a3, 1
    7140:	0016d693          	srli	a3,a3,0x1
  srli  a2, a2, 1
    7144:	00165613          	srli	a2,a2,0x1
  bnez  a3, .L3
    7148:	fe0696e3          	bnez	a3,7134 <__hidden___udivsi3+0x2c>
.L5:
  ret
    714c:	00008067          	ret

00007150 <__umodsi3>:
FUNC_END (__udivdi3)
HIDDEN_DEF (__udivdi3)

FUNC_BEGIN (__umoddi3)
  /* Call __udivdi3(a0, a1), then return the remainder, which is in a1.  */
  move  t0, ra
    7150:	00008293          	mv	t0,ra
  jal   HIDDEN_JUMPTARGET(__udivdi3)
    7154:	fb5ff0ef          	jal	ra,7108 <__hidden___udivsi3>
  move  a0, a1
    7158:	00058513          	mv	a0,a1
  jr    t0
    715c:	00028067          	jr	t0
FUNC_END (__umoddi3)

  /* Handle negative arguments to __divdi3.  */
.L10:
  neg   a0, a0
    7160:	40a00533          	neg	a0,a0
  /* Zero is handled as a negative so that the result will not be inverted.  */
  bgtz  a1, .L12     /* Compute __udivdi3(-a0, a1), then negate the result.  */
    7164:	00b04863          	bgtz	a1,7174 <__umodsi3+0x24>

  neg   a1, a1
    7168:	40b005b3          	neg	a1,a1
  j     HIDDEN_JUMPTARGET(__udivdi3)     /* Compute __udivdi3(-a0, -a1).  */
    716c:	f9dff06f          	j	7108 <__hidden___udivsi3>
.L11:                /* Compute __udivdi3(a0, -a1), then negate the result.  */
  neg   a1, a1
    7170:	40b005b3          	neg	a1,a1
.L12:
  move  t0, ra
    7174:	00008293          	mv	t0,ra
  jal   HIDDEN_JUMPTARGET(__udivdi3)
    7178:	f91ff0ef          	jal	ra,7108 <__hidden___udivsi3>
  neg   a0, a0
    717c:	40a00533          	neg	a0,a0
  jr    t0
    7180:	00028067          	jr	t0

00007184 <__modsi3>:
FUNC_END (__divdi3)

FUNC_BEGIN (__moddi3)
  move   t0, ra
    7184:	00008293          	mv	t0,ra
  bltz   a1, .L31
    7188:	0005ca63          	bltz	a1,719c <__modsi3+0x18>
  bltz   a0, .L32
    718c:	00054c63          	bltz	a0,71a4 <__modsi3+0x20>
.L30:
  jal    HIDDEN_JUMPTARGET(__udivdi3)    /* The dividend is not negative.  */
    7190:	f79ff0ef          	jal	ra,7108 <__hidden___udivsi3>
  move   a0, a1
    7194:	00058513          	mv	a0,a1
  jr     t0
    7198:	00028067          	jr	t0
.L31:
  neg    a1, a1
    719c:	40b005b3          	neg	a1,a1
  bgez   a0, .L30
    71a0:	fe0558e3          	bgez	a0,7190 <__modsi3+0xc>
.L32:
  neg    a0, a0
    71a4:	40a00533          	neg	a0,a0
  jal    HIDDEN_JUMPTARGET(__udivdi3)    /* The dividend is hella negative.  */
    71a8:	f61ff0ef          	jal	ra,7108 <__hidden___udivsi3>
  neg    a0, a1
    71ac:	40b00533          	neg	a0,a1
  jr     t0
    71b0:	00028067          	jr	t0

000071b4 <__clzsi2>:
int
__clzSI2 (UWtype x)
{
  Wtype ret;

  count_leading_zeros (ret, x);
    71b4:	000107b7          	lui	a5,0x10
    71b8:	02f57a63          	bgeu	a0,a5,71ec <__clzsi2+0x38>
    71bc:	10053793          	sltiu	a5,a0,256
    71c0:	0017c793          	xori	a5,a5,1
    71c4:	00379793          	slli	a5,a5,0x3
    71c8:	0000e737          	lui	a4,0xe
    71cc:	02000693          	li	a3,32
    71d0:	40f686b3          	sub	a3,a3,a5
    71d4:	00f55533          	srl	a0,a0,a5
    71d8:	5fc70793          	addi	a5,a4,1532 # e5fc <__clz_tab>
    71dc:	00a787b3          	add	a5,a5,a0
    71e0:	0007c503          	lbu	a0,0(a5) # 10000 <_gp+0x1008>

  return ret;
}
    71e4:	40a68533          	sub	a0,a3,a0
    71e8:	00008067          	ret
  count_leading_zeros (ret, x);
    71ec:	01000737          	lui	a4,0x1000
    71f0:	01000793          	li	a5,16
    71f4:	fce56ae3          	bltu	a0,a4,71c8 <__clzsi2+0x14>
    71f8:	01800793          	li	a5,24
    71fc:	fcdff06f          	j	71c8 <__clzsi2+0x14>

00007200 <memset>:
    7200:	00f00313          	li	t1,15
    7204:	00050713          	mv	a4,a0
    7208:	02c37e63          	bgeu	t1,a2,7244 <memset+0x44>
    720c:	00f77793          	andi	a5,a4,15
    7210:	0a079063          	bnez	a5,72b0 <memset+0xb0>
    7214:	08059263          	bnez	a1,7298 <memset+0x98>
    7218:	ff067693          	andi	a3,a2,-16
    721c:	00f67613          	andi	a2,a2,15
    7220:	00e686b3          	add	a3,a3,a4
    7224:	00b72023          	sw	a1,0(a4) # 1000000 <_end_of_memory+0xfe0000>
    7228:	00b72223          	sw	a1,4(a4)
    722c:	00b72423          	sw	a1,8(a4)
    7230:	00b72623          	sw	a1,12(a4)
    7234:	01070713          	addi	a4,a4,16
    7238:	fed766e3          	bltu	a4,a3,7224 <memset+0x24>
    723c:	00061463          	bnez	a2,7244 <memset+0x44>
    7240:	00008067          	ret
    7244:	40c306b3          	sub	a3,t1,a2
    7248:	00269693          	slli	a3,a3,0x2
    724c:	00000297          	auipc	t0,0x0
    7250:	005686b3          	add	a3,a3,t0
    7254:	00c68067          	jr	12(a3) # 400000c <_end_of_memory+0x3fe000c>
    7258:	00b70723          	sb	a1,14(a4)
    725c:	00b706a3          	sb	a1,13(a4)
    7260:	00b70623          	sb	a1,12(a4)
    7264:	00b705a3          	sb	a1,11(a4)
    7268:	00b70523          	sb	a1,10(a4)
    726c:	00b704a3          	sb	a1,9(a4)
    7270:	00b70423          	sb	a1,8(a4)
    7274:	00b703a3          	sb	a1,7(a4)
    7278:	00b70323          	sb	a1,6(a4)
    727c:	00b702a3          	sb	a1,5(a4)
    7280:	00b70223          	sb	a1,4(a4)
    7284:	00b701a3          	sb	a1,3(a4)
    7288:	00b70123          	sb	a1,2(a4)
    728c:	00b700a3          	sb	a1,1(a4)
    7290:	00b70023          	sb	a1,0(a4)
    7294:	00008067          	ret
    7298:	0ff5f593          	zext.b	a1,a1
    729c:	00859693          	slli	a3,a1,0x8
    72a0:	00d5e5b3          	or	a1,a1,a3
    72a4:	01059693          	slli	a3,a1,0x10
    72a8:	00d5e5b3          	or	a1,a1,a3
    72ac:	f6dff06f          	j	7218 <memset+0x18>
    72b0:	00279693          	slli	a3,a5,0x2
    72b4:	00000297          	auipc	t0,0x0
    72b8:	005686b3          	add	a3,a3,t0
    72bc:	00008293          	mv	t0,ra
    72c0:	fa0680e7          	jalr	-96(a3)
    72c4:	00028093          	mv	ra,t0
    72c8:	ff078793          	addi	a5,a5,-16
    72cc:	40f70733          	sub	a4,a4,a5
    72d0:	00f60633          	add	a2,a2,a5
    72d4:	f6c378e3          	bgeu	t1,a2,7244 <memset+0x44>
    72d8:	f3dff06f          	j	7214 <memset+0x14>

Disassembly of section .text.startup:

000072dc <main>:

int main(void)
{
    72dc:	ff010113          	addi	sp,sp,-16
    72e0:	01212023          	sw	s2,0(sp)
  unsigned int i;
  int r;

  for(i=0;i<NTESTS;i++) {
    72e4:	00002937          	lui	s2,0x2
{
    72e8:	00912223          	sw	s1,4(sp)
    72ec:	00112623          	sw	ra,12(sp)
    72f0:	00812423          	sw	s0,8(sp)
  for(i=0;i<NTESTS;i++) {
    72f4:	00000493          	li	s1,0
    72f8:	71090913          	addi	s2,s2,1808 # 2710 <KeccakF1600_StatePermute+0x520>
    72fc:	0080006f          	j	7304 <main+0x28>
    7300:	03248663          	beq	s1,s2,732c <main+0x50>
    r  = test_keys(i);
    7304:	00048513          	mv	a0,s1
    7308:	be1fe0ef          	jal	ra,5ee8 <test_keys>
    730c:	00050413          	mv	s0,a0
    r |= test_invalid_sk_a();
    7310:	ee9fe0ef          	jal	ra,61f8 <test_invalid_sk_a>
    7314:	00a46433          	or	s0,s0,a0
    r |= test_invalid_ciphertext();
    7318:	fd5fe0ef          	jal	ra,62ec <test_invalid_ciphertext>
    731c:	00a46533          	or	a0,s0,a0
  for(i=0;i<NTESTS;i++) {
    7320:	00148493          	addi	s1,s1,1
    if(r)
    7324:	fc050ee3          	beqz	a0,7300 <main+0x24>
      return 1;
    7328:	00100513          	li	a0,1
  printf("CRYPTO_SECRETKEYBYTES:  %d\n",CRYPTO_SECRETKEYBYTES);
  printf("CRYPTO_PUBLICKEYBYTES:  %d\n",CRYPTO_PUBLICKEYBYTES);
  printf("CRYPTO_CIPHERTEXTBYTES: %d\n",CRYPTO_CIPHERTEXTBYTES);
*/
  return 0;
}
    732c:	00c12083          	lw	ra,12(sp)
    7330:	00812403          	lw	s0,8(sp)
    7334:	00412483          	lw	s1,4(sp)
    7338:	00012903          	lw	s2,0(sp)
    733c:	01010113          	addi	sp,sp,16
    7340:	00008067          	ret

Disassembly of section .text.memcmp:

00007344 <memcmp>:
    7344:	00300793          	li	a5,3
    7348:	02c7fc63          	bgeu	a5,a2,7380 <memcmp+0x3c>
    734c:	00b567b3          	or	a5,a0,a1
    7350:	0037f793          	andi	a5,a5,3
    7354:	00300693          	li	a3,3
    7358:	00078e63          	beqz	a5,7374 <memcmp+0x30>
    735c:	fff60693          	addi	a3,a2,-1
    7360:	0280006f          	j	7388 <memcmp+0x44>
    7364:	ffc60613          	addi	a2,a2,-4
    7368:	00450513          	addi	a0,a0,4
    736c:	00458593          	addi	a1,a1,4 # 4000004 <_end_of_memory+0x3fe0004>
    7370:	00c6f863          	bgeu	a3,a2,7380 <memcmp+0x3c>
    7374:	00052703          	lw	a4,0(a0)
    7378:	0005a783          	lw	a5,0(a1)
    737c:	fef704e3          	beq	a4,a5,7364 <memcmp+0x20>
    7380:	fff60693          	addi	a3,a2,-1
    7384:	02060863          	beqz	a2,73b4 <memcmp+0x70>
    7388:	00168693          	addi	a3,a3,1
    738c:	00d586b3          	add	a3,a1,a3
    7390:	0080006f          	j	7398 <memcmp+0x54>
    7394:	02d58063          	beq	a1,a3,73b4 <memcmp+0x70>
    7398:	00054783          	lbu	a5,0(a0)
    739c:	0005c703          	lbu	a4,0(a1)
    73a0:	00150513          	addi	a0,a0,1
    73a4:	00158593          	addi	a1,a1,1
    73a8:	fee786e3          	beq	a5,a4,7394 <memcmp+0x50>
    73ac:	40e78533          	sub	a0,a5,a4
    73b0:	00008067          	ret
    73b4:	00000513          	li	a0,0
    73b8:	00008067          	ret

Disassembly of section .text.memcpy:

000073bc <memcpy>:
    73bc:	00b547b3          	xor	a5,a0,a1
    73c0:	0037f793          	andi	a5,a5,3
    73c4:	00c508b3          	add	a7,a0,a2
    73c8:	06079463          	bnez	a5,7430 <memcpy+0x74>
    73cc:	00300793          	li	a5,3
    73d0:	06c7f063          	bgeu	a5,a2,7430 <memcpy+0x74>
    73d4:	00357793          	andi	a5,a0,3
    73d8:	00050713          	mv	a4,a0
    73dc:	06079a63          	bnez	a5,7450 <memcpy+0x94>
    73e0:	ffc8f613          	andi	a2,a7,-4
    73e4:	40e606b3          	sub	a3,a2,a4
    73e8:	02000793          	li	a5,32
    73ec:	08d7ce63          	blt	a5,a3,7488 <memcpy+0xcc>
    73f0:	00058693          	mv	a3,a1
    73f4:	00070793          	mv	a5,a4
    73f8:	02c77863          	bgeu	a4,a2,7428 <memcpy+0x6c>
    73fc:	0006a803          	lw	a6,0(a3)
    7400:	00478793          	addi	a5,a5,4
    7404:	00468693          	addi	a3,a3,4
    7408:	ff07ae23          	sw	a6,-4(a5)
    740c:	fec7e8e3          	bltu	a5,a2,73fc <memcpy+0x40>
    7410:	fff60793          	addi	a5,a2,-1
    7414:	40e787b3          	sub	a5,a5,a4
    7418:	ffc7f793          	andi	a5,a5,-4
    741c:	00478793          	addi	a5,a5,4
    7420:	00f70733          	add	a4,a4,a5
    7424:	00f585b3          	add	a1,a1,a5
    7428:	01176863          	bltu	a4,a7,7438 <memcpy+0x7c>
    742c:	00008067          	ret
    7430:	00050713          	mv	a4,a0
    7434:	05157863          	bgeu	a0,a7,7484 <memcpy+0xc8>
    7438:	0005c783          	lbu	a5,0(a1)
    743c:	00170713          	addi	a4,a4,1
    7440:	00158593          	addi	a1,a1,1
    7444:	fef70fa3          	sb	a5,-1(a4)
    7448:	fee898e3          	bne	a7,a4,7438 <memcpy+0x7c>
    744c:	00008067          	ret
    7450:	0005c683          	lbu	a3,0(a1)
    7454:	00170713          	addi	a4,a4,1
    7458:	00377793          	andi	a5,a4,3
    745c:	fed70fa3          	sb	a3,-1(a4)
    7460:	00158593          	addi	a1,a1,1
    7464:	f6078ee3          	beqz	a5,73e0 <memcpy+0x24>
    7468:	0005c683          	lbu	a3,0(a1)
    746c:	00170713          	addi	a4,a4,1
    7470:	00377793          	andi	a5,a4,3
    7474:	fed70fa3          	sb	a3,-1(a4)
    7478:	00158593          	addi	a1,a1,1
    747c:	fc079ae3          	bnez	a5,7450 <memcpy+0x94>
    7480:	f61ff06f          	j	73e0 <memcpy+0x24>
    7484:	00008067          	ret
    7488:	ff010113          	addi	sp,sp,-16
    748c:	00812623          	sw	s0,12(sp)
    7490:	02000413          	li	s0,32
    7494:	0005a383          	lw	t2,0(a1)
    7498:	0045a283          	lw	t0,4(a1)
    749c:	0085af83          	lw	t6,8(a1)
    74a0:	00c5af03          	lw	t5,12(a1)
    74a4:	0105ae83          	lw	t4,16(a1)
    74a8:	0145ae03          	lw	t3,20(a1)
    74ac:	0185a303          	lw	t1,24(a1)
    74b0:	01c5a803          	lw	a6,28(a1)
    74b4:	0205a683          	lw	a3,32(a1)
    74b8:	02470713          	addi	a4,a4,36
    74bc:	40e607b3          	sub	a5,a2,a4
    74c0:	fc772e23          	sw	t2,-36(a4)
    74c4:	fe572023          	sw	t0,-32(a4)
    74c8:	fff72223          	sw	t6,-28(a4)
    74cc:	ffe72423          	sw	t5,-24(a4)
    74d0:	ffd72623          	sw	t4,-20(a4)
    74d4:	ffc72823          	sw	t3,-16(a4)
    74d8:	fe672a23          	sw	t1,-12(a4)
    74dc:	ff072c23          	sw	a6,-8(a4)
    74e0:	fed72e23          	sw	a3,-4(a4)
    74e4:	02458593          	addi	a1,a1,36
    74e8:	faf446e3          	blt	s0,a5,7494 <memcpy+0xd8>
    74ec:	00058693          	mv	a3,a1
    74f0:	00070793          	mv	a5,a4
    74f4:	02c77863          	bgeu	a4,a2,7524 <memcpy+0x168>
    74f8:	0006a803          	lw	a6,0(a3)
    74fc:	00478793          	addi	a5,a5,4
    7500:	00468693          	addi	a3,a3,4
    7504:	ff07ae23          	sw	a6,-4(a5)
    7508:	fec7e8e3          	bltu	a5,a2,74f8 <memcpy+0x13c>
    750c:	fff60793          	addi	a5,a2,-1
    7510:	40e787b3          	sub	a5,a5,a4
    7514:	ffc7f793          	andi	a5,a5,-4
    7518:	00478793          	addi	a5,a5,4
    751c:	00f70733          	add	a4,a4,a5
    7520:	00f585b3          	add	a1,a1,a5
    7524:	01176863          	bltu	a4,a7,7534 <memcpy+0x178>
    7528:	00c12403          	lw	s0,12(sp)
    752c:	01010113          	addi	sp,sp,16
    7530:	00008067          	ret
    7534:	0005c783          	lbu	a5,0(a1)
    7538:	00170713          	addi	a4,a4,1
    753c:	00158593          	addi	a1,a1,1
    7540:	fef70fa3          	sb	a5,-1(a4)
    7544:	fee882e3          	beq	a7,a4,7528 <memcpy+0x16c>
    7548:	0005c783          	lbu	a5,0(a1)
    754c:	00170713          	addi	a4,a4,1
    7550:	00158593          	addi	a1,a1,1
    7554:	fef70fa3          	sb	a5,-1(a4)
    7558:	fce89ee3          	bne	a7,a4,7534 <memcpy+0x178>
    755c:	fcdff06f          	j	7528 <memcpy+0x16c>
